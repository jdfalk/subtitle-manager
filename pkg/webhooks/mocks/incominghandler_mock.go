// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIncomingHandler creates a new instance of MockIncomingHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIncomingHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIncomingHandler {
	mock := &MockIncomingHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIncomingHandler is an autogenerated mock type for the IncomingHandler type
type MockIncomingHandler struct {
	mock.Mock
}

type MockIncomingHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIncomingHandler) EXPECT() *MockIncomingHandler_Expecter {
	return &MockIncomingHandler_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function for the type MockIncomingHandler
func (_mock *MockIncomingHandler) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIncomingHandler_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockIncomingHandler_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockIncomingHandler_Expecter) GetName() *MockIncomingHandler_GetName_Call {
	return &MockIncomingHandler_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockIncomingHandler_GetName_Call) Run(run func()) *MockIncomingHandler_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIncomingHandler_GetName_Call) Return(s string) *MockIncomingHandler_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIncomingHandler_GetName_Call) RunAndReturn(run func() string) *MockIncomingHandler_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function for the type MockIncomingHandler
func (_mock *MockIncomingHandler) Handle(ctx context.Context, payload []byte, headers http.Header) error {
	ret := _mock.Called(ctx, payload, headers)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, http.Header) error); ok {
		r0 = returnFunc(ctx, payload, headers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIncomingHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockIncomingHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []byte
//   - headers http.Header
func (_e *MockIncomingHandler_Expecter) Handle(ctx interface{}, payload interface{}, headers interface{}) *MockIncomingHandler_Handle_Call {
	return &MockIncomingHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, payload, headers)}
}

func (_c *MockIncomingHandler_Handle_Call) Run(run func(ctx context.Context, payload []byte, headers http.Header)) *MockIncomingHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 http.Header
		if args[2] != nil {
			arg2 = args[2].(http.Header)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIncomingHandler_Handle_Call) Return(err error) *MockIncomingHandler_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIncomingHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, payload []byte, headers http.Header) error) *MockIncomingHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSignature provides a mock function for the type MockIncomingHandler
func (_mock *MockIncomingHandler) ValidateSignature(payload []byte, signature string) bool {
	ret := _mock.Called(payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSignature")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func([]byte, string) bool); ok {
		r0 = returnFunc(payload, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIncomingHandler_ValidateSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSignature'
type MockIncomingHandler_ValidateSignature_Call struct {
	*mock.Call
}

// ValidateSignature is a helper method to define mock.On call
//   - payload []byte
//   - signature string
func (_e *MockIncomingHandler_Expecter) ValidateSignature(payload interface{}, signature interface{}) *MockIncomingHandler_ValidateSignature_Call {
	return &MockIncomingHandler_ValidateSignature_Call{Call: _e.mock.On("ValidateSignature", payload, signature)}
}

func (_c *MockIncomingHandler_ValidateSignature_Call) Run(run func(payload []byte, signature string)) *MockIncomingHandler_ValidateSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIncomingHandler_ValidateSignature_Call) Return(b bool) *MockIncomingHandler_ValidateSignature_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIncomingHandler_ValidateSignature_Call) RunAndReturn(run func(payload []byte, signature string) bool) *MockIncomingHandler_ValidateSignature_Call {
	_c.Call.Return(run)
	return _c
}
