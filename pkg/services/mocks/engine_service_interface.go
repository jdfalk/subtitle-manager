// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/engine/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEngineServiceInterface creates a new instance of MockEngineServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngineServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngineServiceInterface {
	mock := &MockEngineServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEngineServiceInterface is an autogenerated mock type for the EngineServiceInterface type
type MockEngineServiceInterface struct {
	mock.Mock
}

type MockEngineServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngineServiceInterface) EXPECT() *MockEngineServiceInterface_Expecter {
	return &MockEngineServiceInterface_Expecter{mock: &_m.Mock}
}

// CancelTranscription provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) CancelTranscription(ctx context.Context, req *v1.CancelTranscriptionRequest) (*v1.CancelTranscriptionResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CancelTranscription")
	}

	var r0 *v1.CancelTranscriptionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranscriptionRequest) (*v1.CancelTranscriptionResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranscriptionRequest) *v1.CancelTranscriptionResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CancelTranscriptionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CancelTranscriptionRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_CancelTranscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTranscription'
type MockEngineServiceInterface_CancelTranscription_Call struct {
	*mock.Call
}

// CancelTranscription is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CancelTranscriptionRequest
func (_e *MockEngineServiceInterface_Expecter) CancelTranscription(ctx interface{}, req interface{}) *MockEngineServiceInterface_CancelTranscription_Call {
	return &MockEngineServiceInterface_CancelTranscription_Call{Call: _e.mock.On("CancelTranscription", ctx, req)}
}

func (_c *MockEngineServiceInterface_CancelTranscription_Call) Run(run func(ctx context.Context, req *v1.CancelTranscriptionRequest)) *MockEngineServiceInterface_CancelTranscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CancelTranscriptionRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.CancelTranscriptionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_CancelTranscription_Call) Return(cancelTranscriptionResponse *v1.CancelTranscriptionResponse, err error) *MockEngineServiceInterface_CancelTranscription_Call {
	_c.Call.Return(cancelTranscriptionResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_CancelTranscription_Call) RunAndReturn(run func(ctx context.Context, req *v1.CancelTranscriptionRequest) (*v1.CancelTranscriptionResponse, error)) *MockEngineServiceInterface_CancelTranscription_Call {
	_c.Call.Return(run)
	return _c
}

// CancelTranslation provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) CancelTranslation(ctx context.Context, req *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CancelTranslation")
	}

	var r0 *v1.CancelTranslationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranslationRequest) *v1.CancelTranslationResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CancelTranslationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CancelTranslationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_CancelTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTranslation'
type MockEngineServiceInterface_CancelTranslation_Call struct {
	*mock.Call
}

// CancelTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CancelTranslationRequest
func (_e *MockEngineServiceInterface_Expecter) CancelTranslation(ctx interface{}, req interface{}) *MockEngineServiceInterface_CancelTranslation_Call {
	return &MockEngineServiceInterface_CancelTranslation_Call{Call: _e.mock.On("CancelTranslation", ctx, req)}
}

func (_c *MockEngineServiceInterface_CancelTranslation_Call) Run(run func(ctx context.Context, req *v1.CancelTranslationRequest)) *MockEngineServiceInterface_CancelTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CancelTranslationRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.CancelTranslationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_CancelTranslation_Call) Return(cancelTranslationResponse *v1.CancelTranslationResponse, err error) *MockEngineServiceInterface_CancelTranslation_Call {
	_c.Call.Return(cancelTranslationResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_CancelTranslation_Call) RunAndReturn(run func(ctx context.Context, req *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error)) *MockEngineServiceInterface_CancelTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertSubtitle provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) ConvertSubtitle(ctx context.Context, req *v1.ConvertSubtitleRequest) (*v1.ConvertSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConvertSubtitle")
	}

	var r0 *v1.ConvertSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ConvertSubtitleRequest) (*v1.ConvertSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ConvertSubtitleRequest) *v1.ConvertSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConvertSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ConvertSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_ConvertSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertSubtitle'
type MockEngineServiceInterface_ConvertSubtitle_Call struct {
	*mock.Call
}

// ConvertSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.ConvertSubtitleRequest
func (_e *MockEngineServiceInterface_Expecter) ConvertSubtitle(ctx interface{}, req interface{}) *MockEngineServiceInterface_ConvertSubtitle_Call {
	return &MockEngineServiceInterface_ConvertSubtitle_Call{Call: _e.mock.On("ConvertSubtitle", ctx, req)}
}

func (_c *MockEngineServiceInterface_ConvertSubtitle_Call) Run(run func(ctx context.Context, req *v1.ConvertSubtitleRequest)) *MockEngineServiceInterface_ConvertSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ConvertSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ConvertSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_ConvertSubtitle_Call) Return(convertSubtitleResponse *v1.ConvertSubtitleResponse, err error) *MockEngineServiceInterface_ConvertSubtitle_Call {
	_c.Call.Return(convertSubtitleResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_ConvertSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.ConvertSubtitleRequest) (*v1.ConvertSubtitleResponse, error)) *MockEngineServiceInterface_ConvertSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// GetEngineStatus provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) GetEngineStatus(ctx context.Context, req *v1.GetEngineStatusRequest) (*v1.GetEngineStatusResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetEngineStatus")
	}

	var r0 *v1.GetEngineStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetEngineStatusRequest) (*v1.GetEngineStatusResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetEngineStatusRequest) *v1.GetEngineStatusResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetEngineStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetEngineStatusRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_GetEngineStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEngineStatus'
type MockEngineServiceInterface_GetEngineStatus_Call struct {
	*mock.Call
}

// GetEngineStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetEngineStatusRequest
func (_e *MockEngineServiceInterface_Expecter) GetEngineStatus(ctx interface{}, req interface{}) *MockEngineServiceInterface_GetEngineStatus_Call {
	return &MockEngineServiceInterface_GetEngineStatus_Call{Call: _e.mock.On("GetEngineStatus", ctx, req)}
}

func (_c *MockEngineServiceInterface_GetEngineStatus_Call) Run(run func(ctx context.Context, req *v1.GetEngineStatusRequest)) *MockEngineServiceInterface_GetEngineStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetEngineStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetEngineStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_GetEngineStatus_Call) Return(getEngineStatusResponse *v1.GetEngineStatusResponse, err error) *MockEngineServiceInterface_GetEngineStatus_Call {
	_c.Call.Return(getEngineStatusResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_GetEngineStatus_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetEngineStatusRequest) (*v1.GetEngineStatusResponse, error)) *MockEngineServiceInterface_GetEngineStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetTranscriptionStatus provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) GetTranscriptionStatus(ctx context.Context, req *v1.GetTranscriptionStatusRequest) (*v1.GetTranscriptionStatusResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTranscriptionStatus")
	}

	var r0 *v1.GetTranscriptionStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranscriptionStatusRequest) (*v1.GetTranscriptionStatusResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranscriptionStatusRequest) *v1.GetTranscriptionStatusResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetTranscriptionStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetTranscriptionStatusRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_GetTranscriptionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTranscriptionStatus'
type MockEngineServiceInterface_GetTranscriptionStatus_Call struct {
	*mock.Call
}

// GetTranscriptionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetTranscriptionStatusRequest
func (_e *MockEngineServiceInterface_Expecter) GetTranscriptionStatus(ctx interface{}, req interface{}) *MockEngineServiceInterface_GetTranscriptionStatus_Call {
	return &MockEngineServiceInterface_GetTranscriptionStatus_Call{Call: _e.mock.On("GetTranscriptionStatus", ctx, req)}
}

func (_c *MockEngineServiceInterface_GetTranscriptionStatus_Call) Run(run func(ctx context.Context, req *v1.GetTranscriptionStatusRequest)) *MockEngineServiceInterface_GetTranscriptionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetTranscriptionStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetTranscriptionStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_GetTranscriptionStatus_Call) Return(getTranscriptionStatusResponse *v1.GetTranscriptionStatusResponse, err error) *MockEngineServiceInterface_GetTranscriptionStatus_Call {
	_c.Call.Return(getTranscriptionStatusResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_GetTranscriptionStatus_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetTranscriptionStatusRequest) (*v1.GetTranscriptionStatusResponse, error)) *MockEngineServiceInterface_GetTranscriptionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetTranslationProgress provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) GetTranslationProgress(ctx context.Context, req *v1.GetTranslationProgressRequest) (*v1.GetTranslationProgressResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTranslationProgress")
	}

	var r0 *v1.GetTranslationProgressResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranslationProgressRequest) (*v1.GetTranslationProgressResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranslationProgressRequest) *v1.GetTranslationProgressResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetTranslationProgressResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetTranslationProgressRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_GetTranslationProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTranslationProgress'
type MockEngineServiceInterface_GetTranslationProgress_Call struct {
	*mock.Call
}

// GetTranslationProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetTranslationProgressRequest
func (_e *MockEngineServiceInterface_Expecter) GetTranslationProgress(ctx interface{}, req interface{}) *MockEngineServiceInterface_GetTranslationProgress_Call {
	return &MockEngineServiceInterface_GetTranslationProgress_Call{Call: _e.mock.On("GetTranslationProgress", ctx, req)}
}

func (_c *MockEngineServiceInterface_GetTranslationProgress_Call) Run(run func(ctx context.Context, req *v1.GetTranslationProgressRequest)) *MockEngineServiceInterface_GetTranslationProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetTranslationProgressRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetTranslationProgressRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_GetTranslationProgress_Call) Return(getTranslationProgressResponse *v1.GetTranslationProgressResponse, err error) *MockEngineServiceInterface_GetTranslationProgress_Call {
	_c.Call.Return(getTranslationProgressResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_GetTranslationProgress_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetTranslationProgressRequest) (*v1.GetTranslationProgressResponse, error)) *MockEngineServiceInterface_GetTranslationProgress_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) HealthCheck(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *v1.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) *v1.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.HealthCheckRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockEngineServiceInterface_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.HealthCheckRequest
func (_e *MockEngineServiceInterface_Expecter) HealthCheck(ctx interface{}, req interface{}) *MockEngineServiceInterface_HealthCheck_Call {
	return &MockEngineServiceInterface_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx, req)}
}

func (_c *MockEngineServiceInterface_HealthCheck_Call) Run(run func(ctx context.Context, req *v1.HealthCheckRequest)) *MockEngineServiceInterface_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_HealthCheck_Call) Return(healthCheckResponse *v1.HealthCheckResponse, err error) *MockEngineServiceInterface_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)) *MockEngineServiceInterface_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// MergeSubtitles provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) MergeSubtitles(ctx context.Context, req *v1.MergeSubtitlesRequest) (*v1.MergeSubtitlesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MergeSubtitles")
	}

	var r0 *v1.MergeSubtitlesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.MergeSubtitlesRequest) (*v1.MergeSubtitlesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.MergeSubtitlesRequest) *v1.MergeSubtitlesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.MergeSubtitlesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.MergeSubtitlesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_MergeSubtitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeSubtitles'
type MockEngineServiceInterface_MergeSubtitles_Call struct {
	*mock.Call
}

// MergeSubtitles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.MergeSubtitlesRequest
func (_e *MockEngineServiceInterface_Expecter) MergeSubtitles(ctx interface{}, req interface{}) *MockEngineServiceInterface_MergeSubtitles_Call {
	return &MockEngineServiceInterface_MergeSubtitles_Call{Call: _e.mock.On("MergeSubtitles", ctx, req)}
}

func (_c *MockEngineServiceInterface_MergeSubtitles_Call) Run(run func(ctx context.Context, req *v1.MergeSubtitlesRequest)) *MockEngineServiceInterface_MergeSubtitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.MergeSubtitlesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.MergeSubtitlesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_MergeSubtitles_Call) Return(mergeSubtitlesResponse *v1.MergeSubtitlesResponse, err error) *MockEngineServiceInterface_MergeSubtitles_Call {
	_c.Call.Return(mergeSubtitlesResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_MergeSubtitles_Call) RunAndReturn(run func(ctx context.Context, req *v1.MergeSubtitlesRequest) (*v1.MergeSubtitlesResponse, error)) *MockEngineServiceInterface_MergeSubtitles_Call {
	_c.Call.Return(run)
	return _c
}

// TranscribeAudio provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) TranscribeAudio(ctx context.Context, req *v1.TranscribeAudioRequest) (*v1.TranscribeAudioResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TranscribeAudio")
	}

	var r0 *v1.TranscribeAudioResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranscribeAudioRequest) (*v1.TranscribeAudioResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranscribeAudioRequest) *v1.TranscribeAudioResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TranscribeAudioResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TranscribeAudioRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_TranscribeAudio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranscribeAudio'
type MockEngineServiceInterface_TranscribeAudio_Call struct {
	*mock.Call
}

// TranscribeAudio is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.TranscribeAudioRequest
func (_e *MockEngineServiceInterface_Expecter) TranscribeAudio(ctx interface{}, req interface{}) *MockEngineServiceInterface_TranscribeAudio_Call {
	return &MockEngineServiceInterface_TranscribeAudio_Call{Call: _e.mock.On("TranscribeAudio", ctx, req)}
}

func (_c *MockEngineServiceInterface_TranscribeAudio_Call) Run(run func(ctx context.Context, req *v1.TranscribeAudioRequest)) *MockEngineServiceInterface_TranscribeAudio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TranscribeAudioRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TranscribeAudioRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_TranscribeAudio_Call) Return(transcribeAudioResponse *v1.TranscribeAudioResponse, err error) *MockEngineServiceInterface_TranscribeAudio_Call {
	_c.Call.Return(transcribeAudioResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_TranscribeAudio_Call) RunAndReturn(run func(ctx context.Context, req *v1.TranscribeAudioRequest) (*v1.TranscribeAudioResponse, error)) *MockEngineServiceInterface_TranscribeAudio_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateSubtitle provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) TranslateSubtitle(ctx context.Context, req *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TranslateSubtitle")
	}

	var r0 *v1.TranslateSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranslateSubtitleRequest) *v1.TranslateSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TranslateSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TranslateSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_TranslateSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateSubtitle'
type MockEngineServiceInterface_TranslateSubtitle_Call struct {
	*mock.Call
}

// TranslateSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.TranslateSubtitleRequest
func (_e *MockEngineServiceInterface_Expecter) TranslateSubtitle(ctx interface{}, req interface{}) *MockEngineServiceInterface_TranslateSubtitle_Call {
	return &MockEngineServiceInterface_TranslateSubtitle_Call{Call: _e.mock.On("TranslateSubtitle", ctx, req)}
}

func (_c *MockEngineServiceInterface_TranslateSubtitle_Call) Run(run func(ctx context.Context, req *v1.TranslateSubtitleRequest)) *MockEngineServiceInterface_TranslateSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TranslateSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TranslateSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_TranslateSubtitle_Call) Return(translateSubtitleResponse *v1.TranslateSubtitleResponse, err error) *MockEngineServiceInterface_TranslateSubtitle_Call {
	_c.Call.Return(translateSubtitleResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_TranslateSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error)) *MockEngineServiceInterface_TranslateSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSubtitle provides a mock function for the type MockEngineServiceInterface
func (_mock *MockEngineServiceInterface) ValidateSubtitle(ctx context.Context, req *v1.ValidateSubtitleRequest) (*v1.ValidateSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSubtitle")
	}

	var r0 *v1.ValidateSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ValidateSubtitleRequest) (*v1.ValidateSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ValidateSubtitleRequest) *v1.ValidateSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ValidateSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ValidateSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEngineServiceInterface_ValidateSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSubtitle'
type MockEngineServiceInterface_ValidateSubtitle_Call struct {
	*mock.Call
}

// ValidateSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.ValidateSubtitleRequest
func (_e *MockEngineServiceInterface_Expecter) ValidateSubtitle(ctx interface{}, req interface{}) *MockEngineServiceInterface_ValidateSubtitle_Call {
	return &MockEngineServiceInterface_ValidateSubtitle_Call{Call: _e.mock.On("ValidateSubtitle", ctx, req)}
}

func (_c *MockEngineServiceInterface_ValidateSubtitle_Call) Run(run func(ctx context.Context, req *v1.ValidateSubtitleRequest)) *MockEngineServiceInterface_ValidateSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ValidateSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ValidateSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEngineServiceInterface_ValidateSubtitle_Call) Return(validateSubtitleResponse *v1.ValidateSubtitleResponse, err error) *MockEngineServiceInterface_ValidateSubtitle_Call {
	_c.Call.Return(validateSubtitleResponse, err)
	return _c
}

func (_c *MockEngineServiceInterface_ValidateSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.ValidateSubtitleRequest) (*v1.ValidateSubtitleResponse, error)) *MockEngineServiceInterface_ValidateSubtitle_Call {
	_c.Call.Return(run)
	return _c
}
