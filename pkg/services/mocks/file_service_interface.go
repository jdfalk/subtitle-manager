// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/file/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFileServiceInterface creates a new instance of MockFileServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileServiceInterface {
	mock := &MockFileServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileServiceInterface is an autogenerated mock type for the FileServiceInterface type
type MockFileServiceInterface struct {
	mock.Mock
}

type MockFileServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileServiceInterface) EXPECT() *MockFileServiceInterface_Expecter {
	return &MockFileServiceInterface_Expecter{mock: &_m.Mock}
}

// CleanupFiles provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) CleanupFiles(ctx context.Context, req *v1.CleanupFilesRequest) (*v1.CleanupFilesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CleanupFiles")
	}

	var r0 *v1.CleanupFilesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CleanupFilesRequest) (*v1.CleanupFilesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CleanupFilesRequest) *v1.CleanupFilesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CleanupFilesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CleanupFilesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_CleanupFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupFiles'
type MockFileServiceInterface_CleanupFiles_Call struct {
	*mock.Call
}

// CleanupFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CleanupFilesRequest
func (_e *MockFileServiceInterface_Expecter) CleanupFiles(ctx interface{}, req interface{}) *MockFileServiceInterface_CleanupFiles_Call {
	return &MockFileServiceInterface_CleanupFiles_Call{Call: _e.mock.On("CleanupFiles", ctx, req)}
}

func (_c *MockFileServiceInterface_CleanupFiles_Call) Run(run func(ctx context.Context, req *v1.CleanupFilesRequest)) *MockFileServiceInterface_CleanupFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CleanupFilesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.CleanupFilesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_CleanupFiles_Call) Return(cleanupFilesResponse *v1.CleanupFilesResponse, err error) *MockFileServiceInterface_CleanupFiles_Call {
	_c.Call.Return(cleanupFilesResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_CleanupFiles_Call) RunAndReturn(run func(ctx context.Context, req *v1.CleanupFilesRequest) (*v1.CleanupFilesResponse, error)) *MockFileServiceInterface_CleanupFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFile provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) CopyFile(ctx context.Context, req *v1.CopyFileRequest) (*v1.CopyFileResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 *v1.CopyFileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CopyFileRequest) (*v1.CopyFileResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CopyFileRequest) *v1.CopyFileResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CopyFileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CopyFileRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_CopyFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFile'
type MockFileServiceInterface_CopyFile_Call struct {
	*mock.Call
}

// CopyFile is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CopyFileRequest
func (_e *MockFileServiceInterface_Expecter) CopyFile(ctx interface{}, req interface{}) *MockFileServiceInterface_CopyFile_Call {
	return &MockFileServiceInterface_CopyFile_Call{Call: _e.mock.On("CopyFile", ctx, req)}
}

func (_c *MockFileServiceInterface_CopyFile_Call) Run(run func(ctx context.Context, req *v1.CopyFileRequest)) *MockFileServiceInterface_CopyFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CopyFileRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.CopyFileRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_CopyFile_Call) Return(copyFileResponse *v1.CopyFileResponse, err error) *MockFileServiceInterface_CopyFile_Call {
	_c.Call.Return(copyFileResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_CopyFile_Call) RunAndReturn(run func(ctx context.Context, req *v1.CopyFileRequest) (*v1.CopyFileResponse, error)) *MockFileServiceInterface_CopyFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) DeleteFile(ctx context.Context, req *v1.DeleteFileRequest) (*v1.DeleteFileResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *v1.DeleteFileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.DeleteFileRequest) (*v1.DeleteFileResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.DeleteFileRequest) *v1.DeleteFileResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteFileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.DeleteFileRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockFileServiceInterface_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.DeleteFileRequest
func (_e *MockFileServiceInterface_Expecter) DeleteFile(ctx interface{}, req interface{}) *MockFileServiceInterface_DeleteFile_Call {
	return &MockFileServiceInterface_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, req)}
}

func (_c *MockFileServiceInterface_DeleteFile_Call) Run(run func(ctx context.Context, req *v1.DeleteFileRequest)) *MockFileServiceInterface_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.DeleteFileRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.DeleteFileRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_DeleteFile_Call) Return(deleteFileResponse *v1.DeleteFileResponse, err error) *MockFileServiceInterface_DeleteFile_Call {
	_c.Call.Return(deleteFileResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, req *v1.DeleteFileRequest) (*v1.DeleteFileResponse, error)) *MockFileServiceInterface_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFile provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) DownloadFile(req *v1.DownloadFileRequest, stream v1.FileService_DownloadFileServer) error {
	ret := _mock.Called(req, stream)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*v1.DownloadFileRequest, v1.FileService_DownloadFileServer) error); ok {
		r0 = returnFunc(req, stream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileServiceInterface_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockFileServiceInterface_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - req *v1.DownloadFileRequest
//   - stream v1.FileService_DownloadFileServer
func (_e *MockFileServiceInterface_Expecter) DownloadFile(req interface{}, stream interface{}) *MockFileServiceInterface_DownloadFile_Call {
	return &MockFileServiceInterface_DownloadFile_Call{Call: _e.mock.On("DownloadFile", req, stream)}
}

func (_c *MockFileServiceInterface_DownloadFile_Call) Run(run func(req *v1.DownloadFileRequest, stream v1.FileService_DownloadFileServer)) *MockFileServiceInterface_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1.DownloadFileRequest
		if args[0] != nil {
			arg0 = args[0].(*v1.DownloadFileRequest)
		}
		var arg1 v1.FileService_DownloadFileServer
		if args[1] != nil {
			arg1 = args[1].(v1.FileService_DownloadFileServer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_DownloadFile_Call) Return(err error) *MockFileServiceInterface_DownloadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileServiceInterface_DownloadFile_Call) RunAndReturn(run func(req *v1.DownloadFileRequest, stream v1.FileService_DownloadFileServer) error) *MockFileServiceInterface_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileInfo provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) GetFileInfo(ctx context.Context, req *v1.GetFileInfoRequest) (*v1.GetFileInfoResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInfo")
	}

	var r0 *v1.GetFileInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetFileInfoRequest) (*v1.GetFileInfoResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetFileInfoRequest) *v1.GetFileInfoResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetFileInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetFileInfoRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_GetFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileInfo'
type MockFileServiceInterface_GetFileInfo_Call struct {
	*mock.Call
}

// GetFileInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetFileInfoRequest
func (_e *MockFileServiceInterface_Expecter) GetFileInfo(ctx interface{}, req interface{}) *MockFileServiceInterface_GetFileInfo_Call {
	return &MockFileServiceInterface_GetFileInfo_Call{Call: _e.mock.On("GetFileInfo", ctx, req)}
}

func (_c *MockFileServiceInterface_GetFileInfo_Call) Run(run func(ctx context.Context, req *v1.GetFileInfoRequest)) *MockFileServiceInterface_GetFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetFileInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetFileInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_GetFileInfo_Call) Return(getFileInfoResponse *v1.GetFileInfoResponse, err error) *MockFileServiceInterface_GetFileInfo_Call {
	_c.Call.Return(getFileInfoResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_GetFileInfo_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetFileInfoRequest) (*v1.GetFileInfoResponse, error)) *MockFileServiceInterface_GetFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageInfo provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) GetStorageInfo(ctx context.Context, req *v1.GetStorageInfoRequest) (*v1.GetStorageInfoResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageInfo")
	}

	var r0 *v1.GetStorageInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetStorageInfoRequest) (*v1.GetStorageInfoResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetStorageInfoRequest) *v1.GetStorageInfoResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetStorageInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetStorageInfoRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_GetStorageInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageInfo'
type MockFileServiceInterface_GetStorageInfo_Call struct {
	*mock.Call
}

// GetStorageInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetStorageInfoRequest
func (_e *MockFileServiceInterface_Expecter) GetStorageInfo(ctx interface{}, req interface{}) *MockFileServiceInterface_GetStorageInfo_Call {
	return &MockFileServiceInterface_GetStorageInfo_Call{Call: _e.mock.On("GetStorageInfo", ctx, req)}
}

func (_c *MockFileServiceInterface_GetStorageInfo_Call) Run(run func(ctx context.Context, req *v1.GetStorageInfoRequest)) *MockFileServiceInterface_GetStorageInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetStorageInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetStorageInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_GetStorageInfo_Call) Return(getStorageInfoResponse *v1.GetStorageInfoResponse, err error) *MockFileServiceInterface_GetStorageInfo_Call {
	_c.Call.Return(getStorageInfoResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_GetStorageInfo_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetStorageInfoRequest) (*v1.GetStorageInfoResponse, error)) *MockFileServiceInterface_GetStorageInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) HealthCheck(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *v1.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) *v1.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.HealthCheckRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockFileServiceInterface_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.HealthCheckRequest
func (_e *MockFileServiceInterface_Expecter) HealthCheck(ctx interface{}, req interface{}) *MockFileServiceInterface_HealthCheck_Call {
	return &MockFileServiceInterface_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx, req)}
}

func (_c *MockFileServiceInterface_HealthCheck_Call) Run(run func(ctx context.Context, req *v1.HealthCheckRequest)) *MockFileServiceInterface_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_HealthCheck_Call) Return(healthCheckResponse *v1.HealthCheckResponse, err error) *MockFileServiceInterface_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)) *MockFileServiceInterface_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) ListFiles(ctx context.Context, req *v1.ListFilesRequest) (*v1.ListFilesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 *v1.ListFilesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListFilesRequest) (*v1.ListFilesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListFilesRequest) *v1.ListFilesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListFilesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListFilesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockFileServiceInterface_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.ListFilesRequest
func (_e *MockFileServiceInterface_Expecter) ListFiles(ctx interface{}, req interface{}) *MockFileServiceInterface_ListFiles_Call {
	return &MockFileServiceInterface_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, req)}
}

func (_c *MockFileServiceInterface_ListFiles_Call) Run(run func(ctx context.Context, req *v1.ListFilesRequest)) *MockFileServiceInterface_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ListFilesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ListFilesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_ListFiles_Call) Return(listFilesResponse *v1.ListFilesResponse, err error) *MockFileServiceInterface_ListFiles_Call {
	_c.Call.Return(listFilesResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_ListFiles_Call) RunAndReturn(run func(ctx context.Context, req *v1.ListFilesRequest) (*v1.ListFilesResponse, error)) *MockFileServiceInterface_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// MoveFile provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) MoveFile(ctx context.Context, req *v1.MoveFileRequest) (*v1.MoveFileResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MoveFile")
	}

	var r0 *v1.MoveFileResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.MoveFileRequest) (*v1.MoveFileResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.MoveFileRequest) *v1.MoveFileResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.MoveFileResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.MoveFileRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_MoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveFile'
type MockFileServiceInterface_MoveFile_Call struct {
	*mock.Call
}

// MoveFile is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.MoveFileRequest
func (_e *MockFileServiceInterface_Expecter) MoveFile(ctx interface{}, req interface{}) *MockFileServiceInterface_MoveFile_Call {
	return &MockFileServiceInterface_MoveFile_Call{Call: _e.mock.On("MoveFile", ctx, req)}
}

func (_c *MockFileServiceInterface_MoveFile_Call) Run(run func(ctx context.Context, req *v1.MoveFileRequest)) *MockFileServiceInterface_MoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.MoveFileRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.MoveFileRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_MoveFile_Call) Return(moveFileResponse *v1.MoveFileResponse, err error) *MockFileServiceInterface_MoveFile_Call {
	_c.Call.Return(moveFileResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_MoveFile_Call) RunAndReturn(run func(ctx context.Context, req *v1.MoveFileRequest) (*v1.MoveFileResponse, error)) *MockFileServiceInterface_MoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// SearchFiles provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) SearchFiles(ctx context.Context, req *v1.SearchFilesRequest) (*v1.SearchFilesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchFiles")
	}

	var r0 *v1.SearchFilesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.SearchFilesRequest) (*v1.SearchFilesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.SearchFilesRequest) *v1.SearchFilesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SearchFilesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.SearchFilesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_SearchFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFiles'
type MockFileServiceInterface_SearchFiles_Call struct {
	*mock.Call
}

// SearchFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.SearchFilesRequest
func (_e *MockFileServiceInterface_Expecter) SearchFiles(ctx interface{}, req interface{}) *MockFileServiceInterface_SearchFiles_Call {
	return &MockFileServiceInterface_SearchFiles_Call{Call: _e.mock.On("SearchFiles", ctx, req)}
}

func (_c *MockFileServiceInterface_SearchFiles_Call) Run(run func(ctx context.Context, req *v1.SearchFilesRequest)) *MockFileServiceInterface_SearchFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.SearchFilesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.SearchFilesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_SearchFiles_Call) Return(searchFilesResponse *v1.SearchFilesResponse, err error) *MockFileServiceInterface_SearchFiles_Call {
	_c.Call.Return(searchFilesResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_SearchFiles_Call) RunAndReturn(run func(ctx context.Context, req *v1.SearchFilesRequest) (*v1.SearchFilesResponse, error)) *MockFileServiceInterface_SearchFiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileMetadata provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) UpdateFileMetadata(ctx context.Context, req *v1.UpdateFileMetadataRequest) (*v1.UpdateFileMetadataResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileMetadata")
	}

	var r0 *v1.UpdateFileMetadataResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateFileMetadataRequest) (*v1.UpdateFileMetadataResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateFileMetadataRequest) *v1.UpdateFileMetadataResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateFileMetadataResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UpdateFileMetadataRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileServiceInterface_UpdateFileMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileMetadata'
type MockFileServiceInterface_UpdateFileMetadata_Call struct {
	*mock.Call
}

// UpdateFileMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.UpdateFileMetadataRequest
func (_e *MockFileServiceInterface_Expecter) UpdateFileMetadata(ctx interface{}, req interface{}) *MockFileServiceInterface_UpdateFileMetadata_Call {
	return &MockFileServiceInterface_UpdateFileMetadata_Call{Call: _e.mock.On("UpdateFileMetadata", ctx, req)}
}

func (_c *MockFileServiceInterface_UpdateFileMetadata_Call) Run(run func(ctx context.Context, req *v1.UpdateFileMetadataRequest)) *MockFileServiceInterface_UpdateFileMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.UpdateFileMetadataRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.UpdateFileMetadataRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_UpdateFileMetadata_Call) Return(updateFileMetadataResponse *v1.UpdateFileMetadataResponse, err error) *MockFileServiceInterface_UpdateFileMetadata_Call {
	_c.Call.Return(updateFileMetadataResponse, err)
	return _c
}

func (_c *MockFileServiceInterface_UpdateFileMetadata_Call) RunAndReturn(run func(ctx context.Context, req *v1.UpdateFileMetadataRequest) (*v1.UpdateFileMetadataResponse, error)) *MockFileServiceInterface_UpdateFileMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function for the type MockFileServiceInterface
func (_mock *MockFileServiceInterface) UploadFile(stream v1.FileService_UploadFileServer) error {
	ret := _mock.Called(stream)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(v1.FileService_UploadFileServer) error); ok {
		r0 = returnFunc(stream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileServiceInterface_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFileServiceInterface_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - stream v1.FileService_UploadFileServer
func (_e *MockFileServiceInterface_Expecter) UploadFile(stream interface{}) *MockFileServiceInterface_UploadFile_Call {
	return &MockFileServiceInterface_UploadFile_Call{Call: _e.mock.On("UploadFile", stream)}
}

func (_c *MockFileServiceInterface_UploadFile_Call) Run(run func(stream v1.FileService_UploadFileServer)) *MockFileServiceInterface_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.FileService_UploadFileServer
		if args[0] != nil {
			arg0 = args[0].(v1.FileService_UploadFileServer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileServiceInterface_UploadFile_Call) Return(err error) *MockFileServiceInterface_UploadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileServiceInterface_UploadFile_Call) RunAndReturn(run func(stream v1.FileService_UploadFileServer) error) *MockFileServiceInterface_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}
