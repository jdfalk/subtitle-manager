// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/web/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebServiceInterface creates a new instance of MockWebServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceInterface {
	mock := &MockWebServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebServiceInterface is an autogenerated mock type for the WebServiceInterface type
type MockWebServiceInterface struct {
	mock.Mock
}

type MockWebServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceInterface) EXPECT() *MockWebServiceInterface_Expecter {
	return &MockWebServiceInterface_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) AuthenticateUser(ctx context.Context, req *v1.AuthenticateUserRequest) (*v1.AuthenticateUserResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 *v1.AuthenticateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AuthenticateUserRequest) (*v1.AuthenticateUserResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.AuthenticateUserRequest) *v1.AuthenticateUserResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthenticateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.AuthenticateUserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type MockWebServiceInterface_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.AuthenticateUserRequest
func (_e *MockWebServiceInterface_Expecter) AuthenticateUser(ctx interface{}, req interface{}) *MockWebServiceInterface_AuthenticateUser_Call {
	return &MockWebServiceInterface_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", ctx, req)}
}

func (_c *MockWebServiceInterface_AuthenticateUser_Call) Run(run func(ctx context.Context, req *v1.AuthenticateUserRequest)) *MockWebServiceInterface_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.AuthenticateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.AuthenticateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_AuthenticateUser_Call) Return(authenticateUserResponse *v1.AuthenticateUserResponse, err error) *MockWebServiceInterface_AuthenticateUser_Call {
	_c.Call.Return(authenticateUserResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_AuthenticateUser_Call) RunAndReturn(run func(ctx context.Context, req *v1.AuthenticateUserRequest) (*v1.AuthenticateUserResponse, error)) *MockWebServiceInterface_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CancelTranslation provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) CancelTranslation(ctx context.Context, req *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CancelTranslation")
	}

	var r0 *v1.CancelTranslationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.CancelTranslationRequest) *v1.CancelTranslationResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CancelTranslationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.CancelTranslationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_CancelTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelTranslation'
type MockWebServiceInterface_CancelTranslation_Call struct {
	*mock.Call
}

// CancelTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.CancelTranslationRequest
func (_e *MockWebServiceInterface_Expecter) CancelTranslation(ctx interface{}, req interface{}) *MockWebServiceInterface_CancelTranslation_Call {
	return &MockWebServiceInterface_CancelTranslation_Call{Call: _e.mock.On("CancelTranslation", ctx, req)}
}

func (_c *MockWebServiceInterface_CancelTranslation_Call) Run(run func(ctx context.Context, req *v1.CancelTranslationRequest)) *MockWebServiceInterface_CancelTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.CancelTranslationRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.CancelTranslationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_CancelTranslation_Call) Return(cancelTranslationResponse *v1.CancelTranslationResponse, err error) *MockWebServiceInterface_CancelTranslation_Call {
	_c.Call.Return(cancelTranslationResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_CancelTranslation_Call) RunAndReturn(run func(ctx context.Context, req *v1.CancelTranslationRequest) (*v1.CancelTranslationResponse, error)) *MockWebServiceInterface_CancelTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFile provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) DownloadFile(req *v1.DownloadFileRequest, stream v1.WebService_DownloadFileServer) error {
	ret := _mock.Called(req, stream)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*v1.DownloadFileRequest, v1.WebService_DownloadFileServer) error); ok {
		r0 = returnFunc(req, stream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebServiceInterface_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockWebServiceInterface_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - req *v1.DownloadFileRequest
//   - stream v1.WebService_DownloadFileServer
func (_e *MockWebServiceInterface_Expecter) DownloadFile(req interface{}, stream interface{}) *MockWebServiceInterface_DownloadFile_Call {
	return &MockWebServiceInterface_DownloadFile_Call{Call: _e.mock.On("DownloadFile", req, stream)}
}

func (_c *MockWebServiceInterface_DownloadFile_Call) Run(run func(req *v1.DownloadFileRequest, stream v1.WebService_DownloadFileServer)) *MockWebServiceInterface_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1.DownloadFileRequest
		if args[0] != nil {
			arg0 = args[0].(*v1.DownloadFileRequest)
		}
		var arg1 v1.WebService_DownloadFileServer
		if args[1] != nil {
			arg1 = args[1].(v1.WebService_DownloadFileServer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_DownloadFile_Call) Return(err error) *MockWebServiceInterface_DownloadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebServiceInterface_DownloadFile_Call) RunAndReturn(run func(req *v1.DownloadFileRequest, stream v1.WebService_DownloadFileServer) error) *MockWebServiceInterface_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadSubtitle provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) DownloadSubtitle(ctx context.Context, req *v1.DownloadSubtitleRequest) (*v1.DownloadSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DownloadSubtitle")
	}

	var r0 *v1.DownloadSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.DownloadSubtitleRequest) (*v1.DownloadSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.DownloadSubtitleRequest) *v1.DownloadSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DownloadSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.DownloadSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_DownloadSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadSubtitle'
type MockWebServiceInterface_DownloadSubtitle_Call struct {
	*mock.Call
}

// DownloadSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.DownloadSubtitleRequest
func (_e *MockWebServiceInterface_Expecter) DownloadSubtitle(ctx interface{}, req interface{}) *MockWebServiceInterface_DownloadSubtitle_Call {
	return &MockWebServiceInterface_DownloadSubtitle_Call{Call: _e.mock.On("DownloadSubtitle", ctx, req)}
}

func (_c *MockWebServiceInterface_DownloadSubtitle_Call) Run(run func(ctx context.Context, req *v1.DownloadSubtitleRequest)) *MockWebServiceInterface_DownloadSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.DownloadSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.DownloadSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_DownloadSubtitle_Call) Return(downloadSubtitleResponse *v1.DownloadSubtitleResponse, err error) *MockWebServiceInterface_DownloadSubtitle_Call {
	_c.Call.Return(downloadSubtitleResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_DownloadSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.DownloadSubtitleRequest) (*v1.DownloadSubtitleResponse, error)) *MockWebServiceInterface_DownloadSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// GetTranslationStatus provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) GetTranslationStatus(ctx context.Context, req *v1.GetTranslationStatusRequest) (*v1.GetTranslationStatusResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTranslationStatus")
	}

	var r0 *v1.GetTranslationStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranslationStatusRequest) (*v1.GetTranslationStatusResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetTranslationStatusRequest) *v1.GetTranslationStatusResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetTranslationStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetTranslationStatusRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_GetTranslationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTranslationStatus'
type MockWebServiceInterface_GetTranslationStatus_Call struct {
	*mock.Call
}

// GetTranslationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetTranslationStatusRequest
func (_e *MockWebServiceInterface_Expecter) GetTranslationStatus(ctx interface{}, req interface{}) *MockWebServiceInterface_GetTranslationStatus_Call {
	return &MockWebServiceInterface_GetTranslationStatus_Call{Call: _e.mock.On("GetTranslationStatus", ctx, req)}
}

func (_c *MockWebServiceInterface_GetTranslationStatus_Call) Run(run func(ctx context.Context, req *v1.GetTranslationStatusRequest)) *MockWebServiceInterface_GetTranslationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetTranslationStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetTranslationStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_GetTranslationStatus_Call) Return(getTranslationStatusResponse *v1.GetTranslationStatusResponse, err error) *MockWebServiceInterface_GetTranslationStatus_Call {
	_c.Call.Return(getTranslationStatusResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_GetTranslationStatus_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetTranslationStatusRequest) (*v1.GetTranslationStatusResponse, error)) *MockWebServiceInterface_GetTranslationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) GetUser(ctx context.Context, req *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *v1.GetUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetUserRequest) (*v1.GetUserResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetUserRequest) *v1.GetUserResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetUserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockWebServiceInterface_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.GetUserRequest
func (_e *MockWebServiceInterface_Expecter) GetUser(ctx interface{}, req interface{}) *MockWebServiceInterface_GetUser_Call {
	return &MockWebServiceInterface_GetUser_Call{Call: _e.mock.On("GetUser", ctx, req)}
}

func (_c *MockWebServiceInterface_GetUser_Call) Run(run func(ctx context.Context, req *v1.GetUserRequest)) *MockWebServiceInterface_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetUserRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_GetUser_Call) Return(getUserResponse *v1.GetUserResponse, err error) *MockWebServiceInterface_GetUser_Call {
	_c.Call.Return(getUserResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_GetUser_Call) RunAndReturn(run func(ctx context.Context, req *v1.GetUserRequest) (*v1.GetUserResponse, error)) *MockWebServiceInterface_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) HealthCheck(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *v1.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.HealthCheckRequest) *v1.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.HealthCheckRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockWebServiceInterface_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.HealthCheckRequest
func (_e *MockWebServiceInterface_Expecter) HealthCheck(ctx interface{}, req interface{}) *MockWebServiceInterface_HealthCheck_Call {
	return &MockWebServiceInterface_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx, req)}
}

func (_c *MockWebServiceInterface_HealthCheck_Call) Run(run func(ctx context.Context, req *v1.HealthCheckRequest)) *MockWebServiceInterface_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_HealthCheck_Call) Return(healthCheckResponse *v1.HealthCheckResponse, err error) *MockWebServiceInterface_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)) *MockWebServiceInterface_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutUser provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) LogoutUser(ctx context.Context, req *v1.LogoutUserRequest) (*v1.LogoutUserResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LogoutUser")
	}

	var r0 *v1.LogoutUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.LogoutUserRequest) (*v1.LogoutUserResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.LogoutUserRequest) *v1.LogoutUserResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.LogoutUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.LogoutUserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_LogoutUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutUser'
type MockWebServiceInterface_LogoutUser_Call struct {
	*mock.Call
}

// LogoutUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.LogoutUserRequest
func (_e *MockWebServiceInterface_Expecter) LogoutUser(ctx interface{}, req interface{}) *MockWebServiceInterface_LogoutUser_Call {
	return &MockWebServiceInterface_LogoutUser_Call{Call: _e.mock.On("LogoutUser", ctx, req)}
}

func (_c *MockWebServiceInterface_LogoutUser_Call) Run(run func(ctx context.Context, req *v1.LogoutUserRequest)) *MockWebServiceInterface_LogoutUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.LogoutUserRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.LogoutUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_LogoutUser_Call) Return(logoutUserResponse *v1.LogoutUserResponse, err error) *MockWebServiceInterface_LogoutUser_Call {
	_c.Call.Return(logoutUserResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_LogoutUser_Call) RunAndReturn(run func(ctx context.Context, req *v1.LogoutUserRequest) (*v1.LogoutUserResponse, error)) *MockWebServiceInterface_LogoutUser_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSubtitles provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) SearchSubtitles(ctx context.Context, req *v1.SearchSubtitlesRequest) (*v1.SearchSubtitlesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchSubtitles")
	}

	var r0 *v1.SearchSubtitlesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.SearchSubtitlesRequest) (*v1.SearchSubtitlesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.SearchSubtitlesRequest) *v1.SearchSubtitlesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SearchSubtitlesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.SearchSubtitlesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_SearchSubtitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSubtitles'
type MockWebServiceInterface_SearchSubtitles_Call struct {
	*mock.Call
}

// SearchSubtitles is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.SearchSubtitlesRequest
func (_e *MockWebServiceInterface_Expecter) SearchSubtitles(ctx interface{}, req interface{}) *MockWebServiceInterface_SearchSubtitles_Call {
	return &MockWebServiceInterface_SearchSubtitles_Call{Call: _e.mock.On("SearchSubtitles", ctx, req)}
}

func (_c *MockWebServiceInterface_SearchSubtitles_Call) Run(run func(ctx context.Context, req *v1.SearchSubtitlesRequest)) *MockWebServiceInterface_SearchSubtitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.SearchSubtitlesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.SearchSubtitlesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_SearchSubtitles_Call) Return(searchSubtitlesResponse *v1.SearchSubtitlesResponse, err error) *MockWebServiceInterface_SearchSubtitles_Call {
	_c.Call.Return(searchSubtitlesResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_SearchSubtitles_Call) RunAndReturn(run func(ctx context.Context, req *v1.SearchSubtitlesRequest) (*v1.SearchSubtitlesResponse, error)) *MockWebServiceInterface_SearchSubtitles_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateSubtitle provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) TranslateSubtitle(ctx context.Context, req *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TranslateSubtitle")
	}

	var r0 *v1.TranslateSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TranslateSubtitleRequest) *v1.TranslateSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TranslateSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TranslateSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_TranslateSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateSubtitle'
type MockWebServiceInterface_TranslateSubtitle_Call struct {
	*mock.Call
}

// TranslateSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.TranslateSubtitleRequest
func (_e *MockWebServiceInterface_Expecter) TranslateSubtitle(ctx interface{}, req interface{}) *MockWebServiceInterface_TranslateSubtitle_Call {
	return &MockWebServiceInterface_TranslateSubtitle_Call{Call: _e.mock.On("TranslateSubtitle", ctx, req)}
}

func (_c *MockWebServiceInterface_TranslateSubtitle_Call) Run(run func(ctx context.Context, req *v1.TranslateSubtitleRequest)) *MockWebServiceInterface_TranslateSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TranslateSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TranslateSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_TranslateSubtitle_Call) Return(translateSubtitleResponse *v1.TranslateSubtitleResponse, err error) *MockWebServiceInterface_TranslateSubtitle_Call {
	_c.Call.Return(translateSubtitleResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_TranslateSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.TranslateSubtitleRequest) (*v1.TranslateSubtitleResponse, error)) *MockWebServiceInterface_TranslateSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) UpdateUser(ctx context.Context, req *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *v1.UpdateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateUserRequest) *v1.UpdateUserResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UpdateUserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockWebServiceInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.UpdateUserRequest
func (_e *MockWebServiceInterface_Expecter) UpdateUser(ctx interface{}, req interface{}) *MockWebServiceInterface_UpdateUser_Call {
	return &MockWebServiceInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, req)}
}

func (_c *MockWebServiceInterface_UpdateUser_Call) Run(run func(ctx context.Context, req *v1.UpdateUserRequest)) *MockWebServiceInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.UpdateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.UpdateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_UpdateUser_Call) Return(updateUserResponse *v1.UpdateUserResponse, err error) *MockWebServiceInterface_UpdateUser_Call {
	_c.Call.Return(updateUserResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, req *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error)) *MockWebServiceInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPreferences provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) UpdateUserPreferences(ctx context.Context, req *v1.UpdateUserPreferencesRequest) (*v1.UpdateUserPreferencesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPreferences")
	}

	var r0 *v1.UpdateUserPreferencesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateUserPreferencesRequest) (*v1.UpdateUserPreferencesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UpdateUserPreferencesRequest) *v1.UpdateUserPreferencesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateUserPreferencesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UpdateUserPreferencesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_UpdateUserPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPreferences'
type MockWebServiceInterface_UpdateUserPreferences_Call struct {
	*mock.Call
}

// UpdateUserPreferences is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.UpdateUserPreferencesRequest
func (_e *MockWebServiceInterface_Expecter) UpdateUserPreferences(ctx interface{}, req interface{}) *MockWebServiceInterface_UpdateUserPreferences_Call {
	return &MockWebServiceInterface_UpdateUserPreferences_Call{Call: _e.mock.On("UpdateUserPreferences", ctx, req)}
}

func (_c *MockWebServiceInterface_UpdateUserPreferences_Call) Run(run func(ctx context.Context, req *v1.UpdateUserPreferencesRequest)) *MockWebServiceInterface_UpdateUserPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.UpdateUserPreferencesRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.UpdateUserPreferencesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_UpdateUserPreferences_Call) Return(updateUserPreferencesResponse *v1.UpdateUserPreferencesResponse, err error) *MockWebServiceInterface_UpdateUserPreferences_Call {
	_c.Call.Return(updateUserPreferencesResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_UpdateUserPreferences_Call) RunAndReturn(run func(ctx context.Context, req *v1.UpdateUserPreferencesRequest) (*v1.UpdateUserPreferencesResponse, error)) *MockWebServiceInterface_UpdateUserPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) UploadFile(stream v1.WebService_UploadFileServer) error {
	ret := _mock.Called(stream)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(v1.WebService_UploadFileServer) error); ok {
		r0 = returnFunc(stream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebServiceInterface_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockWebServiceInterface_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - stream v1.WebService_UploadFileServer
func (_e *MockWebServiceInterface_Expecter) UploadFile(stream interface{}) *MockWebServiceInterface_UploadFile_Call {
	return &MockWebServiceInterface_UploadFile_Call{Call: _e.mock.On("UploadFile", stream)}
}

func (_c *MockWebServiceInterface_UploadFile_Call) Run(run func(stream v1.WebService_UploadFileServer)) *MockWebServiceInterface_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.WebService_UploadFileServer
		if args[0] != nil {
			arg0 = args[0].(v1.WebService_UploadFileServer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_UploadFile_Call) Return(err error) *MockWebServiceInterface_UploadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebServiceInterface_UploadFile_Call) RunAndReturn(run func(stream v1.WebService_UploadFileServer) error) *MockWebServiceInterface_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSubtitle provides a mock function for the type MockWebServiceInterface
func (_mock *MockWebServiceInterface) UploadSubtitle(ctx context.Context, req *v1.UploadSubtitleRequest) (*v1.UploadSubtitleResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UploadSubtitle")
	}

	var r0 *v1.UploadSubtitleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UploadSubtitleRequest) (*v1.UploadSubtitleResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.UploadSubtitleRequest) *v1.UploadSubtitleResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UploadSubtitleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.UploadSubtitleRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceInterface_UploadSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSubtitle'
type MockWebServiceInterface_UploadSubtitle_Call struct {
	*mock.Call
}

// UploadSubtitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req *v1.UploadSubtitleRequest
func (_e *MockWebServiceInterface_Expecter) UploadSubtitle(ctx interface{}, req interface{}) *MockWebServiceInterface_UploadSubtitle_Call {
	return &MockWebServiceInterface_UploadSubtitle_Call{Call: _e.mock.On("UploadSubtitle", ctx, req)}
}

func (_c *MockWebServiceInterface_UploadSubtitle_Call) Run(run func(ctx context.Context, req *v1.UploadSubtitleRequest)) *MockWebServiceInterface_UploadSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.UploadSubtitleRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.UploadSubtitleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceInterface_UploadSubtitle_Call) Return(uploadSubtitleResponse *v1.UploadSubtitleResponse, err error) *MockWebServiceInterface_UploadSubtitle_Call {
	_c.Call.Return(uploadSubtitleResponse, err)
	return _c
}

func (_c *MockWebServiceInterface_UploadSubtitle_Call) RunAndReturn(run func(ctx context.Context, req *v1.UploadSubtitleRequest) (*v1.UploadSubtitleResponse, error)) *MockWebServiceInterface_UploadSubtitle_Call {
	_c.Call.Return(run)
	return _c
}
