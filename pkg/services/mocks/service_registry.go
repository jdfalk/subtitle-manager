// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/services"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceRegistry creates a new instance of MockServiceRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceRegistry {
	mock := &MockServiceRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceRegistry is an autogenerated mock type for the ServiceRegistry type
type MockServiceRegistry struct {
	mock.Mock
}

type MockServiceRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceRegistry) EXPECT() *MockServiceRegistry_Expecter {
	return &MockServiceRegistry_Expecter{mock: &_m.Mock}
}

// EngineService provides a mock function for the type MockServiceRegistry
func (_mock *MockServiceRegistry) EngineService() services.EngineServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineService")
	}

	var r0 services.EngineServiceInterface
	if returnFunc, ok := ret.Get(0).(func() services.EngineServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.EngineServiceInterface)
		}
	}
	return r0
}

// MockServiceRegistry_EngineService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineService'
type MockServiceRegistry_EngineService_Call struct {
	*mock.Call
}

// EngineService is a helper method to define mock.On call
func (_e *MockServiceRegistry_Expecter) EngineService() *MockServiceRegistry_EngineService_Call {
	return &MockServiceRegistry_EngineService_Call{Call: _e.mock.On("EngineService")}
}

func (_c *MockServiceRegistry_EngineService_Call) Run(run func()) *MockServiceRegistry_EngineService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceRegistry_EngineService_Call) Return(engineServiceInterface services.EngineServiceInterface) *MockServiceRegistry_EngineService_Call {
	_c.Call.Return(engineServiceInterface)
	return _c
}

func (_c *MockServiceRegistry_EngineService_Call) RunAndReturn(run func() services.EngineServiceInterface) *MockServiceRegistry_EngineService_Call {
	_c.Call.Return(run)
	return _c
}

// FileService provides a mock function for the type MockServiceRegistry
func (_mock *MockServiceRegistry) FileService() services.FileServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileService")
	}

	var r0 services.FileServiceInterface
	if returnFunc, ok := ret.Get(0).(func() services.FileServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.FileServiceInterface)
		}
	}
	return r0
}

// MockServiceRegistry_FileService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileService'
type MockServiceRegistry_FileService_Call struct {
	*mock.Call
}

// FileService is a helper method to define mock.On call
func (_e *MockServiceRegistry_Expecter) FileService() *MockServiceRegistry_FileService_Call {
	return &MockServiceRegistry_FileService_Call{Call: _e.mock.On("FileService")}
}

func (_c *MockServiceRegistry_FileService_Call) Run(run func()) *MockServiceRegistry_FileService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceRegistry_FileService_Call) Return(fileServiceInterface services.FileServiceInterface) *MockServiceRegistry_FileService_Call {
	_c.Call.Return(fileServiceInterface)
	return _c
}

func (_c *MockServiceRegistry_FileService_Call) RunAndReturn(run func() services.FileServiceInterface) *MockServiceRegistry_FileService_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockServiceRegistry
func (_mock *MockServiceRegistry) HealthCheck(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceRegistry_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockServiceRegistry_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceRegistry_Expecter) HealthCheck(ctx interface{}) *MockServiceRegistry_HealthCheck_Call {
	return &MockServiceRegistry_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *MockServiceRegistry_HealthCheck_Call) Run(run func(ctx context.Context)) *MockServiceRegistry_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceRegistry_HealthCheck_Call) Return(err error) *MockServiceRegistry_HealthCheck_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceRegistry_HealthCheck_Call) RunAndReturn(run func(ctx context.Context) error) *MockServiceRegistry_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// WebService provides a mock function for the type MockServiceRegistry
func (_mock *MockServiceRegistry) WebService() services.WebServiceInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WebService")
	}

	var r0 services.WebServiceInterface
	if returnFunc, ok := ret.Get(0).(func() services.WebServiceInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.WebServiceInterface)
		}
	}
	return r0
}

// MockServiceRegistry_WebService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WebService'
type MockServiceRegistry_WebService_Call struct {
	*mock.Call
}

// WebService is a helper method to define mock.On call
func (_e *MockServiceRegistry_Expecter) WebService() *MockServiceRegistry_WebService_Call {
	return &MockServiceRegistry_WebService_Call{Call: _e.mock.On("WebService")}
}

func (_c *MockServiceRegistry_WebService_Call) Run(run func()) *MockServiceRegistry_WebService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceRegistry_WebService_Call) Return(webServiceInterface services.WebServiceInterface) *MockServiceRegistry_WebService_Call {
	_c.Call.Return(webServiceInterface)
	return _c
}

func (_c *MockServiceRegistry_WebService_Call) RunAndReturn(run func() services.WebServiceInterface) *MockServiceRegistry_WebService_Call {
	_c.Call.Return(run)
	return _c
}
