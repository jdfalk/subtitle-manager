// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/events"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishSearchFailed provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSearchFailed(ctx context.Context, data events.SearchFailedData) {
	_mock.Called(ctx, data)
	return
}

// MockEventPublisher_PublishSearchFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSearchFailed'
type MockEventPublisher_PublishSearchFailed_Call struct {
	*mock.Call
}

// PublishSearchFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - data events.SearchFailedData
func (_e *MockEventPublisher_Expecter) PublishSearchFailed(ctx interface{}, data interface{}) *MockEventPublisher_PublishSearchFailed_Call {
	return &MockEventPublisher_PublishSearchFailed_Call{Call: _e.mock.On("PublishSearchFailed", ctx, data)}
}

func (_c *MockEventPublisher_PublishSearchFailed_Call) Run(run func(ctx context.Context, data events.SearchFailedData)) *MockEventPublisher_PublishSearchFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.SearchFailedData
		if args[1] != nil {
			arg1 = args[1].(events.SearchFailedData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSearchFailed_Call) Return() *MockEventPublisher_PublishSearchFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventPublisher_PublishSearchFailed_Call) RunAndReturn(run func(ctx context.Context, data events.SearchFailedData)) *MockEventPublisher_PublishSearchFailed_Call {
	_c.Run(run)
	return _c
}

// PublishSubtitleDownloaded provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSubtitleDownloaded(ctx context.Context, data events.SubtitleDownloadedData) {
	_mock.Called(ctx, data)
	return
}

// MockEventPublisher_PublishSubtitleDownloaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSubtitleDownloaded'
type MockEventPublisher_PublishSubtitleDownloaded_Call struct {
	*mock.Call
}

// PublishSubtitleDownloaded is a helper method to define mock.On call
//   - ctx context.Context
//   - data events.SubtitleDownloadedData
func (_e *MockEventPublisher_Expecter) PublishSubtitleDownloaded(ctx interface{}, data interface{}) *MockEventPublisher_PublishSubtitleDownloaded_Call {
	return &MockEventPublisher_PublishSubtitleDownloaded_Call{Call: _e.mock.On("PublishSubtitleDownloaded", ctx, data)}
}

func (_c *MockEventPublisher_PublishSubtitleDownloaded_Call) Run(run func(ctx context.Context, data events.SubtitleDownloadedData)) *MockEventPublisher_PublishSubtitleDownloaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.SubtitleDownloadedData
		if args[1] != nil {
			arg1 = args[1].(events.SubtitleDownloadedData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleDownloaded_Call) Return() *MockEventPublisher_PublishSubtitleDownloaded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleDownloaded_Call) RunAndReturn(run func(ctx context.Context, data events.SubtitleDownloadedData)) *MockEventPublisher_PublishSubtitleDownloaded_Call {
	_c.Run(run)
	return _c
}

// PublishSubtitleFailed provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSubtitleFailed(ctx context.Context, data events.SubtitleFailedData) {
	_mock.Called(ctx, data)
	return
}

// MockEventPublisher_PublishSubtitleFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSubtitleFailed'
type MockEventPublisher_PublishSubtitleFailed_Call struct {
	*mock.Call
}

// PublishSubtitleFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - data events.SubtitleFailedData
func (_e *MockEventPublisher_Expecter) PublishSubtitleFailed(ctx interface{}, data interface{}) *MockEventPublisher_PublishSubtitleFailed_Call {
	return &MockEventPublisher_PublishSubtitleFailed_Call{Call: _e.mock.On("PublishSubtitleFailed", ctx, data)}
}

func (_c *MockEventPublisher_PublishSubtitleFailed_Call) Run(run func(ctx context.Context, data events.SubtitleFailedData)) *MockEventPublisher_PublishSubtitleFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.SubtitleFailedData
		if args[1] != nil {
			arg1 = args[1].(events.SubtitleFailedData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleFailed_Call) Return() *MockEventPublisher_PublishSubtitleFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleFailed_Call) RunAndReturn(run func(ctx context.Context, data events.SubtitleFailedData)) *MockEventPublisher_PublishSubtitleFailed_Call {
	_c.Run(run)
	return _c
}

// PublishSubtitleUpgraded provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSubtitleUpgraded(ctx context.Context, data events.SubtitleUpgradedData) {
	_mock.Called(ctx, data)
	return
}

// MockEventPublisher_PublishSubtitleUpgraded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSubtitleUpgraded'
type MockEventPublisher_PublishSubtitleUpgraded_Call struct {
	*mock.Call
}

// PublishSubtitleUpgraded is a helper method to define mock.On call
//   - ctx context.Context
//   - data events.SubtitleUpgradedData
func (_e *MockEventPublisher_Expecter) PublishSubtitleUpgraded(ctx interface{}, data interface{}) *MockEventPublisher_PublishSubtitleUpgraded_Call {
	return &MockEventPublisher_PublishSubtitleUpgraded_Call{Call: _e.mock.On("PublishSubtitleUpgraded", ctx, data)}
}

func (_c *MockEventPublisher_PublishSubtitleUpgraded_Call) Run(run func(ctx context.Context, data events.SubtitleUpgradedData)) *MockEventPublisher_PublishSubtitleUpgraded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.SubtitleUpgradedData
		if args[1] != nil {
			arg1 = args[1].(events.SubtitleUpgradedData)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleUpgraded_Call) Return() *MockEventPublisher_PublishSubtitleUpgraded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventPublisher_PublishSubtitleUpgraded_Call) RunAndReturn(run func(ctx context.Context, data events.SubtitleUpgradedData)) *MockEventPublisher_PublishSubtitleUpgraded_Call {
	_c.Run(run)
	return _c
}
