// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/errors"
	mock "github.com/stretchr/testify/mock"
)

// NewMockErrorHandler creates a new instance of MockErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandler {
	mock := &MockErrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorHandler is an autogenerated mock type for the ErrorHandler type
type MockErrorHandler struct {
	mock.Mock
}

type MockErrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorHandler) EXPECT() *MockErrorHandler_Expecter {
	return &MockErrorHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockErrorHandler
func (_mock *MockErrorHandler) Handle(ctx context.Context, err error) *errors.Response {
	ret := _mock.Called(ctx, err)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *errors.Response
	if returnFunc, ok := ret.Get(0).(func(context.Context, error) *errors.Response); ok {
		r0 = returnFunc(ctx, err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Response)
		}
	}
	return r0
}

// MockErrorHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockErrorHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - err error
func (_e *MockErrorHandler_Expecter) Handle(ctx interface{}, err interface{}) *MockErrorHandler_Handle_Call {
	return &MockErrorHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, err)}
}

func (_c *MockErrorHandler_Handle_Call) Run(run func(ctx context.Context, err error)) *MockErrorHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockErrorHandler_Handle_Call) Return(response *errors.Response) *MockErrorHandler_Handle_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *MockErrorHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, err error) *errors.Response) *MockErrorHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function for the type MockErrorHandler
func (_mock *MockErrorHandler) Recover(ctx context.Context, recovered interface{}) *errors.Response {
	ret := _mock.Called(ctx, recovered)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 *errors.Response
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) *errors.Response); ok {
		r0 = returnFunc(ctx, recovered)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Response)
		}
	}
	return r0
}

// MockErrorHandler_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type MockErrorHandler_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - ctx context.Context
//   - recovered interface{}
func (_e *MockErrorHandler_Expecter) Recover(ctx interface{}, recovered interface{}) *MockErrorHandler_Recover_Call {
	return &MockErrorHandler_Recover_Call{Call: _e.mock.On("Recover", ctx, recovered)}
}

func (_c *MockErrorHandler_Recover_Call) Run(run func(ctx context.Context, recovered interface{})) *MockErrorHandler_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockErrorHandler_Recover_Call) Return(response *errors.Response) *MockErrorHandler_Recover_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *MockErrorHandler_Recover_Call) RunAndReturn(run func(ctx context.Context, recovered interface{}) *errors.Response) *MockErrorHandler_Recover_Call {
	_c.Call.Return(run)
	return _c
}
