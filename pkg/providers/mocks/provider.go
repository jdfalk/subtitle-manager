// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: ctx, mediaPath, lang
func (_m *Provider) Fetch(ctx context.Context, mediaPath string, lang string) ([]byte, error) {
	ret := _m.Called(ctx, mediaPath, lang)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, mediaPath, lang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, mediaPath, lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, mediaPath, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type Provider_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaPath string
//   - lang string
func (_e *Provider_Expecter) Fetch(ctx interface{}, mediaPath interface{}, lang interface{}) *Provider_Fetch_Call {
	return &Provider_Fetch_Call{Call: _e.mock.On("Fetch", ctx, mediaPath, lang)}
}

func (_c *Provider_Fetch_Call) Run(run func(ctx context.Context, mediaPath string, lang string)) *Provider_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Provider_Fetch_Call) Return(_a0 []byte, _a1 error) *Provider_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_Fetch_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *Provider_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
