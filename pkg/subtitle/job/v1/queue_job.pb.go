// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: subtitle/job/v1/queue_job.proto

//go:build !protoopaque

package jobpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TranslationJob represents a translation request for one or more subtitle files.
type TranslationJob struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Paths to subtitle files to translate. Use one entry for single-file jobs.
	InputPaths []string `protobuf:"bytes,1,rep,name=input_paths,json=inputPaths" json:"input_paths,omitempty"`
	// Destination path for the output subtitle file when translating a single file.
	OutputPath *string `protobuf:"bytes,2,opt,name=output_path,json=outputPath" json:"output_path,omitempty"`
	// Target language code, e.g. "en" or "es".
	Language *string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	// Translation service identifier (google, gpt, grpc).
	Service *string `protobuf:"bytes,4,opt,name=service" json:"service,omitempty"`
	// API key for Google Translate when using the google service.
	GoogleKey *string `protobuf:"bytes,5,opt,name=google_key,json=googleKey" json:"google_key,omitempty"`
	// API key for OpenAI when using the gpt service.
	GptKey *string `protobuf:"bytes,6,opt,name=gpt_key,json=gptKey" json:"gpt_key,omitempty"`
	// Address of a remote gRPC translator service.
	GrpcAddr *string `protobuf:"bytes,7,opt,name=grpc_addr,json=grpcAddr" json:"grpc_addr,omitempty"`
	// Number of workers for batch translation.
	Workers       *int32 `protobuf:"varint,8,opt,name=workers" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranslationJob) Reset() {
	*x = TranslationJob{}
	mi := &file_subtitle_job_v1_queue_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslationJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationJob) ProtoMessage() {}

func (x *TranslationJob) ProtoReflect() protoreflect.Message {
	mi := &file_subtitle_job_v1_queue_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TranslationJob) GetInputPaths() []string {
	if x != nil {
		return x.InputPaths
	}
	return nil
}

func (x *TranslationJob) GetOutputPath() string {
	if x != nil && x.OutputPath != nil {
		return *x.OutputPath
	}
	return ""
}

func (x *TranslationJob) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *TranslationJob) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *TranslationJob) GetGoogleKey() string {
	if x != nil && x.GoogleKey != nil {
		return *x.GoogleKey
	}
	return ""
}

func (x *TranslationJob) GetGptKey() string {
	if x != nil && x.GptKey != nil {
		return *x.GptKey
	}
	return ""
}

func (x *TranslationJob) GetGrpcAddr() string {
	if x != nil && x.GrpcAddr != nil {
		return *x.GrpcAddr
	}
	return ""
}

func (x *TranslationJob) GetWorkers() int32 {
	if x != nil && x.Workers != nil {
		return *x.Workers
	}
	return 0
}

func (x *TranslationJob) SetInputPaths(v []string) {
	x.InputPaths = v
}

func (x *TranslationJob) SetOutputPath(v string) {
	x.OutputPath = &v
}

func (x *TranslationJob) SetLanguage(v string) {
	x.Language = &v
}

func (x *TranslationJob) SetService(v string) {
	x.Service = &v
}

func (x *TranslationJob) SetGoogleKey(v string) {
	x.GoogleKey = &v
}

func (x *TranslationJob) SetGptKey(v string) {
	x.GptKey = &v
}

func (x *TranslationJob) SetGrpcAddr(v string) {
	x.GrpcAddr = &v
}

func (x *TranslationJob) SetWorkers(v int32) {
	x.Workers = &v
}

func (x *TranslationJob) HasOutputPath() bool {
	if x == nil {
		return false
	}
	return x.OutputPath != nil
}

func (x *TranslationJob) HasLanguage() bool {
	if x == nil {
		return false
	}
	return x.Language != nil
}

func (x *TranslationJob) HasService() bool {
	if x == nil {
		return false
	}
	return x.Service != nil
}

func (x *TranslationJob) HasGoogleKey() bool {
	if x == nil {
		return false
	}
	return x.GoogleKey != nil
}

func (x *TranslationJob) HasGptKey() bool {
	if x == nil {
		return false
	}
	return x.GptKey != nil
}

func (x *TranslationJob) HasGrpcAddr() bool {
	if x == nil {
		return false
	}
	return x.GrpcAddr != nil
}

func (x *TranslationJob) HasWorkers() bool {
	if x == nil {
		return false
	}
	return x.Workers != nil
}

func (x *TranslationJob) ClearOutputPath() {
	x.OutputPath = nil
}

func (x *TranslationJob) ClearLanguage() {
	x.Language = nil
}

func (x *TranslationJob) ClearService() {
	x.Service = nil
}

func (x *TranslationJob) ClearGoogleKey() {
	x.GoogleKey = nil
}

func (x *TranslationJob) ClearGptKey() {
	x.GptKey = nil
}

func (x *TranslationJob) ClearGrpcAddr() {
	x.GrpcAddr = nil
}

func (x *TranslationJob) ClearWorkers() {
	x.Workers = nil
}

type TranslationJob_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Paths to subtitle files to translate. Use one entry for single-file jobs.
	InputPaths []string
	// Destination path for the output subtitle file when translating a single file.
	OutputPath *string
	// Target language code, e.g. "en" or "es".
	Language *string
	// Translation service identifier (google, gpt, grpc).
	Service *string
	// API key for Google Translate when using the google service.
	GoogleKey *string
	// API key for OpenAI when using the gpt service.
	GptKey *string
	// Address of a remote gRPC translator service.
	GrpcAddr *string
	// Number of workers for batch translation.
	Workers *int32
}

func (b0 TranslationJob_builder) Build() *TranslationJob {
	m0 := &TranslationJob{}
	b, x := &b0, m0
	_, _ = b, x
	x.InputPaths = b.InputPaths
	x.OutputPath = b.OutputPath
	x.Language = b.Language
	x.Service = b.Service
	x.GoogleKey = b.GoogleKey
	x.GptKey = b.GptKey
	x.GrpcAddr = b.GrpcAddr
	x.Workers = b.Workers
	return m0
}

var File_subtitle_job_v1_queue_job_proto protoreflect.FileDescriptor

const file_subtitle_job_v1_queue_job_proto_rawDesc = "" +
	"\n" +
	"\x1fsubtitle/job/v1/queue_job.proto\x12\x0fsubtitle.job.v1\x1a!google/protobuf/go_features.proto\"\xf7\x01\n" +
	"\x0eTranslationJob\x12\x1f\n" +
	"\vinput_paths\x18\x01 \x03(\tR\n" +
	"inputPaths\x12\x1f\n" +
	"\voutput_path\x18\x02 \x01(\tR\n" +
	"outputPath\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12\x18\n" +
	"\aservice\x18\x04 \x01(\tR\aservice\x12\x1d\n" +
	"\n" +
	"google_key\x18\x05 \x01(\tR\tgoogleKey\x12\x17\n" +
	"\agpt_key\x18\x06 \x01(\tR\x06gptKey\x12\x1b\n" +
	"\tgrpc_addr\x18\a \x01(\tR\bgrpcAddr\x12\x18\n" +
	"\aworkers\x18\b \x01(\x05R\aworkersB<Z2github.com/jdfalk/subtitle-manager/pkg/jobpb;jobpb\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_subtitle_job_v1_queue_job_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_subtitle_job_v1_queue_job_proto_goTypes = []any{
	(*TranslationJob)(nil), // 0: subtitle.job.v1.TranslationJob
}
var file_subtitle_job_v1_queue_job_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_subtitle_job_v1_queue_job_proto_init() }
func file_subtitle_job_v1_queue_job_proto_init() {
	if File_subtitle_job_v1_queue_job_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subtitle_job_v1_queue_job_proto_rawDesc), len(file_subtitle_job_v1_queue_job_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subtitle_job_v1_queue_job_proto_goTypes,
		DependencyIndexes: file_subtitle_job_v1_queue_job_proto_depIdxs,
		MessageInfos:      file_subtitle_job_v1_queue_job_proto_msgTypes,
	}.Build()
	File_subtitle_job_v1_queue_job_proto = out.File
	file_subtitle_job_v1_queue_job_proto_goTypes = nil
	file_subtitle_job_v1_queue_job_proto_depIdxs = nil
}
