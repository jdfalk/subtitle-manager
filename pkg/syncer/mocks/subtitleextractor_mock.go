// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/asticode/go-astisub"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubtitleExtractor creates a new instance of MockSubtitleExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubtitleExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubtitleExtractor {
	mock := &MockSubtitleExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubtitleExtractor is an autogenerated mock type for the SubtitleExtractor type
type MockSubtitleExtractor struct {
	mock.Mock
}

type MockSubtitleExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubtitleExtractor) EXPECT() *MockSubtitleExtractor_Expecter {
	return &MockSubtitleExtractor_Expecter{mock: &_m.Mock}
}

// ExtractTrack provides a mock function for the type MockSubtitleExtractor
func (_mock *MockSubtitleExtractor) ExtractTrack(mediaPath string, track int) ([]*astisub.Item, error) {
	ret := _mock.Called(mediaPath, track)

	if len(ret) == 0 {
		panic("no return value specified for ExtractTrack")
	}

	var r0 []*astisub.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) ([]*astisub.Item, error)); ok {
		return returnFunc(mediaPath, track)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) []*astisub.Item); ok {
		r0 = returnFunc(mediaPath, track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*astisub.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(mediaPath, track)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleExtractor_ExtractTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractTrack'
type MockSubtitleExtractor_ExtractTrack_Call struct {
	*mock.Call
}

// ExtractTrack is a helper method to define mock.On call
//   - mediaPath string
//   - track int
func (_e *MockSubtitleExtractor_Expecter) ExtractTrack(mediaPath interface{}, track interface{}) *MockSubtitleExtractor_ExtractTrack_Call {
	return &MockSubtitleExtractor_ExtractTrack_Call{Call: _e.mock.On("ExtractTrack", mediaPath, track)}
}

func (_c *MockSubtitleExtractor_ExtractTrack_Call) Run(run func(mediaPath string, track int)) *MockSubtitleExtractor_ExtractTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleExtractor_ExtractTrack_Call) Return(items []*astisub.Item, err error) *MockSubtitleExtractor_ExtractTrack_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockSubtitleExtractor_ExtractTrack_Call) RunAndReturn(run func(mediaPath string, track int) ([]*astisub.Item, error)) *MockSubtitleExtractor_ExtractTrack_Call {
	_c.Call.Return(run)
	return _c
}
