// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	astisub "github.com/asticode/go-astisub"
	mock "github.com/stretchr/testify/mock"
)

// SubtitleExtractor is an autogenerated mock type for the SubtitleExtractor type
type SubtitleExtractor struct {
	mock.Mock
}

type SubtitleExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *SubtitleExtractor) EXPECT() *SubtitleExtractor_Expecter {
	return &SubtitleExtractor_Expecter{mock: &_m.Mock}
}

// ExtractTrack provides a mock function with given fields: mediaPath, track
func (_m *SubtitleExtractor) ExtractTrack(mediaPath string, track int) ([]*astisub.Item, error) {
	ret := _m.Called(mediaPath, track)

	if len(ret) == 0 {
		panic("no return value specified for ExtractTrack")
	}

	var r0 []*astisub.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]*astisub.Item, error)); ok {
		return rf(mediaPath, track)
	}
	if rf, ok := ret.Get(0).(func(string, int) []*astisub.Item); ok {
		r0 = rf(mediaPath, track)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*astisub.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(mediaPath, track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubtitleExtractor_ExtractTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractTrack'
type SubtitleExtractor_ExtractTrack_Call struct {
	*mock.Call
}

// ExtractTrack is a helper method to define mock.On call
//   - mediaPath string
//   - track int
func (_e *SubtitleExtractor_Expecter) ExtractTrack(mediaPath interface{}, track interface{}) *SubtitleExtractor_ExtractTrack_Call {
	return &SubtitleExtractor_ExtractTrack_Call{Call: _e.mock.On("ExtractTrack", mediaPath, track)}
}

func (_c *SubtitleExtractor_ExtractTrack_Call) Run(run func(mediaPath string, track int)) *SubtitleExtractor_ExtractTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *SubtitleExtractor_ExtractTrack_Call) Return(_a0 []*astisub.Item, _a1 error) *SubtitleExtractor_ExtractTrack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubtitleExtractor_ExtractTrack_Call) RunAndReturn(run func(string, int) ([]*astisub.Item, error)) *SubtitleExtractor_ExtractTrack_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubtitleExtractor creates a new instance of SubtitleExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubtitleExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubtitleExtractor {
	mock := &SubtitleExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
