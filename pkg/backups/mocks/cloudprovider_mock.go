// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCloudProvider creates a new instance of MockCloudProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudProvider {
	mock := &MockCloudProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCloudProvider is an autogenerated mock type for the CloudProvider type
type MockCloudProvider struct {
	mock.Mock
}

type MockCloudProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudProvider) EXPECT() *MockCloudProvider_Expecter {
	return &MockCloudProvider_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCloudProvider
func (_mock *MockCloudProvider) Delete(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCloudProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCloudProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockCloudProvider_Expecter) Delete(ctx interface{}, path interface{}) *MockCloudProvider_Delete_Call {
	return &MockCloudProvider_Delete_Call{Call: _e.mock.On("Delete", ctx, path)}
}

func (_c *MockCloudProvider_Delete_Call) Run(run func(ctx context.Context, path string)) *MockCloudProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudProvider_Delete_Call) Return(err error) *MockCloudProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCloudProvider_Delete_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockCloudProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function for the type MockCloudProvider
func (_mock *MockCloudProvider) Download(ctx context.Context, path string) ([]byte, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudProvider_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockCloudProvider_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockCloudProvider_Expecter) Download(ctx interface{}, path interface{}) *MockCloudProvider_Download_Call {
	return &MockCloudProvider_Download_Call{Call: _e.mock.On("Download", ctx, path)}
}

func (_c *MockCloudProvider_Download_Call) Run(run func(ctx context.Context, path string)) *MockCloudProvider_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudProvider_Download_Call) Return(bytes []byte, err error) *MockCloudProvider_Download_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCloudProvider_Download_Call) RunAndReturn(run func(ctx context.Context, path string) ([]byte, error)) *MockCloudProvider_Download_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockCloudProvider
func (_mock *MockCloudProvider) List(ctx context.Context, prefix string) ([]string, error) {
	ret := _mock.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCloudProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockCloudProvider_Expecter) List(ctx interface{}, prefix interface{}) *MockCloudProvider_List_Call {
	return &MockCloudProvider_List_Call{Call: _e.mock.On("List", ctx, prefix)}
}

func (_c *MockCloudProvider_List_Call) Run(run func(ctx context.Context, prefix string)) *MockCloudProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCloudProvider_List_Call) Return(strings []string, err error) *MockCloudProvider_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockCloudProvider_List_Call) RunAndReturn(run func(ctx context.Context, prefix string) ([]string, error)) *MockCloudProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockCloudProvider
func (_mock *MockCloudProvider) Upload(ctx context.Context, data []byte, path string) (string, error) {
	ret := _mock.Called(ctx, data, path)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (string, error)); ok {
		return returnFunc(ctx, data, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) string); ok {
		r0 = returnFunc(ctx, data, path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, data, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCloudProvider_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockCloudProvider_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
//   - path string
func (_e *MockCloudProvider_Expecter) Upload(ctx interface{}, data interface{}, path interface{}) *MockCloudProvider_Upload_Call {
	return &MockCloudProvider_Upload_Call{Call: _e.mock.On("Upload", ctx, data, path)}
}

func (_c *MockCloudProvider_Upload_Call) Run(run func(ctx context.Context, data []byte, path string)) *MockCloudProvider_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCloudProvider_Upload_Call) Return(s string, err error) *MockCloudProvider_Upload_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCloudProvider_Upload_Call) RunAndReturn(run func(ctx context.Context, data []byte, path string) (string, error)) *MockCloudProvider_Upload_Call {
	_c.Call.Return(run)
	return _c
}
