// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStorage
func (_mock *MockStorage) Delete(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockStorage_Expecter) Delete(ctx interface{}, path interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, path)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, path string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(err error) *MockStorage_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockStorage
func (_mock *MockStorage) List(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) List(ctx interface{}) *MockStorage_List_Call {
	return &MockStorage_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockStorage_List_Call) Run(run func(ctx context.Context)) *MockStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_List_Call) Return(strings []string, err error) *MockStorage_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockStorage_List_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function for the type MockStorage
func (_mock *MockStorage) Retrieve(ctx context.Context, path string) ([]byte, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockStorage_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockStorage_Expecter) Retrieve(ctx interface{}, path interface{}) *MockStorage_Retrieve_Call {
	return &MockStorage_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, path)}
}

func (_c *MockStorage_Retrieve_Call) Run(run func(ctx context.Context, path string)) *MockStorage_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Retrieve_Call) Return(bytes []byte, err error) *MockStorage_Retrieve_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockStorage_Retrieve_Call) RunAndReturn(run func(ctx context.Context, path string) ([]byte, error)) *MockStorage_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MockStorage
func (_mock *MockStorage) Store(ctx context.Context, data []byte, filename string) (string, error) {
	ret := _mock.Called(ctx, data, filename)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (string, error)); ok {
		return returnFunc(ctx, data, filename)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) string); ok {
		r0 = returnFunc(ctx, data, filename)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, data, filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockStorage_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
//   - filename string
func (_e *MockStorage_Expecter) Store(ctx interface{}, data interface{}, filename interface{}) *MockStorage_Store_Call {
	return &MockStorage_Store_Call{Call: _e.mock.On("Store", ctx, data, filename)}
}

func (_c *MockStorage_Store_Call) Run(run func(ctx context.Context, data []byte, filename string)) *MockStorage_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_Store_Call) Return(s string, err error) *MockStorage_Store_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_Store_Call) RunAndReturn(run func(ctx context.Context, data []byte, filename string) (string, error)) *MockStorage_Store_Call {
	_c.Call.Return(run)
	return _c
}
