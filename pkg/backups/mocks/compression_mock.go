// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCompression creates a new instance of MockCompression. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompression(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompression {
	mock := &MockCompression{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCompression is an autogenerated mock type for the Compression type
type MockCompression struct {
	mock.Mock
}

type MockCompression_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompression) EXPECT() *MockCompression_Expecter {
	return &MockCompression_Expecter{mock: &_m.Mock}
}

// Compress provides a mock function for the type MockCompression
func (_mock *MockCompression) Compress(data []byte) ([]byte, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Compress")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCompression_Compress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compress'
type MockCompression_Compress_Call struct {
	*mock.Call
}

// Compress is a helper method to define mock.On call
//   - data []byte
func (_e *MockCompression_Expecter) Compress(data interface{}) *MockCompression_Compress_Call {
	return &MockCompression_Compress_Call{Call: _e.mock.On("Compress", data)}
}

func (_c *MockCompression_Compress_Call) Run(run func(data []byte)) *MockCompression_Compress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCompression_Compress_Call) Return(bytes []byte, err error) *MockCompression_Compress_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCompression_Compress_Call) RunAndReturn(run func(data []byte) ([]byte, error)) *MockCompression_Compress_Call {
	_c.Call.Return(run)
	return _c
}

// Decompress provides a mock function for the type MockCompression
func (_mock *MockCompression) Decompress(data []byte) ([]byte, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Decompress")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCompression_Decompress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decompress'
type MockCompression_Decompress_Call struct {
	*mock.Call
}

// Decompress is a helper method to define mock.On call
//   - data []byte
func (_e *MockCompression_Expecter) Decompress(data interface{}) *MockCompression_Decompress_Call {
	return &MockCompression_Decompress_Call{Call: _e.mock.On("Decompress", data)}
}

func (_c *MockCompression_Decompress_Call) Run(run func(data []byte)) *MockCompression_Decompress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCompression_Decompress_Call) Return(bytes []byte, err error) *MockCompression_Decompress_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockCompression_Decompress_Call) RunAndReturn(run func(data []byte) ([]byte, error)) *MockCompression_Decompress_Call {
	_c.Call.Return(run)
	return _c
}
