// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/subtitle-manager/pkg/cache"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStatsProvider creates a new instance of MockStatsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatsProvider {
	mock := &MockStatsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStatsProvider is an autogenerated mock type for the StatsProvider type
type MockStatsProvider struct {
	mock.Mock
}

type MockStatsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatsProvider) EXPECT() *MockStatsProvider_Expecter {
	return &MockStatsProvider_Expecter{mock: &_m.Mock}
}

// Stats provides a mock function for the type MockStatsProvider
func (_mock *MockStatsProvider) Stats(ctx context.Context) (*cache.Stats, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 *cache.Stats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*cache.Stats, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *cache.Stats); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Stats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStatsProvider_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockStatsProvider_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStatsProvider_Expecter) Stats(ctx interface{}) *MockStatsProvider_Stats_Call {
	return &MockStatsProvider_Stats_Call{Call: _e.mock.On("Stats", ctx)}
}

func (_c *MockStatsProvider_Stats_Call) Run(run func(ctx context.Context)) *MockStatsProvider_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStatsProvider_Stats_Call) Return(stats *cache.Stats, err error) *MockStatsProvider_Stats_Call {
	_c.Call.Return(stats, err)
	return _c
}

func (_c *MockStatsProvider_Stats_Call) RunAndReturn(run func(ctx context.Context) (*cache.Stats, error)) *MockStatsProvider_Stats_Call {
	_c.Call.Return(run)
	return _c
}
