// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: engine/v1/engine_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EngineService_TranscribeAudio_FullMethodName        = "/subtitle_manager.engine.v1.EngineService/TranscribeAudio"
	EngineService_GetTranscriptionStatus_FullMethodName = "/subtitle_manager.engine.v1.EngineService/GetTranscriptionStatus"
	EngineService_CancelTranscription_FullMethodName    = "/subtitle_manager.engine.v1.EngineService/CancelTranscription"
	EngineService_TranslateSubtitle_FullMethodName      = "/subtitle_manager.engine.v1.EngineService/TranslateSubtitle"
	EngineService_GetTranslationProgress_FullMethodName = "/subtitle_manager.engine.v1.EngineService/GetTranslationProgress"
	EngineService_CancelTranslation_FullMethodName      = "/subtitle_manager.engine.v1.EngineService/CancelTranslation"
	EngineService_ConvertSubtitle_FullMethodName        = "/subtitle_manager.engine.v1.EngineService/ConvertSubtitle"
	EngineService_ValidateSubtitle_FullMethodName       = "/subtitle_manager.engine.v1.EngineService/ValidateSubtitle"
	EngineService_MergeSubtitles_FullMethodName         = "/subtitle_manager.engine.v1.EngineService/MergeSubtitles"
	EngineService_GetEngineStatus_FullMethodName        = "/subtitle_manager.engine.v1.EngineService/GetEngineStatus"
	EngineService_HealthCheck_FullMethodName            = "/subtitle_manager.engine.v1.EngineService/HealthCheck"
)

// EngineServiceClient is the client API for EngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Engine service handles subtitle processing, transcription, and translation
type EngineServiceClient interface {
	// Transcription operations
	TranscribeAudio(ctx context.Context, in *TranscribeAudioRequest, opts ...grpc.CallOption) (*TranscribeAudioResponse, error)
	GetTranscriptionStatus(ctx context.Context, in *GetTranscriptionStatusRequest, opts ...grpc.CallOption) (*GetTranscriptionStatusResponse, error)
	CancelTranscription(ctx context.Context, in *CancelTranscriptionRequest, opts ...grpc.CallOption) (*CancelTranscriptionResponse, error)
	// Translation operations
	TranslateSubtitle(ctx context.Context, in *TranslateSubtitleRequest, opts ...grpc.CallOption) (*TranslateSubtitleResponse, error)
	GetTranslationProgress(ctx context.Context, in *GetTranslationProgressRequest, opts ...grpc.CallOption) (*GetTranslationProgressResponse, error)
	CancelTranslation(ctx context.Context, in *CancelTranslationRequest, opts ...grpc.CallOption) (*CancelTranslationResponse, error)
	// Subtitle processing
	ConvertSubtitle(ctx context.Context, in *ConvertSubtitleRequest, opts ...grpc.CallOption) (*ConvertSubtitleResponse, error)
	ValidateSubtitle(ctx context.Context, in *ValidateSubtitleRequest, opts ...grpc.CallOption) (*ValidateSubtitleResponse, error)
	MergeSubtitles(ctx context.Context, in *MergeSubtitlesRequest, opts ...grpc.CallOption) (*MergeSubtitlesResponse, error)
	// Engine management
	GetEngineStatus(ctx context.Context, in *GetEngineStatusRequest, opts ...grpc.CallOption) (*GetEngineStatusResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type engineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineServiceClient(cc grpc.ClientConnInterface) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) TranscribeAudio(ctx context.Context, in *TranscribeAudioRequest, opts ...grpc.CallOption) (*TranscribeAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeAudioResponse)
	err := c.cc.Invoke(ctx, EngineService_TranscribeAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetTranscriptionStatus(ctx context.Context, in *GetTranscriptionStatusRequest, opts ...grpc.CallOption) (*GetTranscriptionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranscriptionStatusResponse)
	err := c.cc.Invoke(ctx, EngineService_GetTranscriptionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) CancelTranscription(ctx context.Context, in *CancelTranscriptionRequest, opts ...grpc.CallOption) (*CancelTranscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTranscriptionResponse)
	err := c.cc.Invoke(ctx, EngineService_CancelTranscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) TranslateSubtitle(ctx context.Context, in *TranslateSubtitleRequest, opts ...grpc.CallOption) (*TranslateSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateSubtitleResponse)
	err := c.cc.Invoke(ctx, EngineService_TranslateSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetTranslationProgress(ctx context.Context, in *GetTranslationProgressRequest, opts ...grpc.CallOption) (*GetTranslationProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranslationProgressResponse)
	err := c.cc.Invoke(ctx, EngineService_GetTranslationProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) CancelTranslation(ctx context.Context, in *CancelTranslationRequest, opts ...grpc.CallOption) (*CancelTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTranslationResponse)
	err := c.cc.Invoke(ctx, EngineService_CancelTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) ConvertSubtitle(ctx context.Context, in *ConvertSubtitleRequest, opts ...grpc.CallOption) (*ConvertSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertSubtitleResponse)
	err := c.cc.Invoke(ctx, EngineService_ConvertSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) ValidateSubtitle(ctx context.Context, in *ValidateSubtitleRequest, opts ...grpc.CallOption) (*ValidateSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSubtitleResponse)
	err := c.cc.Invoke(ctx, EngineService_ValidateSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) MergeSubtitles(ctx context.Context, in *MergeSubtitlesRequest, opts ...grpc.CallOption) (*MergeSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeSubtitlesResponse)
	err := c.cc.Invoke(ctx, EngineService_MergeSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) GetEngineStatus(ctx context.Context, in *GetEngineStatusRequest, opts ...grpc.CallOption) (*GetEngineStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngineStatusResponse)
	err := c.cc.Invoke(ctx, EngineService_GetEngineStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, EngineService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServiceServer is the server API for EngineService service.
// All implementations should embed UnimplementedEngineServiceServer
// for forward compatibility.
//
// Engine service handles subtitle processing, transcription, and translation
type EngineServiceServer interface {
	// Transcription operations
	TranscribeAudio(context.Context, *TranscribeAudioRequest) (*TranscribeAudioResponse, error)
	GetTranscriptionStatus(context.Context, *GetTranscriptionStatusRequest) (*GetTranscriptionStatusResponse, error)
	CancelTranscription(context.Context, *CancelTranscriptionRequest) (*CancelTranscriptionResponse, error)
	// Translation operations
	TranslateSubtitle(context.Context, *TranslateSubtitleRequest) (*TranslateSubtitleResponse, error)
	GetTranslationProgress(context.Context, *GetTranslationProgressRequest) (*GetTranslationProgressResponse, error)
	CancelTranslation(context.Context, *CancelTranslationRequest) (*CancelTranslationResponse, error)
	// Subtitle processing
	ConvertSubtitle(context.Context, *ConvertSubtitleRequest) (*ConvertSubtitleResponse, error)
	ValidateSubtitle(context.Context, *ValidateSubtitleRequest) (*ValidateSubtitleResponse, error)
	MergeSubtitles(context.Context, *MergeSubtitlesRequest) (*MergeSubtitlesResponse, error)
	// Engine management
	GetEngineStatus(context.Context, *GetEngineStatusRequest) (*GetEngineStatusResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedEngineServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineServiceServer struct{}

func (UnimplementedEngineServiceServer) TranscribeAudio(context.Context, *TranscribeAudioRequest) (*TranscribeAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeAudio not implemented")
}
func (UnimplementedEngineServiceServer) GetTranscriptionStatus(context.Context, *GetTranscriptionStatusRequest) (*GetTranscriptionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptionStatus not implemented")
}
func (UnimplementedEngineServiceServer) CancelTranscription(context.Context, *CancelTranscriptionRequest) (*CancelTranscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTranscription not implemented")
}
func (UnimplementedEngineServiceServer) TranslateSubtitle(context.Context, *TranslateSubtitleRequest) (*TranslateSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateSubtitle not implemented")
}
func (UnimplementedEngineServiceServer) GetTranslationProgress(context.Context, *GetTranslationProgressRequest) (*GetTranslationProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslationProgress not implemented")
}
func (UnimplementedEngineServiceServer) CancelTranslation(context.Context, *CancelTranslationRequest) (*CancelTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTranslation not implemented")
}
func (UnimplementedEngineServiceServer) ConvertSubtitle(context.Context, *ConvertSubtitleRequest) (*ConvertSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertSubtitle not implemented")
}
func (UnimplementedEngineServiceServer) ValidateSubtitle(context.Context, *ValidateSubtitleRequest) (*ValidateSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSubtitle not implemented")
}
func (UnimplementedEngineServiceServer) MergeSubtitles(context.Context, *MergeSubtitlesRequest) (*MergeSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSubtitles not implemented")
}
func (UnimplementedEngineServiceServer) GetEngineStatus(context.Context, *GetEngineStatusRequest) (*GetEngineStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineStatus not implemented")
}
func (UnimplementedEngineServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedEngineServiceServer) testEmbeddedByValue() {}

// UnsafeEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServiceServer will
// result in compilation errors.
type UnsafeEngineServiceServer interface {
	mustEmbedUnimplementedEngineServiceServer()
}

func RegisterEngineServiceServer(s grpc.ServiceRegistrar, srv EngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EngineService_ServiceDesc, srv)
}

func _EngineService_TranscribeAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).TranscribeAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_TranscribeAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).TranscribeAudio(ctx, req.(*TranscribeAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetTranscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetTranscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_GetTranscriptionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetTranscriptionStatus(ctx, req.(*GetTranscriptionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_CancelTranscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTranscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).CancelTranscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_CancelTranscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).CancelTranscription(ctx, req.(*CancelTranscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_TranslateSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).TranslateSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_TranslateSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).TranslateSubtitle(ctx, req.(*TranslateSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetTranslationProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranslationProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetTranslationProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_GetTranslationProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetTranslationProgress(ctx, req.(*GetTranslationProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_CancelTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).CancelTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_CancelTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).CancelTranslation(ctx, req.(*CancelTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_ConvertSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).ConvertSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_ConvertSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).ConvertSubtitle(ctx, req.(*ConvertSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_ValidateSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).ValidateSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_ValidateSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).ValidateSubtitle(ctx, req.(*ValidateSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_MergeSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).MergeSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_MergeSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).MergeSubtitles(ctx, req.(*MergeSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_GetEngineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).GetEngineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_GetEngineStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).GetEngineStatus(ctx, req.(*GetEngineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineService_ServiceDesc is the grpc.ServiceDesc for EngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subtitle_manager.engine.v1.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranscribeAudio",
			Handler:    _EngineService_TranscribeAudio_Handler,
		},
		{
			MethodName: "GetTranscriptionStatus",
			Handler:    _EngineService_GetTranscriptionStatus_Handler,
		},
		{
			MethodName: "CancelTranscription",
			Handler:    _EngineService_CancelTranscription_Handler,
		},
		{
			MethodName: "TranslateSubtitle",
			Handler:    _EngineService_TranslateSubtitle_Handler,
		},
		{
			MethodName: "GetTranslationProgress",
			Handler:    _EngineService_GetTranslationProgress_Handler,
		},
		{
			MethodName: "CancelTranslation",
			Handler:    _EngineService_CancelTranslation_Handler,
		},
		{
			MethodName: "ConvertSubtitle",
			Handler:    _EngineService_ConvertSubtitle_Handler,
		},
		{
			MethodName: "ValidateSubtitle",
			Handler:    _EngineService_ValidateSubtitle_Handler,
		},
		{
			MethodName: "MergeSubtitles",
			Handler:    _EngineService_MergeSubtitles_Handler,
		},
		{
			MethodName: "GetEngineStatus",
			Handler:    _EngineService_GetEngineStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _EngineService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine/v1/engine_service.proto",
}
