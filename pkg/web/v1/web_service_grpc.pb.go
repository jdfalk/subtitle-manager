// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: web/v1/web_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebService_AuthenticateUser_FullMethodName      = "/subtitle_manager.web.v1.WebService/AuthenticateUser"
	WebService_LogoutUser_FullMethodName            = "/subtitle_manager.web.v1.WebService/LogoutUser"
	WebService_GetUser_FullMethodName               = "/subtitle_manager.web.v1.WebService/GetUser"
	WebService_UpdateUser_FullMethodName            = "/subtitle_manager.web.v1.WebService/UpdateUser"
	WebService_UpdateUserPreferences_FullMethodName = "/subtitle_manager.web.v1.WebService/UpdateUserPreferences"
	WebService_UploadSubtitle_FullMethodName        = "/subtitle_manager.web.v1.WebService/UploadSubtitle"
	WebService_DownloadSubtitle_FullMethodName      = "/subtitle_manager.web.v1.WebService/DownloadSubtitle"
	WebService_SearchSubtitles_FullMethodName       = "/subtitle_manager.web.v1.WebService/SearchSubtitles"
	WebService_TranslateSubtitle_FullMethodName     = "/subtitle_manager.web.v1.WebService/TranslateSubtitle"
	WebService_GetTranslationStatus_FullMethodName  = "/subtitle_manager.web.v1.WebService/GetTranslationStatus"
	WebService_CancelTranslation_FullMethodName     = "/subtitle_manager.web.v1.WebService/CancelTranslation"
	WebService_UploadFile_FullMethodName            = "/subtitle_manager.web.v1.WebService/UploadFile"
	WebService_DownloadFile_FullMethodName          = "/subtitle_manager.web.v1.WebService/DownloadFile"
	WebService_HealthCheck_FullMethodName           = "/subtitle_manager.web.v1.WebService/HealthCheck"
)

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebServiceClient interface {
	// Authentication operations
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error)
	// User management
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error)
	// File operations
	UploadSubtitle(ctx context.Context, in *UploadSubtitleRequest, opts ...grpc.CallOption) (*UploadSubtitleResponse, error)
	DownloadSubtitle(ctx context.Context, in *DownloadSubtitleRequest, opts ...grpc.CallOption) (*DownloadSubtitleResponse, error)
	SearchSubtitles(ctx context.Context, in *SearchSubtitlesRequest, opts ...grpc.CallOption) (*SearchSubtitlesResponse, error)
	// Translation operations
	TranslateSubtitle(ctx context.Context, in *TranslateSubtitleRequest, opts ...grpc.CallOption) (*TranslateSubtitleResponse, error)
	GetTranslationStatus(ctx context.Context, in *GetTranslationStatusRequest, opts ...grpc.CallOption) (*GetTranslationStatusResponse, error)
	CancelTranslation(ctx context.Context, in *CancelTranslationRequest, opts ...grpc.CallOption) (*CancelTranslationResponse, error)
	// Streaming operations
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, WebService_AuthenticateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutUserResponse)
	err := c.cc.Invoke(ctx, WebService_LogoutUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, WebService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, WebService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateUserPreferences(ctx context.Context, in *UpdateUserPreferencesRequest, opts ...grpc.CallOption) (*UpdateUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPreferencesResponse)
	err := c.cc.Invoke(ctx, WebService_UpdateUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UploadSubtitle(ctx context.Context, in *UploadSubtitleRequest, opts ...grpc.CallOption) (*UploadSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadSubtitleResponse)
	err := c.cc.Invoke(ctx, WebService_UploadSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DownloadSubtitle(ctx context.Context, in *DownloadSubtitleRequest, opts ...grpc.CallOption) (*DownloadSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadSubtitleResponse)
	err := c.cc.Invoke(ctx, WebService_DownloadSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) SearchSubtitles(ctx context.Context, in *SearchSubtitlesRequest, opts ...grpc.CallOption) (*SearchSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSubtitlesResponse)
	err := c.cc.Invoke(ctx, WebService_SearchSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) TranslateSubtitle(ctx context.Context, in *TranslateSubtitleRequest, opts ...grpc.CallOption) (*TranslateSubtitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateSubtitleResponse)
	err := c.cc.Invoke(ctx, WebService_TranslateSubtitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetTranslationStatus(ctx context.Context, in *GetTranslationStatusRequest, opts ...grpc.CallOption) (*GetTranslationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranslationStatusResponse)
	err := c.cc.Invoke(ctx, WebService_GetTranslationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) CancelTranslation(ctx context.Context, in *CancelTranslationRequest, opts ...grpc.CallOption) (*CancelTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTranslationResponse)
	err := c.cc.Invoke(ctx, WebService_CancelTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebService_ServiceDesc.Streams[0], WebService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *webServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebService_ServiceDesc.Streams[1], WebService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *webServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WebService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
// All implementations should embed UnimplementedWebServiceServer
// for forward compatibility.
type WebServiceServer interface {
	// Authentication operations
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error)
	LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error)
	// User management
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error)
	// File operations
	UploadSubtitle(context.Context, *UploadSubtitleRequest) (*UploadSubtitleResponse, error)
	DownloadSubtitle(context.Context, *DownloadSubtitleRequest) (*DownloadSubtitleResponse, error)
	SearchSubtitles(context.Context, *SearchSubtitlesRequest) (*SearchSubtitlesResponse, error)
	// Translation operations
	TranslateSubtitle(context.Context, *TranslateSubtitleRequest) (*TranslateSubtitleResponse, error)
	GetTranslationStatus(context.Context, *GetTranslationStatusRequest) (*GetTranslationStatusResponse, error)
	CancelTranslation(context.Context, *CancelTranslationRequest) (*CancelTranslationResponse, error)
	// Streaming operations
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedWebServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebServiceServer struct{}

func (UnimplementedWebServiceServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedWebServiceServer) LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedWebServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWebServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedWebServiceServer) UpdateUserPreferences(context.Context, *UpdateUserPreferencesRequest) (*UpdateUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPreferences not implemented")
}
func (UnimplementedWebServiceServer) UploadSubtitle(context.Context, *UploadSubtitleRequest) (*UploadSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSubtitle not implemented")
}
func (UnimplementedWebServiceServer) DownloadSubtitle(context.Context, *DownloadSubtitleRequest) (*DownloadSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSubtitle not implemented")
}
func (UnimplementedWebServiceServer) SearchSubtitles(context.Context, *SearchSubtitlesRequest) (*SearchSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubtitles not implemented")
}
func (UnimplementedWebServiceServer) TranslateSubtitle(context.Context, *TranslateSubtitleRequest) (*TranslateSubtitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateSubtitle not implemented")
}
func (UnimplementedWebServiceServer) GetTranslationStatus(context.Context, *GetTranslationStatusRequest) (*GetTranslationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslationStatus not implemented")
}
func (UnimplementedWebServiceServer) CancelTranslation(context.Context, *CancelTranslationRequest) (*CancelTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTranslation not implemented")
}
func (UnimplementedWebServiceServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedWebServiceServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedWebServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWebServiceServer) testEmbeddedByValue() {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_AuthenticateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).LogoutUser(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_UpdateUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateUserPreferences(ctx, req.(*UpdateUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UploadSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UploadSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_UploadSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UploadSubtitle(ctx, req.(*UploadSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DownloadSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DownloadSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_DownloadSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DownloadSubtitle(ctx, req.(*DownloadSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_SearchSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).SearchSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_SearchSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).SearchSubtitles(ctx, req.(*SearchSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_TranslateSubtitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateSubtitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).TranslateSubtitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_TranslateSubtitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).TranslateSubtitle(ctx, req.(*TranslateSubtitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetTranslationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranslationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetTranslationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetTranslationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetTranslationStatus(ctx, req.(*GetTranslationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_CancelTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).CancelTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_CancelTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).CancelTranslation(ctx, req.(*CancelTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebServiceServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _WebService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebServiceServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _WebService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subtitle_manager.web.v1.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _WebService_AuthenticateUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _WebService_LogoutUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WebService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _WebService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserPreferences",
			Handler:    _WebService_UpdateUserPreferences_Handler,
		},
		{
			MethodName: "UploadSubtitle",
			Handler:    _WebService_UploadSubtitle_Handler,
		},
		{
			MethodName: "DownloadSubtitle",
			Handler:    _WebService_DownloadSubtitle_Handler,
		},
		{
			MethodName: "SearchSubtitles",
			Handler:    _WebService_SearchSubtitles_Handler,
		},
		{
			MethodName: "TranslateSubtitle",
			Handler:    _WebService_TranslateSubtitle_Handler,
		},
		{
			MethodName: "GetTranslationStatus",
			Handler:    _WebService_GetTranslationStatus_Handler,
		},
		{
			MethodName: "CancelTranslation",
			Handler:    _WebService_CancelTranslation_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WebService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _WebService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _WebService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "web/v1/web_service.proto",
}
