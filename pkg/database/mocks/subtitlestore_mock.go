// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/jdfalk/gcommon/sdks/go/v1/common"
	"github.com/jdfalk/subtitle-manager/pkg/database"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubtitleStore creates a new instance of MockSubtitleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubtitleStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubtitleStore {
	mock := &MockSubtitleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubtitleStore is an autogenerated mock type for the SubtitleStore type
type MockSubtitleStore struct {
	mock.Mock
}

type MockSubtitleStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubtitleStore) EXPECT() *MockSubtitleStore_Expecter {
	return &MockSubtitleStore_Expecter{mock: &_m.Mock}
}

// AssignProfileToMedia provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) AssignProfileToMedia(mediaID string, profileID string) error {
	ret := _mock.Called(mediaID, profileID)

	if len(ret) == 0 {
		panic("no return value specified for AssignProfileToMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(mediaID, profileID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_AssignProfileToMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignProfileToMedia'
type MockSubtitleStore_AssignProfileToMedia_Call struct {
	*mock.Call
}

// AssignProfileToMedia is a helper method to define mock.On call
//   - mediaID string
//   - profileID string
func (_e *MockSubtitleStore_Expecter) AssignProfileToMedia(mediaID interface{}, profileID interface{}) *MockSubtitleStore_AssignProfileToMedia_Call {
	return &MockSubtitleStore_AssignProfileToMedia_Call{Call: _e.mock.On("AssignProfileToMedia", mediaID, profileID)}
}

func (_c *MockSubtitleStore_AssignProfileToMedia_Call) Run(run func(mediaID string, profileID string)) *MockSubtitleStore_AssignProfileToMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_AssignProfileToMedia_Call) Return(err error) *MockSubtitleStore_AssignProfileToMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_AssignProfileToMedia_Call) RunAndReturn(run func(mediaID string, profileID string) error) *MockSubtitleStore_AssignProfileToMedia_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTagToMedia provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) AssignTagToMedia(mediaID int64, tagID int64) error {
	ret := _mock.Called(mediaID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for AssignTagToMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = returnFunc(mediaID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_AssignTagToMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTagToMedia'
type MockSubtitleStore_AssignTagToMedia_Call struct {
	*mock.Call
}

// AssignTagToMedia is a helper method to define mock.On call
//   - mediaID int64
//   - tagID int64
func (_e *MockSubtitleStore_Expecter) AssignTagToMedia(mediaID interface{}, tagID interface{}) *MockSubtitleStore_AssignTagToMedia_Call {
	return &MockSubtitleStore_AssignTagToMedia_Call{Call: _e.mock.On("AssignTagToMedia", mediaID, tagID)}
}

func (_c *MockSubtitleStore_AssignTagToMedia_Call) Run(run func(mediaID int64, tagID int64)) *MockSubtitleStore_AssignTagToMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_AssignTagToMedia_Call) Return(err error) *MockSubtitleStore_AssignTagToMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_AssignTagToMedia_Call) RunAndReturn(run func(mediaID int64, tagID int64) error) *MockSubtitleStore_AssignTagToMedia_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTagToUser provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) AssignTagToUser(userID int64, tagID int64) error {
	ret := _mock.Called(userID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for AssignTagToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = returnFunc(userID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_AssignTagToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTagToUser'
type MockSubtitleStore_AssignTagToUser_Call struct {
	*mock.Call
}

// AssignTagToUser is a helper method to define mock.On call
//   - userID int64
//   - tagID int64
func (_e *MockSubtitleStore_Expecter) AssignTagToUser(userID interface{}, tagID interface{}) *MockSubtitleStore_AssignTagToUser_Call {
	return &MockSubtitleStore_AssignTagToUser_Call{Call: _e.mock.On("AssignTagToUser", userID, tagID)}
}

func (_c *MockSubtitleStore_AssignTagToUser_Call) Run(run func(userID int64, tagID int64)) *MockSubtitleStore_AssignTagToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_AssignTagToUser_Call) Return(err error) *MockSubtitleStore_AssignTagToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_AssignTagToUser_Call) RunAndReturn(run func(userID int64, tagID int64) error) *MockSubtitleStore_AssignTagToUser_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupExpiredSessions provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CleanupExpiredSessions() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_CleanupExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupExpiredSessions'
type MockSubtitleStore_CleanupExpiredSessions_Call struct {
	*mock.Call
}

// CleanupExpiredSessions is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) CleanupExpiredSessions() *MockSubtitleStore_CleanupExpiredSessions_Call {
	return &MockSubtitleStore_CleanupExpiredSessions_Call{Call: _e.mock.On("CleanupExpiredSessions")}
}

func (_c *MockSubtitleStore_CleanupExpiredSessions_Call) Run(run func()) *MockSubtitleStore_CleanupExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_CleanupExpiredSessions_Call) Return(err error) *MockSubtitleStore_CleanupExpiredSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_CleanupExpiredSessions_Call) RunAndReturn(run func() error) *MockSubtitleStore_CleanupExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubtitleStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) Close() *MockSubtitleStore_Close_Call {
	return &MockSubtitleStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubtitleStore_Close_Call) Run(run func()) *MockSubtitleStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_Close_Call) Return(err error) *MockSubtitleStore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_Close_Call) RunAndReturn(run func() error) *MockSubtitleStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CountDownloads provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CountDownloads() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountDownloads")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_CountDownloads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDownloads'
type MockSubtitleStore_CountDownloads_Call struct {
	*mock.Call
}

// CountDownloads is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) CountDownloads() *MockSubtitleStore_CountDownloads_Call {
	return &MockSubtitleStore_CountDownloads_Call{Call: _e.mock.On("CountDownloads")}
}

func (_c *MockSubtitleStore_CountDownloads_Call) Run(run func()) *MockSubtitleStore_CountDownloads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_CountDownloads_Call) Return(n int, err error) *MockSubtitleStore_CountDownloads_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubtitleStore_CountDownloads_Call) RunAndReturn(run func() (int, error)) *MockSubtitleStore_CountDownloads_Call {
	_c.Call.Return(run)
	return _c
}

// CountMediaItems provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CountMediaItems() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountMediaItems")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_CountMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMediaItems'
type MockSubtitleStore_CountMediaItems_Call struct {
	*mock.Call
}

// CountMediaItems is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) CountMediaItems() *MockSubtitleStore_CountMediaItems_Call {
	return &MockSubtitleStore_CountMediaItems_Call{Call: _e.mock.On("CountMediaItems")}
}

func (_c *MockSubtitleStore_CountMediaItems_Call) Run(run func()) *MockSubtitleStore_CountMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_CountMediaItems_Call) Return(n int, err error) *MockSubtitleStore_CountMediaItems_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubtitleStore_CountMediaItems_Call) RunAndReturn(run func() (int, error)) *MockSubtitleStore_CountMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// CountSubtitles provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CountSubtitles() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountSubtitles")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_CountSubtitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSubtitles'
type MockSubtitleStore_CountSubtitles_Call struct {
	*mock.Call
}

// CountSubtitles is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) CountSubtitles() *MockSubtitleStore_CountSubtitles_Call {
	return &MockSubtitleStore_CountSubtitles_Call{Call: _e.mock.On("CountSubtitles")}
}

func (_c *MockSubtitleStore_CountSubtitles_Call) Run(run func()) *MockSubtitleStore_CountSubtitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_CountSubtitles_Call) Return(n int, err error) *MockSubtitleStore_CountSubtitles_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubtitleStore_CountSubtitles_Call) RunAndReturn(run func() (int, error)) *MockSubtitleStore_CountSubtitles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CreateAPIKey(userID string, key string) error {
	ret := _mock.Called(userID, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(userID, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type MockSubtitleStore_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - userID string
//   - key string
func (_e *MockSubtitleStore_Expecter) CreateAPIKey(userID interface{}, key interface{}) *MockSubtitleStore_CreateAPIKey_Call {
	return &MockSubtitleStore_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", userID, key)}
}

func (_c *MockSubtitleStore_CreateAPIKey_Call) Run(run func(userID string, key string)) *MockSubtitleStore_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_CreateAPIKey_Call) Return(err error) *MockSubtitleStore_CreateAPIKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_CreateAPIKey_Call) RunAndReturn(run func(userID string, key string) error) *MockSubtitleStore_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CreateLanguageProfile(profile *database.LanguageProfile) error {
	ret := _mock.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for CreateLanguageProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.LanguageProfile) error); ok {
		r0 = returnFunc(profile)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_CreateLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLanguageProfile'
type MockSubtitleStore_CreateLanguageProfile_Call struct {
	*mock.Call
}

// CreateLanguageProfile is a helper method to define mock.On call
//   - profile *database.LanguageProfile
func (_e *MockSubtitleStore_Expecter) CreateLanguageProfile(profile interface{}) *MockSubtitleStore_CreateLanguageProfile_Call {
	return &MockSubtitleStore_CreateLanguageProfile_Call{Call: _e.mock.On("CreateLanguageProfile", profile)}
}

func (_c *MockSubtitleStore_CreateLanguageProfile_Call) Run(run func(profile *database.LanguageProfile)) *MockSubtitleStore_CreateLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.LanguageProfile
		if args[0] != nil {
			arg0 = args[0].(*database.LanguageProfile)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_CreateLanguageProfile_Call) Return(err error) *MockSubtitleStore_CreateLanguageProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_CreateLanguageProfile_Call) RunAndReturn(run func(profile *database.LanguageProfile) error) *MockSubtitleStore_CreateLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOneTimeToken provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CreateOneTimeToken(userID string, token string, duration time.Duration) error {
	ret := _mock.Called(userID, token, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreateOneTimeToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = returnFunc(userID, token, duration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_CreateOneTimeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOneTimeToken'
type MockSubtitleStore_CreateOneTimeToken_Call struct {
	*mock.Call
}

// CreateOneTimeToken is a helper method to define mock.On call
//   - userID string
//   - token string
//   - duration time.Duration
func (_e *MockSubtitleStore_Expecter) CreateOneTimeToken(userID interface{}, token interface{}, duration interface{}) *MockSubtitleStore_CreateOneTimeToken_Call {
	return &MockSubtitleStore_CreateOneTimeToken_Call{Call: _e.mock.On("CreateOneTimeToken", userID, token, duration)}
}

func (_c *MockSubtitleStore_CreateOneTimeToken_Call) Run(run func(userID string, token string, duration time.Duration)) *MockSubtitleStore_CreateOneTimeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_CreateOneTimeToken_Call) Return(err error) *MockSubtitleStore_CreateOneTimeToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_CreateOneTimeToken_Call) RunAndReturn(run func(userID string, token string, duration time.Duration) error) *MockSubtitleStore_CreateOneTimeToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CreateSession(userID string, token string, duration time.Duration) error {
	ret := _mock.Called(userID, token, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = returnFunc(userID, token, duration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSubtitleStore_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - userID string
//   - token string
//   - duration time.Duration
func (_e *MockSubtitleStore_Expecter) CreateSession(userID interface{}, token interface{}, duration interface{}) *MockSubtitleStore_CreateSession_Call {
	return &MockSubtitleStore_CreateSession_Call{Call: _e.mock.On("CreateSession", userID, token, duration)}
}

func (_c *MockSubtitleStore_CreateSession_Call) Run(run func(userID string, token string, duration time.Duration)) *MockSubtitleStore_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_CreateSession_Call) Return(err error) *MockSubtitleStore_CreateSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_CreateSession_Call) RunAndReturn(run func(userID string, token string, duration time.Duration) error) *MockSubtitleStore_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) CreateUser(username string, passwordHash string, email string, role string) (string, error) {
	ret := _mock.Called(username, passwordHash, email, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (string, error)); ok {
		return returnFunc(username, passwordHash, email, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = returnFunc(username, passwordHash, email, role)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(username, passwordHash, email, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockSubtitleStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - username string
//   - passwordHash string
//   - email string
//   - role string
func (_e *MockSubtitleStore_Expecter) CreateUser(username interface{}, passwordHash interface{}, email interface{}, role interface{}) *MockSubtitleStore_CreateUser_Call {
	return &MockSubtitleStore_CreateUser_Call{Call: _e.mock.On("CreateUser", username, passwordHash, email, role)}
}

func (_c *MockSubtitleStore_CreateUser_Call) Run(run func(username string, passwordHash string, email string, role string)) *MockSubtitleStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_CreateUser_Call) Return(s string, err error) *MockSubtitleStore_CreateUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_CreateUser_Call) RunAndReturn(run func(username string, passwordHash string, email string, role string) (string, error)) *MockSubtitleStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDownload provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteDownload(file string) error {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDownload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDownload'
type MockSubtitleStore_DeleteDownload_Call struct {
	*mock.Call
}

// DeleteDownload is a helper method to define mock.On call
//   - file string
func (_e *MockSubtitleStore_Expecter) DeleteDownload(file interface{}) *MockSubtitleStore_DeleteDownload_Call {
	return &MockSubtitleStore_DeleteDownload_Call{Call: _e.mock.On("DeleteDownload", file)}
}

func (_c *MockSubtitleStore_DeleteDownload_Call) Run(run func(file string)) *MockSubtitleStore_DeleteDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteDownload_Call) Return(err error) *MockSubtitleStore_DeleteDownload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteDownload_Call) RunAndReturn(run func(file string) error) *MockSubtitleStore_DeleteDownload_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteLanguageProfile(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLanguageProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLanguageProfile'
type MockSubtitleStore_DeleteLanguageProfile_Call struct {
	*mock.Call
}

// DeleteLanguageProfile is a helper method to define mock.On call
//   - id string
func (_e *MockSubtitleStore_Expecter) DeleteLanguageProfile(id interface{}) *MockSubtitleStore_DeleteLanguageProfile_Call {
	return &MockSubtitleStore_DeleteLanguageProfile_Call{Call: _e.mock.On("DeleteLanguageProfile", id)}
}

func (_c *MockSubtitleStore_DeleteLanguageProfile_Call) Run(run func(id string)) *MockSubtitleStore_DeleteLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteLanguageProfile_Call) Return(err error) *MockSubtitleStore_DeleteLanguageProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteLanguageProfile_Call) RunAndReturn(run func(id string) error) *MockSubtitleStore_DeleteLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMediaItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteMediaItem(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMediaItem'
type MockSubtitleStore_DeleteMediaItem_Call struct {
	*mock.Call
}

// DeleteMediaItem is a helper method to define mock.On call
//   - path string
func (_e *MockSubtitleStore_Expecter) DeleteMediaItem(path interface{}) *MockSubtitleStore_DeleteMediaItem_Call {
	return &MockSubtitleStore_DeleteMediaItem_Call{Call: _e.mock.On("DeleteMediaItem", path)}
}

func (_c *MockSubtitleStore_DeleteMediaItem_Call) Run(run func(path string)) *MockSubtitleStore_DeleteMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteMediaItem_Call) Return(err error) *MockSubtitleStore_DeleteMediaItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteMediaItem_Call) RunAndReturn(run func(path string) error) *MockSubtitleStore_DeleteMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMonitoredItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteMonitoredItem(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitoredItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteMonitoredItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMonitoredItem'
type MockSubtitleStore_DeleteMonitoredItem_Call struct {
	*mock.Call
}

// DeleteMonitoredItem is a helper method to define mock.On call
//   - id string
func (_e *MockSubtitleStore_Expecter) DeleteMonitoredItem(id interface{}) *MockSubtitleStore_DeleteMonitoredItem_Call {
	return &MockSubtitleStore_DeleteMonitoredItem_Call{Call: _e.mock.On("DeleteMonitoredItem", id)}
}

func (_c *MockSubtitleStore_DeleteMonitoredItem_Call) Run(run func(id string)) *MockSubtitleStore_DeleteMonitoredItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteMonitoredItem_Call) Return(err error) *MockSubtitleStore_DeleteMonitoredItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteMonitoredItem_Call) RunAndReturn(run func(id string) error) *MockSubtitleStore_DeleteMonitoredItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubtitle provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteSubtitle(file string) error {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubtitle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubtitle'
type MockSubtitleStore_DeleteSubtitle_Call struct {
	*mock.Call
}

// DeleteSubtitle is a helper method to define mock.On call
//   - file string
func (_e *MockSubtitleStore_Expecter) DeleteSubtitle(file interface{}) *MockSubtitleStore_DeleteSubtitle_Call {
	return &MockSubtitleStore_DeleteSubtitle_Call{Call: _e.mock.On("DeleteSubtitle", file)}
}

func (_c *MockSubtitleStore_DeleteSubtitle_Call) Run(run func(file string)) *MockSubtitleStore_DeleteSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteSubtitle_Call) Return(err error) *MockSubtitleStore_DeleteSubtitle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteSubtitle_Call) RunAndReturn(run func(file string) error) *MockSubtitleStore_DeleteSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubtitleSource provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteSubtitleSource(sourceHash string) error {
	ret := _mock.Called(sourceHash)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubtitleSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(sourceHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteSubtitleSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubtitleSource'
type MockSubtitleStore_DeleteSubtitleSource_Call struct {
	*mock.Call
}

// DeleteSubtitleSource is a helper method to define mock.On call
//   - sourceHash string
func (_e *MockSubtitleStore_Expecter) DeleteSubtitleSource(sourceHash interface{}) *MockSubtitleStore_DeleteSubtitleSource_Call {
	return &MockSubtitleStore_DeleteSubtitleSource_Call{Call: _e.mock.On("DeleteSubtitleSource", sourceHash)}
}

func (_c *MockSubtitleStore_DeleteSubtitleSource_Call) Run(run func(sourceHash string)) *MockSubtitleStore_DeleteSubtitleSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteSubtitleSource_Call) Return(err error) *MockSubtitleStore_DeleteSubtitleSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteSubtitleSource_Call) RunAndReturn(run func(sourceHash string) error) *MockSubtitleStore_DeleteSubtitleSource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) DeleteTag(id int64) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockSubtitleStore_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - id int64
func (_e *MockSubtitleStore_Expecter) DeleteTag(id interface{}) *MockSubtitleStore_DeleteTag_Call {
	return &MockSubtitleStore_DeleteTag_Call{Call: _e.mock.On("DeleteTag", id)}
}

func (_c *MockSubtitleStore_DeleteTag_Call) Run(run func(id int64)) *MockSubtitleStore_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_DeleteTag_Call) Return(err error) *MockSubtitleStore_DeleteTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_DeleteTag_Call) RunAndReturn(run func(id int64) error) *MockSubtitleStore_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetDashboardLayout provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetDashboardLayout(userID string) (string, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardLayout")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetDashboardLayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDashboardLayout'
type MockSubtitleStore_GetDashboardLayout_Call struct {
	*mock.Call
}

// GetDashboardLayout is a helper method to define mock.On call
//   - userID string
func (_e *MockSubtitleStore_Expecter) GetDashboardLayout(userID interface{}) *MockSubtitleStore_GetDashboardLayout_Call {
	return &MockSubtitleStore_GetDashboardLayout_Call{Call: _e.mock.On("GetDashboardLayout", userID)}
}

func (_c *MockSubtitleStore_GetDashboardLayout_Call) Run(run func(userID string)) *MockSubtitleStore_GetDashboardLayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetDashboardLayout_Call) Return(s string, err error) *MockSubtitleStore_GetDashboardLayout_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_GetDashboardLayout_Call) RunAndReturn(run func(userID string) (string, error)) *MockSubtitleStore_GetDashboardLayout_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetDefaultLanguageProfile() (*database.LanguageProfile, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultLanguageProfile")
	}

	var r0 *database.LanguageProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*database.LanguageProfile, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *database.LanguageProfile); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LanguageProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetDefaultLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultLanguageProfile'
type MockSubtitleStore_GetDefaultLanguageProfile_Call struct {
	*mock.Call
}

// GetDefaultLanguageProfile is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) GetDefaultLanguageProfile() *MockSubtitleStore_GetDefaultLanguageProfile_Call {
	return &MockSubtitleStore_GetDefaultLanguageProfile_Call{Call: _e.mock.On("GetDefaultLanguageProfile")}
}

func (_c *MockSubtitleStore_GetDefaultLanguageProfile_Call) Run(run func()) *MockSubtitleStore_GetDefaultLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_GetDefaultLanguageProfile_Call) Return(v *database.LanguageProfile, err error) *MockSubtitleStore_GetDefaultLanguageProfile_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSubtitleStore_GetDefaultLanguageProfile_Call) RunAndReturn(run func() (*database.LanguageProfile, error)) *MockSubtitleStore_GetDefaultLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetLanguageProfile(id string) (*database.LanguageProfile, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLanguageProfile")
	}

	var r0 *database.LanguageProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*database.LanguageProfile, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *database.LanguageProfile); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LanguageProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLanguageProfile'
type MockSubtitleStore_GetLanguageProfile_Call struct {
	*mock.Call
}

// GetLanguageProfile is a helper method to define mock.On call
//   - id string
func (_e *MockSubtitleStore_Expecter) GetLanguageProfile(id interface{}) *MockSubtitleStore_GetLanguageProfile_Call {
	return &MockSubtitleStore_GetLanguageProfile_Call{Call: _e.mock.On("GetLanguageProfile", id)}
}

func (_c *MockSubtitleStore_GetLanguageProfile_Call) Run(run func(id string)) *MockSubtitleStore_GetLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetLanguageProfile_Call) Return(v *database.LanguageProfile, err error) *MockSubtitleStore_GetLanguageProfile_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSubtitleStore_GetLanguageProfile_Call) RunAndReturn(run func(id string) (*database.LanguageProfile, error)) *MockSubtitleStore_GetLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaAltTitles provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMediaAltTitles(path string) ([]string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaAltTitles")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMediaAltTitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaAltTitles'
type MockSubtitleStore_GetMediaAltTitles_Call struct {
	*mock.Call
}

// GetMediaAltTitles is a helper method to define mock.On call
//   - path string
func (_e *MockSubtitleStore_Expecter) GetMediaAltTitles(path interface{}) *MockSubtitleStore_GetMediaAltTitles_Call {
	return &MockSubtitleStore_GetMediaAltTitles_Call{Call: _e.mock.On("GetMediaAltTitles", path)}
}

func (_c *MockSubtitleStore_GetMediaAltTitles_Call) Run(run func(path string)) *MockSubtitleStore_GetMediaAltTitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMediaAltTitles_Call) Return(strings []string, err error) *MockSubtitleStore_GetMediaAltTitles_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockSubtitleStore_GetMediaAltTitles_Call) RunAndReturn(run func(path string) ([]string, error)) *MockSubtitleStore_GetMediaAltTitles_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaFieldLocks provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMediaFieldLocks(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaFieldLocks")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMediaFieldLocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaFieldLocks'
type MockSubtitleStore_GetMediaFieldLocks_Call struct {
	*mock.Call
}

// GetMediaFieldLocks is a helper method to define mock.On call
//   - path string
func (_e *MockSubtitleStore_Expecter) GetMediaFieldLocks(path interface{}) *MockSubtitleStore_GetMediaFieldLocks_Call {
	return &MockSubtitleStore_GetMediaFieldLocks_Call{Call: _e.mock.On("GetMediaFieldLocks", path)}
}

func (_c *MockSubtitleStore_GetMediaFieldLocks_Call) Run(run func(path string)) *MockSubtitleStore_GetMediaFieldLocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMediaFieldLocks_Call) Return(s string, err error) *MockSubtitleStore_GetMediaFieldLocks_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_GetMediaFieldLocks_Call) RunAndReturn(run func(path string) (string, error)) *MockSubtitleStore_GetMediaFieldLocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMediaItem(path string) (*database.MediaItem, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaItem")
	}

	var r0 *database.MediaItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*database.MediaItem, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *database.MediaItem); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MediaItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaItem'
type MockSubtitleStore_GetMediaItem_Call struct {
	*mock.Call
}

// GetMediaItem is a helper method to define mock.On call
//   - path string
func (_e *MockSubtitleStore_Expecter) GetMediaItem(path interface{}) *MockSubtitleStore_GetMediaItem_Call {
	return &MockSubtitleStore_GetMediaItem_Call{Call: _e.mock.On("GetMediaItem", path)}
}

func (_c *MockSubtitleStore_GetMediaItem_Call) Run(run func(path string)) *MockSubtitleStore_GetMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMediaItem_Call) Return(mediaItem *database.MediaItem, err error) *MockSubtitleStore_GetMediaItem_Call {
	_c.Call.Return(mediaItem, err)
	return _c
}

func (_c *MockSubtitleStore_GetMediaItem_Call) RunAndReturn(run func(path string) (*database.MediaItem, error)) *MockSubtitleStore_GetMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMediaProfile(mediaID string) (*database.LanguageProfile, error) {
	ret := _mock.Called(mediaID)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaProfile")
	}

	var r0 *database.LanguageProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*database.LanguageProfile, error)); ok {
		return returnFunc(mediaID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *database.LanguageProfile); ok {
		r0 = returnFunc(mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LanguageProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(mediaID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMediaProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaProfile'
type MockSubtitleStore_GetMediaProfile_Call struct {
	*mock.Call
}

// GetMediaProfile is a helper method to define mock.On call
//   - mediaID string
func (_e *MockSubtitleStore_Expecter) GetMediaProfile(mediaID interface{}) *MockSubtitleStore_GetMediaProfile_Call {
	return &MockSubtitleStore_GetMediaProfile_Call{Call: _e.mock.On("GetMediaProfile", mediaID)}
}

func (_c *MockSubtitleStore_GetMediaProfile_Call) Run(run func(mediaID string)) *MockSubtitleStore_GetMediaProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMediaProfile_Call) Return(v *database.LanguageProfile, err error) *MockSubtitleStore_GetMediaProfile_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSubtitleStore_GetMediaProfile_Call) RunAndReturn(run func(mediaID string) (*database.LanguageProfile, error)) *MockSubtitleStore_GetMediaProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaReleaseGroup provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMediaReleaseGroup(path string) (string, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaReleaseGroup")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMediaReleaseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaReleaseGroup'
type MockSubtitleStore_GetMediaReleaseGroup_Call struct {
	*mock.Call
}

// GetMediaReleaseGroup is a helper method to define mock.On call
//   - path string
func (_e *MockSubtitleStore_Expecter) GetMediaReleaseGroup(path interface{}) *MockSubtitleStore_GetMediaReleaseGroup_Call {
	return &MockSubtitleStore_GetMediaReleaseGroup_Call{Call: _e.mock.On("GetMediaReleaseGroup", path)}
}

func (_c *MockSubtitleStore_GetMediaReleaseGroup_Call) Run(run func(path string)) *MockSubtitleStore_GetMediaReleaseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMediaReleaseGroup_Call) Return(s string, err error) *MockSubtitleStore_GetMediaReleaseGroup_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_GetMediaReleaseGroup_Call) RunAndReturn(run func(path string) (string, error)) *MockSubtitleStore_GetMediaReleaseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonitoredItemsToCheck provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetMonitoredItemsToCheck(interval time.Duration) ([]database.MonitoredItem, error) {
	ret := _mock.Called(interval)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoredItemsToCheck")
	}

	var r0 []database.MonitoredItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Duration) ([]database.MonitoredItem, error)); ok {
		return returnFunc(interval)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Duration) []database.MonitoredItem); ok {
		r0 = returnFunc(interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MonitoredItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = returnFunc(interval)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetMonitoredItemsToCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonitoredItemsToCheck'
type MockSubtitleStore_GetMonitoredItemsToCheck_Call struct {
	*mock.Call
}

// GetMonitoredItemsToCheck is a helper method to define mock.On call
//   - interval time.Duration
func (_e *MockSubtitleStore_Expecter) GetMonitoredItemsToCheck(interval interface{}) *MockSubtitleStore_GetMonitoredItemsToCheck_Call {
	return &MockSubtitleStore_GetMonitoredItemsToCheck_Call{Call: _e.mock.On("GetMonitoredItemsToCheck", interval)}
}

func (_c *MockSubtitleStore_GetMonitoredItemsToCheck_Call) Run(run func(interval time.Duration)) *MockSubtitleStore_GetMonitoredItemsToCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetMonitoredItemsToCheck_Call) Return(monitoredItems []database.MonitoredItem, err error) *MockSubtitleStore_GetMonitoredItemsToCheck_Call {
	_c.Call.Return(monitoredItems, err)
	return _c
}

func (_c *MockSubtitleStore_GetMonitoredItemsToCheck_Call) RunAndReturn(run func(interval time.Duration) ([]database.MonitoredItem, error)) *MockSubtitleStore_GetMonitoredItemsToCheck_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubtitleSource provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetSubtitleSource(sourceHash string) (*database.SubtitleSource, error) {
	ret := _mock.Called(sourceHash)

	if len(ret) == 0 {
		panic("no return value specified for GetSubtitleSource")
	}

	var r0 *database.SubtitleSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*database.SubtitleSource, error)); ok {
		return returnFunc(sourceHash)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *database.SubtitleSource); ok {
		r0 = returnFunc(sourceHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SubtitleSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(sourceHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetSubtitleSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubtitleSource'
type MockSubtitleStore_GetSubtitleSource_Call struct {
	*mock.Call
}

// GetSubtitleSource is a helper method to define mock.On call
//   - sourceHash string
func (_e *MockSubtitleStore_Expecter) GetSubtitleSource(sourceHash interface{}) *MockSubtitleStore_GetSubtitleSource_Call {
	return &MockSubtitleStore_GetSubtitleSource_Call{Call: _e.mock.On("GetSubtitleSource", sourceHash)}
}

func (_c *MockSubtitleStore_GetSubtitleSource_Call) Run(run func(sourceHash string)) *MockSubtitleStore_GetSubtitleSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetSubtitleSource_Call) Return(subtitleSource *database.SubtitleSource, err error) *MockSubtitleStore_GetSubtitleSource_Call {
	_c.Call.Return(subtitleSource, err)
	return _c
}

func (_c *MockSubtitleStore_GetSubtitleSource_Call) RunAndReturn(run func(sourceHash string) (*database.SubtitleSource, error)) *MockSubtitleStore_GetSubtitleSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetUserByEmail(email string) (*common.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *common.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockSubtitleStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockSubtitleStore_Expecter) GetUserByEmail(email interface{}) *MockSubtitleStore_GetUserByEmail_Call {
	return &MockSubtitleStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockSubtitleStore_GetUserByEmail_Call) Run(run func(email string)) *MockSubtitleStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetUserByEmail_Call) Return(user *common.User, err error) *MockSubtitleStore_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSubtitleStore_GetUserByEmail_Call) RunAndReturn(run func(email string) (*common.User, error)) *MockSubtitleStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetUserByID(id string) (*common.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *common.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockSubtitleStore_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
func (_e *MockSubtitleStore_Expecter) GetUserByID(id interface{}) *MockSubtitleStore_GetUserByID_Call {
	return &MockSubtitleStore_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *MockSubtitleStore_GetUserByID_Call) Run(run func(id string)) *MockSubtitleStore_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetUserByID_Call) Return(user *common.User, err error) *MockSubtitleStore_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSubtitleStore_GetUserByID_Call) RunAndReturn(run func(id string) (*common.User, error)) *MockSubtitleStore_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) GetUserByUsername(username string) (*common.User, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *common.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.User, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.User); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockSubtitleStore_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockSubtitleStore_Expecter) GetUserByUsername(username interface{}) *MockSubtitleStore_GetUserByUsername_Call {
	return &MockSubtitleStore_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockSubtitleStore_GetUserByUsername_Call) Run(run func(username string)) *MockSubtitleStore_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_GetUserByUsername_Call) Return(user *common.User, err error) *MockSubtitleStore_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSubtitleStore_GetUserByUsername_Call) RunAndReturn(run func(username string) (*common.User, error)) *MockSubtitleStore_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// InsertDownload provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertDownload(rec *database.DownloadRecord) error {
	ret := _mock.Called(rec)

	if len(ret) == 0 {
		panic("no return value specified for InsertDownload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.DownloadRecord) error); ok {
		r0 = returnFunc(rec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDownload'
type MockSubtitleStore_InsertDownload_Call struct {
	*mock.Call
}

// InsertDownload is a helper method to define mock.On call
//   - rec *database.DownloadRecord
func (_e *MockSubtitleStore_Expecter) InsertDownload(rec interface{}) *MockSubtitleStore_InsertDownload_Call {
	return &MockSubtitleStore_InsertDownload_Call{Call: _e.mock.On("InsertDownload", rec)}
}

func (_c *MockSubtitleStore_InsertDownload_Call) Run(run func(rec *database.DownloadRecord)) *MockSubtitleStore_InsertDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.DownloadRecord
		if args[0] != nil {
			arg0 = args[0].(*database.DownloadRecord)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertDownload_Call) Return(err error) *MockSubtitleStore_InsertDownload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertDownload_Call) RunAndReturn(run func(rec *database.DownloadRecord) error) *MockSubtitleStore_InsertDownload_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMediaItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertMediaItem(rec *database.MediaItem) error {
	ret := _mock.Called(rec)

	if len(ret) == 0 {
		panic("no return value specified for InsertMediaItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.MediaItem) error); ok {
		r0 = returnFunc(rec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMediaItem'
type MockSubtitleStore_InsertMediaItem_Call struct {
	*mock.Call
}

// InsertMediaItem is a helper method to define mock.On call
//   - rec *database.MediaItem
func (_e *MockSubtitleStore_Expecter) InsertMediaItem(rec interface{}) *MockSubtitleStore_InsertMediaItem_Call {
	return &MockSubtitleStore_InsertMediaItem_Call{Call: _e.mock.On("InsertMediaItem", rec)}
}

func (_c *MockSubtitleStore_InsertMediaItem_Call) Run(run func(rec *database.MediaItem)) *MockSubtitleStore_InsertMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.MediaItem
		if args[0] != nil {
			arg0 = args[0].(*database.MediaItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertMediaItem_Call) Return(err error) *MockSubtitleStore_InsertMediaItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertMediaItem_Call) RunAndReturn(run func(rec *database.MediaItem) error) *MockSubtitleStore_InsertMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMonitoredItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertMonitoredItem(rec *database.MonitoredItem) error {
	ret := _mock.Called(rec)

	if len(ret) == 0 {
		panic("no return value specified for InsertMonitoredItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.MonitoredItem) error); ok {
		r0 = returnFunc(rec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertMonitoredItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMonitoredItem'
type MockSubtitleStore_InsertMonitoredItem_Call struct {
	*mock.Call
}

// InsertMonitoredItem is a helper method to define mock.On call
//   - rec *database.MonitoredItem
func (_e *MockSubtitleStore_Expecter) InsertMonitoredItem(rec interface{}) *MockSubtitleStore_InsertMonitoredItem_Call {
	return &MockSubtitleStore_InsertMonitoredItem_Call{Call: _e.mock.On("InsertMonitoredItem", rec)}
}

func (_c *MockSubtitleStore_InsertMonitoredItem_Call) Run(run func(rec *database.MonitoredItem)) *MockSubtitleStore_InsertMonitoredItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.MonitoredItem
		if args[0] != nil {
			arg0 = args[0].(*database.MonitoredItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertMonitoredItem_Call) Return(err error) *MockSubtitleStore_InsertMonitoredItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertMonitoredItem_Call) RunAndReturn(run func(rec *database.MonitoredItem) error) *MockSubtitleStore_InsertMonitoredItem_Call {
	_c.Call.Return(run)
	return _c
}

// InsertSubtitle provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertSubtitle(rec *database.SubtitleRecord) error {
	ret := _mock.Called(rec)

	if len(ret) == 0 {
		panic("no return value specified for InsertSubtitle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.SubtitleRecord) error); ok {
		r0 = returnFunc(rec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertSubtitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertSubtitle'
type MockSubtitleStore_InsertSubtitle_Call struct {
	*mock.Call
}

// InsertSubtitle is a helper method to define mock.On call
//   - rec *database.SubtitleRecord
func (_e *MockSubtitleStore_Expecter) InsertSubtitle(rec interface{}) *MockSubtitleStore_InsertSubtitle_Call {
	return &MockSubtitleStore_InsertSubtitle_Call{Call: _e.mock.On("InsertSubtitle", rec)}
}

func (_c *MockSubtitleStore_InsertSubtitle_Call) Run(run func(rec *database.SubtitleRecord)) *MockSubtitleStore_InsertSubtitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.SubtitleRecord
		if args[0] != nil {
			arg0 = args[0].(*database.SubtitleRecord)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertSubtitle_Call) Return(err error) *MockSubtitleStore_InsertSubtitle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertSubtitle_Call) RunAndReturn(run func(rec *database.SubtitleRecord) error) *MockSubtitleStore_InsertSubtitle_Call {
	_c.Call.Return(run)
	return _c
}

// InsertSubtitleSource provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertSubtitleSource(src *database.SubtitleSource) error {
	ret := _mock.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for InsertSubtitleSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.SubtitleSource) error); ok {
		r0 = returnFunc(src)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertSubtitleSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertSubtitleSource'
type MockSubtitleStore_InsertSubtitleSource_Call struct {
	*mock.Call
}

// InsertSubtitleSource is a helper method to define mock.On call
//   - src *database.SubtitleSource
func (_e *MockSubtitleStore_Expecter) InsertSubtitleSource(src interface{}) *MockSubtitleStore_InsertSubtitleSource_Call {
	return &MockSubtitleStore_InsertSubtitleSource_Call{Call: _e.mock.On("InsertSubtitleSource", src)}
}

func (_c *MockSubtitleStore_InsertSubtitleSource_Call) Run(run func(src *database.SubtitleSource)) *MockSubtitleStore_InsertSubtitleSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.SubtitleSource
		if args[0] != nil {
			arg0 = args[0].(*database.SubtitleSource)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertSubtitleSource_Call) Return(err error) *MockSubtitleStore_InsertSubtitleSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertSubtitleSource_Call) RunAndReturn(run func(src *database.SubtitleSource) error) *MockSubtitleStore_InsertSubtitleSource_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTag provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InsertTag(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for InsertTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InsertTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTag'
type MockSubtitleStore_InsertTag_Call struct {
	*mock.Call
}

// InsertTag is a helper method to define mock.On call
//   - name string
func (_e *MockSubtitleStore_Expecter) InsertTag(name interface{}) *MockSubtitleStore_InsertTag_Call {
	return &MockSubtitleStore_InsertTag_Call{Call: _e.mock.On("InsertTag", name)}
}

func (_c *MockSubtitleStore_InsertTag_Call) Run(run func(name string)) *MockSubtitleStore_InsertTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InsertTag_Call) Return(err error) *MockSubtitleStore_InsertTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InsertTag_Call) RunAndReturn(run func(name string) error) *MockSubtitleStore_InsertTag_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateSession provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InvalidateSession(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InvalidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateSession'
type MockSubtitleStore_InvalidateSession_Call struct {
	*mock.Call
}

// InvalidateSession is a helper method to define mock.On call
//   - token string
func (_e *MockSubtitleStore_Expecter) InvalidateSession(token interface{}) *MockSubtitleStore_InvalidateSession_Call {
	return &MockSubtitleStore_InvalidateSession_Call{Call: _e.mock.On("InvalidateSession", token)}
}

func (_c *MockSubtitleStore_InvalidateSession_Call) Run(run func(token string)) *MockSubtitleStore_InvalidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InvalidateSession_Call) Return(err error) *MockSubtitleStore_InvalidateSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InvalidateSession_Call) RunAndReturn(run func(token string) error) *MockSubtitleStore_InvalidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateUserSessions provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) InvalidateUserSessions(userID string) error {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_InvalidateUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateUserSessions'
type MockSubtitleStore_InvalidateUserSessions_Call struct {
	*mock.Call
}

// InvalidateUserSessions is a helper method to define mock.On call
//   - userID string
func (_e *MockSubtitleStore_Expecter) InvalidateUserSessions(userID interface{}) *MockSubtitleStore_InvalidateUserSessions_Call {
	return &MockSubtitleStore_InvalidateUserSessions_Call{Call: _e.mock.On("InvalidateUserSessions", userID)}
}

func (_c *MockSubtitleStore_InvalidateUserSessions_Call) Run(run func(userID string)) *MockSubtitleStore_InvalidateUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_InvalidateUserSessions_Call) Return(err error) *MockSubtitleStore_InvalidateUserSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_InvalidateUserSessions_Call) RunAndReturn(run func(userID string) error) *MockSubtitleStore_InvalidateUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDownloads provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListDownloads() ([]database.DownloadRecord, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListDownloads")
	}

	var r0 []database.DownloadRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.DownloadRecord, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.DownloadRecord); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DownloadRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListDownloads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDownloads'
type MockSubtitleStore_ListDownloads_Call struct {
	*mock.Call
}

// ListDownloads is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListDownloads() *MockSubtitleStore_ListDownloads_Call {
	return &MockSubtitleStore_ListDownloads_Call{Call: _e.mock.On("ListDownloads")}
}

func (_c *MockSubtitleStore_ListDownloads_Call) Run(run func()) *MockSubtitleStore_ListDownloads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListDownloads_Call) Return(downloadRecords []database.DownloadRecord, err error) *MockSubtitleStore_ListDownloads_Call {
	_c.Call.Return(downloadRecords, err)
	return _c
}

func (_c *MockSubtitleStore_ListDownloads_Call) RunAndReturn(run func() ([]database.DownloadRecord, error)) *MockSubtitleStore_ListDownloads_Call {
	_c.Call.Return(run)
	return _c
}

// ListDownloadsByVideo provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListDownloadsByVideo(video string) ([]database.DownloadRecord, error) {
	ret := _mock.Called(video)

	if len(ret) == 0 {
		panic("no return value specified for ListDownloadsByVideo")
	}

	var r0 []database.DownloadRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]database.DownloadRecord, error)); ok {
		return returnFunc(video)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []database.DownloadRecord); ok {
		r0 = returnFunc(video)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DownloadRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(video)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListDownloadsByVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDownloadsByVideo'
type MockSubtitleStore_ListDownloadsByVideo_Call struct {
	*mock.Call
}

// ListDownloadsByVideo is a helper method to define mock.On call
//   - video string
func (_e *MockSubtitleStore_Expecter) ListDownloadsByVideo(video interface{}) *MockSubtitleStore_ListDownloadsByVideo_Call {
	return &MockSubtitleStore_ListDownloadsByVideo_Call{Call: _e.mock.On("ListDownloadsByVideo", video)}
}

func (_c *MockSubtitleStore_ListDownloadsByVideo_Call) Run(run func(video string)) *MockSubtitleStore_ListDownloadsByVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ListDownloadsByVideo_Call) Return(downloadRecords []database.DownloadRecord, err error) *MockSubtitleStore_ListDownloadsByVideo_Call {
	_c.Call.Return(downloadRecords, err)
	return _c
}

func (_c *MockSubtitleStore_ListDownloadsByVideo_Call) RunAndReturn(run func(video string) ([]database.DownloadRecord, error)) *MockSubtitleStore_ListDownloadsByVideo_Call {
	_c.Call.Return(run)
	return _c
}

// ListLanguageProfiles provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListLanguageProfiles() ([]database.LanguageProfile, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListLanguageProfiles")
	}

	var r0 []database.LanguageProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.LanguageProfile, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.LanguageProfile); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LanguageProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListLanguageProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLanguageProfiles'
type MockSubtitleStore_ListLanguageProfiles_Call struct {
	*mock.Call
}

// ListLanguageProfiles is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListLanguageProfiles() *MockSubtitleStore_ListLanguageProfiles_Call {
	return &MockSubtitleStore_ListLanguageProfiles_Call{Call: _e.mock.On("ListLanguageProfiles")}
}

func (_c *MockSubtitleStore_ListLanguageProfiles_Call) Run(run func()) *MockSubtitleStore_ListLanguageProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListLanguageProfiles_Call) Return(vs []database.LanguageProfile, err error) *MockSubtitleStore_ListLanguageProfiles_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockSubtitleStore_ListLanguageProfiles_Call) RunAndReturn(run func() ([]database.LanguageProfile, error)) *MockSubtitleStore_ListLanguageProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// ListMediaItems provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListMediaItems() ([]database.MediaItem, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListMediaItems")
	}

	var r0 []database.MediaItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.MediaItem, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.MediaItem); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MediaItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMediaItems'
type MockSubtitleStore_ListMediaItems_Call struct {
	*mock.Call
}

// ListMediaItems is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListMediaItems() *MockSubtitleStore_ListMediaItems_Call {
	return &MockSubtitleStore_ListMediaItems_Call{Call: _e.mock.On("ListMediaItems")}
}

func (_c *MockSubtitleStore_ListMediaItems_Call) Run(run func()) *MockSubtitleStore_ListMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListMediaItems_Call) Return(mediaItems []database.MediaItem, err error) *MockSubtitleStore_ListMediaItems_Call {
	_c.Call.Return(mediaItems, err)
	return _c
}

func (_c *MockSubtitleStore_ListMediaItems_Call) RunAndReturn(run func() ([]database.MediaItem, error)) *MockSubtitleStore_ListMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// ListMonitoredItems provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListMonitoredItems() ([]database.MonitoredItem, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoredItems")
	}

	var r0 []database.MonitoredItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.MonitoredItem, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.MonitoredItem); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MonitoredItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListMonitoredItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMonitoredItems'
type MockSubtitleStore_ListMonitoredItems_Call struct {
	*mock.Call
}

// ListMonitoredItems is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListMonitoredItems() *MockSubtitleStore_ListMonitoredItems_Call {
	return &MockSubtitleStore_ListMonitoredItems_Call{Call: _e.mock.On("ListMonitoredItems")}
}

func (_c *MockSubtitleStore_ListMonitoredItems_Call) Run(run func()) *MockSubtitleStore_ListMonitoredItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListMonitoredItems_Call) Return(monitoredItems []database.MonitoredItem, err error) *MockSubtitleStore_ListMonitoredItems_Call {
	_c.Call.Return(monitoredItems, err)
	return _c
}

func (_c *MockSubtitleStore_ListMonitoredItems_Call) RunAndReturn(run func() ([]database.MonitoredItem, error)) *MockSubtitleStore_ListMonitoredItems_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubtitleSources provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListSubtitleSources(provider string, limit int) ([]database.SubtitleSource, error) {
	ret := _mock.Called(provider, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListSubtitleSources")
	}

	var r0 []database.SubtitleSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) ([]database.SubtitleSource, error)); ok {
		return returnFunc(provider, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) []database.SubtitleSource); ok {
		r0 = returnFunc(provider, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SubtitleSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(provider, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListSubtitleSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubtitleSources'
type MockSubtitleStore_ListSubtitleSources_Call struct {
	*mock.Call
}

// ListSubtitleSources is a helper method to define mock.On call
//   - provider string
//   - limit int
func (_e *MockSubtitleStore_Expecter) ListSubtitleSources(provider interface{}, limit interface{}) *MockSubtitleStore_ListSubtitleSources_Call {
	return &MockSubtitleStore_ListSubtitleSources_Call{Call: _e.mock.On("ListSubtitleSources", provider, limit)}
}

func (_c *MockSubtitleStore_ListSubtitleSources_Call) Run(run func(provider string, limit int)) *MockSubtitleStore_ListSubtitleSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ListSubtitleSources_Call) Return(subtitleSources []database.SubtitleSource, err error) *MockSubtitleStore_ListSubtitleSources_Call {
	_c.Call.Return(subtitleSources, err)
	return _c
}

func (_c *MockSubtitleStore_ListSubtitleSources_Call) RunAndReturn(run func(provider string, limit int) ([]database.SubtitleSource, error)) *MockSubtitleStore_ListSubtitleSources_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubtitles provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListSubtitles() ([]database.SubtitleRecord, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSubtitles")
	}

	var r0 []database.SubtitleRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.SubtitleRecord, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.SubtitleRecord); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SubtitleRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListSubtitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubtitles'
type MockSubtitleStore_ListSubtitles_Call struct {
	*mock.Call
}

// ListSubtitles is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListSubtitles() *MockSubtitleStore_ListSubtitles_Call {
	return &MockSubtitleStore_ListSubtitles_Call{Call: _e.mock.On("ListSubtitles")}
}

func (_c *MockSubtitleStore_ListSubtitles_Call) Run(run func()) *MockSubtitleStore_ListSubtitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListSubtitles_Call) Return(subtitleRecords []database.SubtitleRecord, err error) *MockSubtitleStore_ListSubtitles_Call {
	_c.Call.Return(subtitleRecords, err)
	return _c
}

func (_c *MockSubtitleStore_ListSubtitles_Call) RunAndReturn(run func() ([]database.SubtitleRecord, error)) *MockSubtitleStore_ListSubtitles_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubtitlesByVideo provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListSubtitlesByVideo(video string) ([]database.SubtitleRecord, error) {
	ret := _mock.Called(video)

	if len(ret) == 0 {
		panic("no return value specified for ListSubtitlesByVideo")
	}

	var r0 []database.SubtitleRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]database.SubtitleRecord, error)); ok {
		return returnFunc(video)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []database.SubtitleRecord); ok {
		r0 = returnFunc(video)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SubtitleRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(video)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListSubtitlesByVideo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubtitlesByVideo'
type MockSubtitleStore_ListSubtitlesByVideo_Call struct {
	*mock.Call
}

// ListSubtitlesByVideo is a helper method to define mock.On call
//   - video string
func (_e *MockSubtitleStore_Expecter) ListSubtitlesByVideo(video interface{}) *MockSubtitleStore_ListSubtitlesByVideo_Call {
	return &MockSubtitleStore_ListSubtitlesByVideo_Call{Call: _e.mock.On("ListSubtitlesByVideo", video)}
}

func (_c *MockSubtitleStore_ListSubtitlesByVideo_Call) Run(run func(video string)) *MockSubtitleStore_ListSubtitlesByVideo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ListSubtitlesByVideo_Call) Return(subtitleRecords []database.SubtitleRecord, err error) *MockSubtitleStore_ListSubtitlesByVideo_Call {
	_c.Call.Return(subtitleRecords, err)
	return _c
}

func (_c *MockSubtitleStore_ListSubtitlesByVideo_Call) RunAndReturn(run func(video string) ([]database.SubtitleRecord, error)) *MockSubtitleStore_ListSubtitlesByVideo_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListTags() ([]database.Tag, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []database.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.Tag, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.Tag); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type MockSubtitleStore_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListTags() *MockSubtitleStore_ListTags_Call {
	return &MockSubtitleStore_ListTags_Call{Call: _e.mock.On("ListTags")}
}

func (_c *MockSubtitleStore_ListTags_Call) Run(run func()) *MockSubtitleStore_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListTags_Call) Return(tags []database.Tag, err error) *MockSubtitleStore_ListTags_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockSubtitleStore_ListTags_Call) RunAndReturn(run func() ([]database.Tag, error)) *MockSubtitleStore_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForMedia provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListTagsForMedia(mediaID int64) ([]database.Tag, error) {
	ret := _mock.Called(mediaID)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForMedia")
	}

	var r0 []database.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) ([]database.Tag, error)); ok {
		return returnFunc(mediaID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) []database.Tag); ok {
		r0 = returnFunc(mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(mediaID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListTagsForMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForMedia'
type MockSubtitleStore_ListTagsForMedia_Call struct {
	*mock.Call
}

// ListTagsForMedia is a helper method to define mock.On call
//   - mediaID int64
func (_e *MockSubtitleStore_Expecter) ListTagsForMedia(mediaID interface{}) *MockSubtitleStore_ListTagsForMedia_Call {
	return &MockSubtitleStore_ListTagsForMedia_Call{Call: _e.mock.On("ListTagsForMedia", mediaID)}
}

func (_c *MockSubtitleStore_ListTagsForMedia_Call) Run(run func(mediaID int64)) *MockSubtitleStore_ListTagsForMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ListTagsForMedia_Call) Return(tags []database.Tag, err error) *MockSubtitleStore_ListTagsForMedia_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockSubtitleStore_ListTagsForMedia_Call) RunAndReturn(run func(mediaID int64) ([]database.Tag, error)) *MockSubtitleStore_ListTagsForMedia_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForUser provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListTagsForUser(userID int64) ([]database.Tag, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForUser")
	}

	var r0 []database.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) ([]database.Tag, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) []database.Tag); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListTagsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForUser'
type MockSubtitleStore_ListTagsForUser_Call struct {
	*mock.Call
}

// ListTagsForUser is a helper method to define mock.On call
//   - userID int64
func (_e *MockSubtitleStore_Expecter) ListTagsForUser(userID interface{}) *MockSubtitleStore_ListTagsForUser_Call {
	return &MockSubtitleStore_ListTagsForUser_Call{Call: _e.mock.On("ListTagsForUser", userID)}
}

func (_c *MockSubtitleStore_ListTagsForUser_Call) Run(run func(userID int64)) *MockSubtitleStore_ListTagsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ListTagsForUser_Call) Return(tags []database.Tag, err error) *MockSubtitleStore_ListTagsForUser_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockSubtitleStore_ListTagsForUser_Call) RunAndReturn(run func(userID int64) ([]database.Tag, error)) *MockSubtitleStore_ListTagsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ListUsers() ([]*common.User, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*common.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*common.User, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*common.User); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockSubtitleStore_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
func (_e *MockSubtitleStore_Expecter) ListUsers() *MockSubtitleStore_ListUsers_Call {
	return &MockSubtitleStore_ListUsers_Call{Call: _e.mock.On("ListUsers")}
}

func (_c *MockSubtitleStore_ListUsers_Call) Run(run func()) *MockSubtitleStore_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubtitleStore_ListUsers_Call) Return(users []*common.User, err error) *MockSubtitleStore_ListUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockSubtitleStore_ListUsers_Call) RunAndReturn(run func() ([]*common.User, error)) *MockSubtitleStore_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProfileFromMedia provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) RemoveProfileFromMedia(mediaID string) error {
	ret := _mock.Called(mediaID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProfileFromMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(mediaID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_RemoveProfileFromMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProfileFromMedia'
type MockSubtitleStore_RemoveProfileFromMedia_Call struct {
	*mock.Call
}

// RemoveProfileFromMedia is a helper method to define mock.On call
//   - mediaID string
func (_e *MockSubtitleStore_Expecter) RemoveProfileFromMedia(mediaID interface{}) *MockSubtitleStore_RemoveProfileFromMedia_Call {
	return &MockSubtitleStore_RemoveProfileFromMedia_Call{Call: _e.mock.On("RemoveProfileFromMedia", mediaID)}
}

func (_c *MockSubtitleStore_RemoveProfileFromMedia_Call) Run(run func(mediaID string)) *MockSubtitleStore_RemoveProfileFromMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_RemoveProfileFromMedia_Call) Return(err error) *MockSubtitleStore_RemoveProfileFromMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_RemoveProfileFromMedia_Call) RunAndReturn(run func(mediaID string) error) *MockSubtitleStore_RemoveProfileFromMedia_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromMedia provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) RemoveTagFromMedia(mediaID int64, tagID int64) error {
	ret := _mock.Called(mediaID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = returnFunc(mediaID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_RemoveTagFromMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromMedia'
type MockSubtitleStore_RemoveTagFromMedia_Call struct {
	*mock.Call
}

// RemoveTagFromMedia is a helper method to define mock.On call
//   - mediaID int64
//   - tagID int64
func (_e *MockSubtitleStore_Expecter) RemoveTagFromMedia(mediaID interface{}, tagID interface{}) *MockSubtitleStore_RemoveTagFromMedia_Call {
	return &MockSubtitleStore_RemoveTagFromMedia_Call{Call: _e.mock.On("RemoveTagFromMedia", mediaID, tagID)}
}

func (_c *MockSubtitleStore_RemoveTagFromMedia_Call) Run(run func(mediaID int64, tagID int64)) *MockSubtitleStore_RemoveTagFromMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_RemoveTagFromMedia_Call) Return(err error) *MockSubtitleStore_RemoveTagFromMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_RemoveTagFromMedia_Call) RunAndReturn(run func(mediaID int64, tagID int64) error) *MockSubtitleStore_RemoveTagFromMedia_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromUser provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) RemoveTagFromUser(userID int64, tagID int64) error {
	ret := _mock.Called(userID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = returnFunc(userID, tagID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_RemoveTagFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromUser'
type MockSubtitleStore_RemoveTagFromUser_Call struct {
	*mock.Call
}

// RemoveTagFromUser is a helper method to define mock.On call
//   - userID int64
//   - tagID int64
func (_e *MockSubtitleStore_Expecter) RemoveTagFromUser(userID interface{}, tagID interface{}) *MockSubtitleStore_RemoveTagFromUser_Call {
	return &MockSubtitleStore_RemoveTagFromUser_Call{Call: _e.mock.On("RemoveTagFromUser", userID, tagID)}
}

func (_c *MockSubtitleStore_RemoveTagFromUser_Call) Run(run func(userID int64, tagID int64)) *MockSubtitleStore_RemoveTagFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_RemoveTagFromUser_Call) Return(err error) *MockSubtitleStore_RemoveTagFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_RemoveTagFromUser_Call) RunAndReturn(run func(userID int64, tagID int64) error) *MockSubtitleStore_RemoveTagFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetDashboardLayout provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetDashboardLayout(userID string, layout string) error {
	ret := _mock.Called(userID, layout)

	if len(ret) == 0 {
		panic("no return value specified for SetDashboardLayout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(userID, layout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetDashboardLayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDashboardLayout'
type MockSubtitleStore_SetDashboardLayout_Call struct {
	*mock.Call
}

// SetDashboardLayout is a helper method to define mock.On call
//   - userID string
//   - layout string
func (_e *MockSubtitleStore_Expecter) SetDashboardLayout(userID interface{}, layout interface{}) *MockSubtitleStore_SetDashboardLayout_Call {
	return &MockSubtitleStore_SetDashboardLayout_Call{Call: _e.mock.On("SetDashboardLayout", userID, layout)}
}

func (_c *MockSubtitleStore_SetDashboardLayout_Call) Run(run func(userID string, layout string)) *MockSubtitleStore_SetDashboardLayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetDashboardLayout_Call) Return(err error) *MockSubtitleStore_SetDashboardLayout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetDashboardLayout_Call) RunAndReturn(run func(userID string, layout string) error) *MockSubtitleStore_SetDashboardLayout_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetDefaultLanguageProfile(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultLanguageProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetDefaultLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultLanguageProfile'
type MockSubtitleStore_SetDefaultLanguageProfile_Call struct {
	*mock.Call
}

// SetDefaultLanguageProfile is a helper method to define mock.On call
//   - id string
func (_e *MockSubtitleStore_Expecter) SetDefaultLanguageProfile(id interface{}) *MockSubtitleStore_SetDefaultLanguageProfile_Call {
	return &MockSubtitleStore_SetDefaultLanguageProfile_Call{Call: _e.mock.On("SetDefaultLanguageProfile", id)}
}

func (_c *MockSubtitleStore_SetDefaultLanguageProfile_Call) Run(run func(id string)) *MockSubtitleStore_SetDefaultLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetDefaultLanguageProfile_Call) Return(err error) *MockSubtitleStore_SetDefaultLanguageProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetDefaultLanguageProfile_Call) RunAndReturn(run func(id string) error) *MockSubtitleStore_SetDefaultLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// SetMediaAltTitles provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetMediaAltTitles(path string, titles []string) error {
	ret := _mock.Called(path, titles)

	if len(ret) == 0 {
		panic("no return value specified for SetMediaAltTitles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = returnFunc(path, titles)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetMediaAltTitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMediaAltTitles'
type MockSubtitleStore_SetMediaAltTitles_Call struct {
	*mock.Call
}

// SetMediaAltTitles is a helper method to define mock.On call
//   - path string
//   - titles []string
func (_e *MockSubtitleStore_Expecter) SetMediaAltTitles(path interface{}, titles interface{}) *MockSubtitleStore_SetMediaAltTitles_Call {
	return &MockSubtitleStore_SetMediaAltTitles_Call{Call: _e.mock.On("SetMediaAltTitles", path, titles)}
}

func (_c *MockSubtitleStore_SetMediaAltTitles_Call) Run(run func(path string, titles []string)) *MockSubtitleStore_SetMediaAltTitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetMediaAltTitles_Call) Return(err error) *MockSubtitleStore_SetMediaAltTitles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetMediaAltTitles_Call) RunAndReturn(run func(path string, titles []string) error) *MockSubtitleStore_SetMediaAltTitles_Call {
	_c.Call.Return(run)
	return _c
}

// SetMediaFieldLocks provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetMediaFieldLocks(path string, locks string) error {
	ret := _mock.Called(path, locks)

	if len(ret) == 0 {
		panic("no return value specified for SetMediaFieldLocks")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(path, locks)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetMediaFieldLocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMediaFieldLocks'
type MockSubtitleStore_SetMediaFieldLocks_Call struct {
	*mock.Call
}

// SetMediaFieldLocks is a helper method to define mock.On call
//   - path string
//   - locks string
func (_e *MockSubtitleStore_Expecter) SetMediaFieldLocks(path interface{}, locks interface{}) *MockSubtitleStore_SetMediaFieldLocks_Call {
	return &MockSubtitleStore_SetMediaFieldLocks_Call{Call: _e.mock.On("SetMediaFieldLocks", path, locks)}
}

func (_c *MockSubtitleStore_SetMediaFieldLocks_Call) Run(run func(path string, locks string)) *MockSubtitleStore_SetMediaFieldLocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetMediaFieldLocks_Call) Return(err error) *MockSubtitleStore_SetMediaFieldLocks_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetMediaFieldLocks_Call) RunAndReturn(run func(path string, locks string) error) *MockSubtitleStore_SetMediaFieldLocks_Call {
	_c.Call.Return(run)
	return _c
}

// SetMediaReleaseGroup provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetMediaReleaseGroup(path string, group string) error {
	ret := _mock.Called(path, group)

	if len(ret) == 0 {
		panic("no return value specified for SetMediaReleaseGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(path, group)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetMediaReleaseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMediaReleaseGroup'
type MockSubtitleStore_SetMediaReleaseGroup_Call struct {
	*mock.Call
}

// SetMediaReleaseGroup is a helper method to define mock.On call
//   - path string
//   - group string
func (_e *MockSubtitleStore_Expecter) SetMediaReleaseGroup(path interface{}, group interface{}) *MockSubtitleStore_SetMediaReleaseGroup_Call {
	return &MockSubtitleStore_SetMediaReleaseGroup_Call{Call: _e.mock.On("SetMediaReleaseGroup", path, group)}
}

func (_c *MockSubtitleStore_SetMediaReleaseGroup_Call) Run(run func(path string, group string)) *MockSubtitleStore_SetMediaReleaseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetMediaReleaseGroup_Call) Return(err error) *MockSubtitleStore_SetMediaReleaseGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetMediaReleaseGroup_Call) RunAndReturn(run func(path string, group string) error) *MockSubtitleStore_SetMediaReleaseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SetMediaTitle provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) SetMediaTitle(path string, title string) error {
	ret := _mock.Called(path, title)

	if len(ret) == 0 {
		panic("no return value specified for SetMediaTitle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(path, title)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_SetMediaTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMediaTitle'
type MockSubtitleStore_SetMediaTitle_Call struct {
	*mock.Call
}

// SetMediaTitle is a helper method to define mock.On call
//   - path string
//   - title string
func (_e *MockSubtitleStore_Expecter) SetMediaTitle(path interface{}, title interface{}) *MockSubtitleStore_SetMediaTitle_Call {
	return &MockSubtitleStore_SetMediaTitle_Call{Call: _e.mock.On("SetMediaTitle", path, title)}
}

func (_c *MockSubtitleStore_SetMediaTitle_Call) Run(run func(path string, title string)) *MockSubtitleStore_SetMediaTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_SetMediaTitle_Call) Return(err error) *MockSubtitleStore_SetMediaTitle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_SetMediaTitle_Call) RunAndReturn(run func(path string, title string) error) *MockSubtitleStore_SetMediaTitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLanguageProfile provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateLanguageProfile(profile *database.LanguageProfile) error {
	ret := _mock.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLanguageProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.LanguageProfile) error); ok {
		r0 = returnFunc(profile)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateLanguageProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLanguageProfile'
type MockSubtitleStore_UpdateLanguageProfile_Call struct {
	*mock.Call
}

// UpdateLanguageProfile is a helper method to define mock.On call
//   - profile *database.LanguageProfile
func (_e *MockSubtitleStore_Expecter) UpdateLanguageProfile(profile interface{}) *MockSubtitleStore_UpdateLanguageProfile_Call {
	return &MockSubtitleStore_UpdateLanguageProfile_Call{Call: _e.mock.On("UpdateLanguageProfile", profile)}
}

func (_c *MockSubtitleStore_UpdateLanguageProfile_Call) Run(run func(profile *database.LanguageProfile)) *MockSubtitleStore_UpdateLanguageProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.LanguageProfile
		if args[0] != nil {
			arg0 = args[0].(*database.LanguageProfile)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateLanguageProfile_Call) Return(err error) *MockSubtitleStore_UpdateLanguageProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateLanguageProfile_Call) RunAndReturn(run func(profile *database.LanguageProfile) error) *MockSubtitleStore_UpdateLanguageProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMonitoredItem provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateMonitoredItem(rec *database.MonitoredItem) error {
	ret := _mock.Called(rec)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitoredItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*database.MonitoredItem) error); ok {
		r0 = returnFunc(rec)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateMonitoredItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMonitoredItem'
type MockSubtitleStore_UpdateMonitoredItem_Call struct {
	*mock.Call
}

// UpdateMonitoredItem is a helper method to define mock.On call
//   - rec *database.MonitoredItem
func (_e *MockSubtitleStore_Expecter) UpdateMonitoredItem(rec interface{}) *MockSubtitleStore_UpdateMonitoredItem_Call {
	return &MockSubtitleStore_UpdateMonitoredItem_Call{Call: _e.mock.On("UpdateMonitoredItem", rec)}
}

func (_c *MockSubtitleStore_UpdateMonitoredItem_Call) Run(run func(rec *database.MonitoredItem)) *MockSubtitleStore_UpdateMonitoredItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *database.MonitoredItem
		if args[0] != nil {
			arg0 = args[0].(*database.MonitoredItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateMonitoredItem_Call) Return(err error) *MockSubtitleStore_UpdateMonitoredItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateMonitoredItem_Call) RunAndReturn(run func(rec *database.MonitoredItem) error) *MockSubtitleStore_UpdateMonitoredItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubtitleSourceStats provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateSubtitleSourceStats(sourceHash string, downloadCount int, successCount int, avgRating *float64) error {
	ret := _mock.Called(sourceHash, downloadCount, successCount, avgRating)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubtitleSourceStats")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int, *float64) error); ok {
		r0 = returnFunc(sourceHash, downloadCount, successCount, avgRating)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateSubtitleSourceStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubtitleSourceStats'
type MockSubtitleStore_UpdateSubtitleSourceStats_Call struct {
	*mock.Call
}

// UpdateSubtitleSourceStats is a helper method to define mock.On call
//   - sourceHash string
//   - downloadCount int
//   - successCount int
//   - avgRating *float64
func (_e *MockSubtitleStore_Expecter) UpdateSubtitleSourceStats(sourceHash interface{}, downloadCount interface{}, successCount interface{}, avgRating interface{}) *MockSubtitleStore_UpdateSubtitleSourceStats_Call {
	return &MockSubtitleStore_UpdateSubtitleSourceStats_Call{Call: _e.mock.On("UpdateSubtitleSourceStats", sourceHash, downloadCount, successCount, avgRating)}
}

func (_c *MockSubtitleStore_UpdateSubtitleSourceStats_Call) Run(run func(sourceHash string, downloadCount int, successCount int, avgRating *float64)) *MockSubtitleStore_UpdateSubtitleSourceStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 *float64
		if args[3] != nil {
			arg3 = args[3].(*float64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateSubtitleSourceStats_Call) Return(err error) *MockSubtitleStore_UpdateSubtitleSourceStats_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateSubtitleSourceStats_Call) RunAndReturn(run func(sourceHash string, downloadCount int, successCount int, avgRating *float64) error) *MockSubtitleStore_UpdateSubtitleSourceStats_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTag provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateTag(id int64, name string) error {
	ret := _mock.Called(id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = returnFunc(id, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTag'
type MockSubtitleStore_UpdateTag_Call struct {
	*mock.Call
}

// UpdateTag is a helper method to define mock.On call
//   - id int64
//   - name string
func (_e *MockSubtitleStore_Expecter) UpdateTag(id interface{}, name interface{}) *MockSubtitleStore_UpdateTag_Call {
	return &MockSubtitleStore_UpdateTag_Call{Call: _e.mock.On("UpdateTag", id, name)}
}

func (_c *MockSubtitleStore_UpdateTag_Call) Run(run func(id int64, name string)) *MockSubtitleStore_UpdateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateTag_Call) Return(err error) *MockSubtitleStore_UpdateTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateTag_Call) RunAndReturn(run func(id int64, name string) error) *MockSubtitleStore_UpdateTag_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateUserPassword(userID string, passwordHash string) error {
	ret := _mock.Called(userID, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(userID, passwordHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockSubtitleStore_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - userID string
//   - passwordHash string
func (_e *MockSubtitleStore_Expecter) UpdateUserPassword(userID interface{}, passwordHash interface{}) *MockSubtitleStore_UpdateUserPassword_Call {
	return &MockSubtitleStore_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", userID, passwordHash)}
}

func (_c *MockSubtitleStore_UpdateUserPassword_Call) Run(run func(userID string, passwordHash string)) *MockSubtitleStore_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateUserPassword_Call) Return(err error) *MockSubtitleStore_UpdateUserPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateUserPassword_Call) RunAndReturn(run func(userID string, passwordHash string) error) *MockSubtitleStore_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRole provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) UpdateUserRole(username string, role string) error {
	ret := _mock.Called(username, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(username, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubtitleStore_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type MockSubtitleStore_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - username string
//   - role string
func (_e *MockSubtitleStore_Expecter) UpdateUserRole(username interface{}, role interface{}) *MockSubtitleStore_UpdateUserRole_Call {
	return &MockSubtitleStore_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", username, role)}
}

func (_c *MockSubtitleStore_UpdateUserRole_Call) Run(run func(username string, role string)) *MockSubtitleStore_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_UpdateUserRole_Call) Return(err error) *MockSubtitleStore_UpdateUserRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubtitleStore_UpdateUserRole_Call) RunAndReturn(run func(username string, role string) error) *MockSubtitleStore_UpdateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAPIKey provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ValidateAPIKey(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAPIKey")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ValidateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAPIKey'
type MockSubtitleStore_ValidateAPIKey_Call struct {
	*mock.Call
}

// ValidateAPIKey is a helper method to define mock.On call
//   - key string
func (_e *MockSubtitleStore_Expecter) ValidateAPIKey(key interface{}) *MockSubtitleStore_ValidateAPIKey_Call {
	return &MockSubtitleStore_ValidateAPIKey_Call{Call: _e.mock.On("ValidateAPIKey", key)}
}

func (_c *MockSubtitleStore_ValidateAPIKey_Call) Run(run func(key string)) *MockSubtitleStore_ValidateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ValidateAPIKey_Call) Return(s string, err error) *MockSubtitleStore_ValidateAPIKey_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_ValidateAPIKey_Call) RunAndReturn(run func(key string) (string, error)) *MockSubtitleStore_ValidateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateOneTimeToken provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ValidateOneTimeToken(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOneTimeToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ValidateOneTimeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOneTimeToken'
type MockSubtitleStore_ValidateOneTimeToken_Call struct {
	*mock.Call
}

// ValidateOneTimeToken is a helper method to define mock.On call
//   - token string
func (_e *MockSubtitleStore_Expecter) ValidateOneTimeToken(token interface{}) *MockSubtitleStore_ValidateOneTimeToken_Call {
	return &MockSubtitleStore_ValidateOneTimeToken_Call{Call: _e.mock.On("ValidateOneTimeToken", token)}
}

func (_c *MockSubtitleStore_ValidateOneTimeToken_Call) Run(run func(token string)) *MockSubtitleStore_ValidateOneTimeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ValidateOneTimeToken_Call) Return(s string, err error) *MockSubtitleStore_ValidateOneTimeToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_ValidateOneTimeToken_Call) RunAndReturn(run func(token string) (string, error)) *MockSubtitleStore_ValidateOneTimeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function for the type MockSubtitleStore
func (_mock *MockSubtitleStore) ValidateSession(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubtitleStore_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type MockSubtitleStore_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - token string
func (_e *MockSubtitleStore_Expecter) ValidateSession(token interface{}) *MockSubtitleStore_ValidateSession_Call {
	return &MockSubtitleStore_ValidateSession_Call{Call: _e.mock.On("ValidateSession", token)}
}

func (_c *MockSubtitleStore_ValidateSession_Call) Run(run func(token string)) *MockSubtitleStore_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSubtitleStore_ValidateSession_Call) Return(s string, err error) *MockSubtitleStore_ValidateSession_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSubtitleStore_ValidateSession_Call) RunAndReturn(run func(token string) (string, error)) *MockSubtitleStore_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}
