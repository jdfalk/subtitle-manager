// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTaggedEntity creates a new instance of MockTaggedEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaggedEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaggedEntity {
	mock := &MockTaggedEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaggedEntity is an autogenerated mock type for the TaggedEntity type
type MockTaggedEntity struct {
	mock.Mock
}

type MockTaggedEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaggedEntity) EXPECT() *MockTaggedEntity_Expecter {
	return &MockTaggedEntity_Expecter{mock: &_m.Mock}
}

// GetEntityID provides a mock function for the type MockTaggedEntity
func (_mock *MockTaggedEntity) GetEntityID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEntityID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTaggedEntity_GetEntityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityID'
type MockTaggedEntity_GetEntityID_Call struct {
	*mock.Call
}

// GetEntityID is a helper method to define mock.On call
func (_e *MockTaggedEntity_Expecter) GetEntityID() *MockTaggedEntity_GetEntityID_Call {
	return &MockTaggedEntity_GetEntityID_Call{Call: _e.mock.On("GetEntityID")}
}

func (_c *MockTaggedEntity_GetEntityID_Call) Run(run func()) *MockTaggedEntity_GetEntityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaggedEntity_GetEntityID_Call) Return(s string) *MockTaggedEntity_GetEntityID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTaggedEntity_GetEntityID_Call) RunAndReturn(run func() string) *MockTaggedEntity_GetEntityID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntityType provides a mock function for the type MockTaggedEntity
func (_mock *MockTaggedEntity) GetEntityType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEntityType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTaggedEntity_GetEntityType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntityType'
type MockTaggedEntity_GetEntityType_Call struct {
	*mock.Call
}

// GetEntityType is a helper method to define mock.On call
func (_e *MockTaggedEntity_Expecter) GetEntityType() *MockTaggedEntity_GetEntityType_Call {
	return &MockTaggedEntity_GetEntityType_Call{Call: _e.mock.On("GetEntityType")}
}

func (_c *MockTaggedEntity_GetEntityType_Call) Run(run func()) *MockTaggedEntity_GetEntityType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaggedEntity_GetEntityType_Call) Return(s string) *MockTaggedEntity_GetEntityType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTaggedEntity_GetEntityType_Call) RunAndReturn(run func() string) *MockTaggedEntity_GetEntityType_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockTaggedEntity
func (_mock *MockTaggedEntity) GetTags() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockTaggedEntity_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockTaggedEntity_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
func (_e *MockTaggedEntity_Expecter) GetTags() *MockTaggedEntity_GetTags_Call {
	return &MockTaggedEntity_GetTags_Call{Call: _e.mock.On("GetTags")}
}

func (_c *MockTaggedEntity_GetTags_Call) Run(run func()) *MockTaggedEntity_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaggedEntity_GetTags_Call) Return(strings []string) *MockTaggedEntity_GetTags_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockTaggedEntity_GetTags_Call) RunAndReturn(run func() []string) *MockTaggedEntity_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// SetTags provides a mock function for the type MockTaggedEntity
func (_mock *MockTaggedEntity) SetTags(strings []string) {
	_mock.Called(strings)
	return
}

// MockTaggedEntity_SetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTags'
type MockTaggedEntity_SetTags_Call struct {
	*mock.Call
}

// SetTags is a helper method to define mock.On call
//   - strings []string
func (_e *MockTaggedEntity_Expecter) SetTags(strings interface{}) *MockTaggedEntity_SetTags_Call {
	return &MockTaggedEntity_SetTags_Call{Call: _e.mock.On("SetTags", strings)}
}

func (_c *MockTaggedEntity_SetTags_Call) Run(run func(strings []string)) *MockTaggedEntity_SetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTaggedEntity_SetTags_Call) Return() *MockTaggedEntity_SetTags_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedEntity_SetTags_Call) RunAndReturn(run func(strings []string)) *MockTaggedEntity_SetTags_Call {
	_c.Run(run)
	return _c
}
