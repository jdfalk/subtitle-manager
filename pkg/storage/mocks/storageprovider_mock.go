// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageProvider creates a new instance of MockStorageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageProvider {
	mock := &MockStorageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageProvider is an autogenerated mock type for the StorageProvider type
type MockStorageProvider struct {
	mock.Mock
}

type MockStorageProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageProvider) EXPECT() *MockStorageProvider_Expecter {
	return &MockStorageProvider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorageProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorageProvider_Expecter) Close() *MockStorageProvider_Close_Call {
	return &MockStorageProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorageProvider_Close_Call) Run(run func()) *MockStorageProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageProvider_Close_Call) Return(err error) *MockStorageProvider_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageProvider_Close_Call) RunAndReturn(run func() error) *MockStorageProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) Delete(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorageProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorageProvider_Expecter) Delete(ctx interface{}, key interface{}) *MockStorageProvider_Delete_Call {
	return &MockStorageProvider_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockStorageProvider_Delete_Call) Run(run func(ctx context.Context, key string)) *MockStorageProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_Delete_Call) Return(err error) *MockStorageProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageProvider_Delete_Call) RunAndReturn(run func(ctx context.Context, key string) error) *MockStorageProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) Exists(ctx context.Context, key string) (bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStorageProvider_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorageProvider_Expecter) Exists(ctx interface{}, key interface{}) *MockStorageProvider_Exists_Call {
	return &MockStorageProvider_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockStorageProvider_Exists_Call) Run(run func(ctx context.Context, key string)) *MockStorageProvider_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_Exists_Call) Return(b bool, err error) *MockStorageProvider_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStorageProvider_Exists_Call) RunAndReturn(run func(ctx context.Context, key string) (bool, error)) *MockStorageProvider_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) GetURL(ctx context.Context, key string, expiry time.Duration) (string, error) {
	ret := _mock.Called(ctx, key, expiry)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, key, expiry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, key, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, key, expiry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockStorageProvider_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiry time.Duration
func (_e *MockStorageProvider_Expecter) GetURL(ctx interface{}, key interface{}, expiry interface{}) *MockStorageProvider_GetURL_Call {
	return &MockStorageProvider_GetURL_Call{Call: _e.mock.On("GetURL", ctx, key, expiry)}
}

func (_c *MockStorageProvider_GetURL_Call) Run(run func(ctx context.Context, key string, expiry time.Duration)) *MockStorageProvider_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageProvider_GetURL_Call) Return(s string, err error) *MockStorageProvider_GetURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorageProvider_GetURL_Call) RunAndReturn(run func(ctx context.Context, key string, expiry time.Duration) (string, error)) *MockStorageProvider_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) List(ctx context.Context, prefix string) ([]string, error) {
	ret := _mock.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorageProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockStorageProvider_Expecter) List(ctx interface{}, prefix interface{}) *MockStorageProvider_List_Call {
	return &MockStorageProvider_List_Call{Call: _e.mock.On("List", ctx, prefix)}
}

func (_c *MockStorageProvider_List_Call) Run(run func(ctx context.Context, prefix string)) *MockStorageProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_List_Call) Return(strings []string, err error) *MockStorageProvider_List_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockStorageProvider_List_Call) RunAndReturn(run func(ctx context.Context, prefix string) ([]string, error)) *MockStorageProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) Retrieve(ctx context.Context, key string) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockStorageProvider_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorageProvider_Expecter) Retrieve(ctx interface{}, key interface{}) *MockStorageProvider_Retrieve_Call {
	return &MockStorageProvider_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, key)}
}

func (_c *MockStorageProvider_Retrieve_Call) Run(run func(ctx context.Context, key string)) *MockStorageProvider_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_Retrieve_Call) Return(readCloser io.ReadCloser, err error) *MockStorageProvider_Retrieve_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockStorageProvider_Retrieve_Call) RunAndReturn(run func(ctx context.Context, key string) (io.ReadCloser, error)) *MockStorageProvider_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) Store(ctx context.Context, key string, content io.Reader, contentType string) error {
	ret := _mock.Called(ctx, key, content, contentType)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, string) error); ok {
		r0 = returnFunc(ctx, key, content, contentType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageProvider_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockStorageProvider_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - content io.Reader
//   - contentType string
func (_e *MockStorageProvider_Expecter) Store(ctx interface{}, key interface{}, content interface{}, contentType interface{}) *MockStorageProvider_Store_Call {
	return &MockStorageProvider_Store_Call{Call: _e.mock.On("Store", ctx, key, content, contentType)}
}

func (_c *MockStorageProvider_Store_Call) Run(run func(ctx context.Context, key string, content io.Reader, contentType string)) *MockStorageProvider_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorageProvider_Store_Call) Return(err error) *MockStorageProvider_Store_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageProvider_Store_Call) RunAndReturn(run func(ctx context.Context, key string, content io.Reader, contentType string) error) *MockStorageProvider_Store_Call {
	_c.Call.Return(run)
	return _c
}
