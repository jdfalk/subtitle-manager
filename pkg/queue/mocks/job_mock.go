// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jdfalk/gcommon/sdks/go/v1/queue"
	queue0 "github.com/jdfalk/subtitle-manager/pkg/queue"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJob creates a new instance of MockJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJob {
	mock := &MockJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJob is an autogenerated mock type for the Job type
type MockJob struct {
	mock.Mock
}

type MockJob_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJob) EXPECT() *MockJob_Expecter {
	return &MockJob_Expecter{mock: &_m.Mock}
}

// Description provides a mock function for the type MockJob
func (_mock *MockJob) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockJob_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockJob_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockJob_Expecter) Description() *MockJob_Description_Call {
	return &MockJob_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockJob_Description_Call) Run(run func()) *MockJob_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Description_Call) Return(s string) *MockJob_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockJob_Description_Call) RunAndReturn(run func() string) *MockJob_Description_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockJob
func (_mock *MockJob) Execute(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJob_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockJob_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJob_Expecter) Execute(ctx interface{}) *MockJob_Execute_Call {
	return &MockJob_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockJob_Execute_Call) Run(run func(ctx context.Context)) *MockJob_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJob_Execute_Call) Return(err error) *MockJob_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJob_Execute_Call) RunAndReturn(run func(ctx context.Context) error) *MockJob_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockJob
func (_mock *MockJob) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockJob_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockJob_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockJob_Expecter) ID() *MockJob_ID_Call {
	return &MockJob_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockJob_ID_Call) Run(run func()) *MockJob_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_ID_Call) Return(s string) *MockJob_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockJob_ID_Call) RunAndReturn(run func() string) *MockJob_ID_Call {
	_c.Call.Return(run)
	return _c
}

// QueueMessage provides a mock function for the type MockJob
func (_mock *MockJob) QueueMessage() (*queue.QueueMessage, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueMessage")
	}

	var r0 *queue.QueueMessage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*queue.QueueMessage, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *queue.QueueMessage); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.QueueMessage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJob_QueueMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueMessage'
type MockJob_QueueMessage_Call struct {
	*mock.Call
}

// QueueMessage is a helper method to define mock.On call
func (_e *MockJob_Expecter) QueueMessage() *MockJob_QueueMessage_Call {
	return &MockJob_QueueMessage_Call{Call: _e.mock.On("QueueMessage")}
}

func (_c *MockJob_QueueMessage_Call) Run(run func()) *MockJob_QueueMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_QueueMessage_Call) Return(queueMessage *queue.QueueMessage, err error) *MockJob_QueueMessage_Call {
	_c.Call.Return(queueMessage, err)
	return _c
}

func (_c *MockJob_QueueMessage_Call) RunAndReturn(run func() (*queue.QueueMessage, error)) *MockJob_QueueMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockJob
func (_mock *MockJob) Type() queue0.JobType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 queue0.JobType
	if returnFunc, ok := ret.Get(0).(func() queue0.JobType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(queue0.JobType)
	}
	return r0
}

// MockJob_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockJob_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockJob_Expecter) Type() *MockJob_Type_Call {
	return &MockJob_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockJob_Type_Call) Run(run func()) *MockJob_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Type_Call) Return(jobType queue0.JobType) *MockJob_Type_Call {
	_c.Call.Return(jobType)
	return _c
}

func (_c *MockJob_Type_Call) RunAndReturn(run func() queue0.JobType) *MockJob_Type_Call {
	_c.Call.Return(run)
	return _c
}
