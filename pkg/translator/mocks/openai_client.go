// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	openai "github.com/sashabaranov/go-openai"
	mock "github.com/stretchr/testify/mock"
)

// OpenAIClient is an autogenerated mock type for the OpenAIClient type
type OpenAIClient struct {
	mock.Mock
}

type OpenAIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenAIClient) EXPECT() *OpenAIClient_Expecter {
	return &OpenAIClient_Expecter{mock: &_m.Mock}
}

// CreateChatCompletion provides a mock function with given fields: ctx, req
func (_m *OpenAIClient) CreateChatCompletion(ctx context.Context, req openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatCompletion")
	}

	var r0 openai.ChatCompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) openai.ChatCompletionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, openai.ChatCompletionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenAIClient_CreateChatCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChatCompletion'
type OpenAIClient_CreateChatCompletion_Call struct {
	*mock.Call
}

// CreateChatCompletion is a helper method to define mock.On call
//   - ctx context.Context
//   - req openai.ChatCompletionRequest
func (_e *OpenAIClient_Expecter) CreateChatCompletion(ctx interface{}, req interface{}) *OpenAIClient_CreateChatCompletion_Call {
	return &OpenAIClient_CreateChatCompletion_Call{Call: _e.mock.On("CreateChatCompletion", ctx, req)}
}

func (_c *OpenAIClient_CreateChatCompletion_Call) Run(run func(ctx context.Context, req openai.ChatCompletionRequest)) *OpenAIClient_CreateChatCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(openai.ChatCompletionRequest))
	})
	return _c
}

func (_c *OpenAIClient_CreateChatCompletion_Call) Return(_a0 openai.ChatCompletionResponse, _a1 error) *OpenAIClient_CreateChatCompletion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenAIClient_CreateChatCompletion_Call) RunAndReturn(run func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)) *OpenAIClient_CreateChatCompletion_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenAIClient creates a new instance of OpenAIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAIClient {
	mock := &OpenAIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
