// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/sashabaranov/go-openai"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOpenAIClient creates a new instance of MockOpenAIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOpenAIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOpenAIClient {
	mock := &MockOpenAIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOpenAIClient is an autogenerated mock type for the OpenAIClient type
type MockOpenAIClient struct {
	mock.Mock
}

type MockOpenAIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpenAIClient) EXPECT() *MockOpenAIClient_Expecter {
	return &MockOpenAIClient_Expecter{mock: &_m.Mock}
}

// CreateChatCompletion provides a mock function for the type MockOpenAIClient
func (_mock *MockOpenAIClient) CreateChatCompletion(ctx context.Context, req openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatCompletion")
	}

	var r0 openai.ChatCompletionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionRequest) openai.ChatCompletionResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(openai.ChatCompletionResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, openai.ChatCompletionRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOpenAIClient_CreateChatCompletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChatCompletion'
type MockOpenAIClient_CreateChatCompletion_Call struct {
	*mock.Call
}

// CreateChatCompletion is a helper method to define mock.On call
//   - ctx context.Context
//   - req openai.ChatCompletionRequest
func (_e *MockOpenAIClient_Expecter) CreateChatCompletion(ctx interface{}, req interface{}) *MockOpenAIClient_CreateChatCompletion_Call {
	return &MockOpenAIClient_CreateChatCompletion_Call{Call: _e.mock.On("CreateChatCompletion", ctx, req)}
}

func (_c *MockOpenAIClient_CreateChatCompletion_Call) Run(run func(ctx context.Context, req openai.ChatCompletionRequest)) *MockOpenAIClient_CreateChatCompletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 openai.ChatCompletionRequest
		if args[1] != nil {
			arg1 = args[1].(openai.ChatCompletionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOpenAIClient_CreateChatCompletion_Call) Return(chatCompletionResponse openai.ChatCompletionResponse, err error) *MockOpenAIClient_CreateChatCompletion_Call {
	_c.Call.Return(chatCompletionResponse, err)
	return _c
}

func (_c *MockOpenAIClient_CreateChatCompletion_Call) RunAndReturn(run func(ctx context.Context, req openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error)) *MockOpenAIClient_CreateChatCompletion_Call {
	_c.Call.Return(run)
	return _c
}
