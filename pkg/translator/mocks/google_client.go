// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"cloud.google.com/go/translate"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/text/language"
)

// NewMockGoogleClient creates a new instance of MockGoogleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleClient {
	mock := &MockGoogleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGoogleClient is an autogenerated mock type for the GoogleClient type
type MockGoogleClient struct {
	mock.Mock
}

type MockGoogleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleClient) EXPECT() *MockGoogleClient_Expecter {
	return &MockGoogleClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockGoogleClient
func (_mock *MockGoogleClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGoogleClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockGoogleClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockGoogleClient_Expecter) Close() *MockGoogleClient_Close_Call {
	return &MockGoogleClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockGoogleClient_Close_Call) Run(run func()) *MockGoogleClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGoogleClient_Close_Call) Return(err error) *MockGoogleClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGoogleClient_Close_Call) RunAndReturn(run func() error) *MockGoogleClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Translate provides a mock function for the type MockGoogleClient
func (_mock *MockGoogleClient) Translate(ctx context.Context, src []string, target language.Tag, opts *translate.Options) ([]translate.Translation, error) {
	ret := _mock.Called(ctx, src, target, opts)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 []translate.Translation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) ([]translate.Translation, error)); ok {
		return returnFunc(ctx, src, target, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) []translate.Translation); ok {
		r0 = returnFunc(ctx, src, target, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]translate.Translation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, language.Tag, *translate.Options) error); ok {
		r1 = returnFunc(ctx, src, target, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGoogleClient_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type MockGoogleClient_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - ctx context.Context
//   - src []string
//   - target language.Tag
//   - opts *translate.Options
func (_e *MockGoogleClient_Expecter) Translate(ctx interface{}, src interface{}, target interface{}, opts interface{}) *MockGoogleClient_Translate_Call {
	return &MockGoogleClient_Translate_Call{Call: _e.mock.On("Translate", ctx, src, target, opts)}
}

func (_c *MockGoogleClient_Translate_Call) Run(run func(ctx context.Context, src []string, target language.Tag, opts *translate.Options)) *MockGoogleClient_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 language.Tag
		if args[2] != nil {
			arg2 = args[2].(language.Tag)
		}
		var arg3 *translate.Options
		if args[3] != nil {
			arg3 = args[3].(*translate.Options)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGoogleClient_Translate_Call) Return(translations []translate.Translation, err error) *MockGoogleClient_Translate_Call {
	_c.Call.Return(translations, err)
	return _c
}

func (_c *MockGoogleClient_Translate_Call) RunAndReturn(run func(ctx context.Context, src []string, target language.Tag, opts *translate.Options) ([]translate.Translation, error)) *MockGoogleClient_Translate_Call {
	_c.Call.Return(run)
	return _c
}
