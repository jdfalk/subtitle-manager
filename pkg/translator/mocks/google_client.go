// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	language "golang.org/x/text/language"

	translate "cloud.google.com/go/translate"
)

// GoogleClient is an autogenerated mock type for the GoogleClient type
type GoogleClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *GoogleClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Translate provides a mock function with given fields: ctx, src, target, opts
func (_m *GoogleClient) Translate(ctx context.Context, src []string, target language.Tag, opts *translate.Options) ([]translate.Translation, error) {
	ret := _m.Called(ctx, src, target, opts)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 []translate.Translation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) ([]translate.Translation, error)); ok {
		return rf(ctx, src, target, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) []translate.Translation); ok {
		r0 = rf(ctx, src, target, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]translate.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, language.Tag, *translate.Options) error); ok {
		r1 = rf(ctx, src, target, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGoogleClient creates a new instance of GoogleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleClient {
	mock := &GoogleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
