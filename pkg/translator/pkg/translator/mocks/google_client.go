// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	language "golang.org/x/text/language"

	translate "cloud.google.com/go/translate"
)

// GoogleClient is an autogenerated mock type for the GoogleClient type
type GoogleClient struct {
	mock.Mock
}

type GoogleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GoogleClient) EXPECT() *GoogleClient_Expecter {
	return &GoogleClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *GoogleClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GoogleClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type GoogleClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *GoogleClient_Expecter) Close() *GoogleClient_Close_Call {
	return &GoogleClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *GoogleClient_Close_Call) Run(run func()) *GoogleClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GoogleClient_Close_Call) Return(_a0 error) *GoogleClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GoogleClient_Close_Call) RunAndReturn(run func() error) *GoogleClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Translate provides a mock function with given fields: ctx, src, target, opts
func (_m *GoogleClient) Translate(ctx context.Context, src []string, target language.Tag, opts *translate.Options) ([]translate.Translation, error) {
	ret := _m.Called(ctx, src, target, opts)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 []translate.Translation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) ([]translate.Translation, error)); ok {
		return rf(ctx, src, target, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, language.Tag, *translate.Options) []translate.Translation); ok {
		r0 = rf(ctx, src, target, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]translate.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, language.Tag, *translate.Options) error); ok {
		r1 = rf(ctx, src, target, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleClient_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type GoogleClient_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - ctx context.Context
//   - src []string
//   - target language.Tag
//   - opts *translate.Options
func (_e *GoogleClient_Expecter) Translate(ctx interface{}, src interface{}, target interface{}, opts interface{}) *GoogleClient_Translate_Call {
	return &GoogleClient_Translate_Call{Call: _e.mock.On("Translate", ctx, src, target, opts)}
}

func (_c *GoogleClient_Translate_Call) Run(run func(ctx context.Context, src []string, target language.Tag, opts *translate.Options)) *GoogleClient_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(language.Tag), args[3].(*translate.Options))
	})
	return _c
}

func (_c *GoogleClient_Translate_Call) Return(_a0 []translate.Translation, _a1 error) *GoogleClient_Translate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoogleClient_Translate_Call) RunAndReturn(run func(context.Context, []string, language.Tag, *translate.Options) ([]translate.Translation, error)) *GoogleClient_Translate_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoogleClient creates a new instance of GoogleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleClient {
	mock := &GoogleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
