{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Buf Generate with Output",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "buf",
        "generate"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Generate Module",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "buf",
        "generate",
        "--module",
        "${input:module}"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Lint with Output",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "buf",
        "lint"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Lint Module",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "buf",
        "lint",
        "--module",
        "${input:module}"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Add All",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "add"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Add Selective",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "add",
        "${input:filePattern}"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Push",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "push"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Status",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "status"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Add All Auto",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "add",
        "."
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Commit Auto",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "commit",
        "-m",
        "fix: systematic protobuf import fixes"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Check All Proto Files",
      "type": "shell",
      "command": "sh",
      "args": [
        "-c",
        "find pkg -name '*.proto' -type f | while read file; do echo \"=== $file ===\"; buf lint --path \"$file\" 2>&1 | grep -E '(error|Error|file does not exist)' || echo 'OK'; done"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Generate with Args File",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "--args-file",
        "copilot-util-args",
        "buf",
        "generate"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Buf Lint with Args File",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "--args-file",
        "copilot-util-args",
        "buf",
        "lint"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Add All with Args File",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "--args-file",
        "copilot-util-args",
        "git",
        "add"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Push with Args File",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "--args-file",
        "copilot-util-args",
        "git",
        "push"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Status with Args File",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "--args-file",
        "copilot-util-args",
        "git",
        "status"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Git Commit Dependabot Fix",
      "type": "shell",
      "command": "copilot-agent-util",
      "args": [
        "git",
        "commit",
        "-m",
        "fix(deps): resolve dependabot.yml merge conflicts and add comprehensive configuration\n\nFixed merge conflicts in dependabot.yml and updated with complete language-aware configuration supporting Go, Docker, GitHub Actions, npm (webui), and Python scripts.\n\nFiles changed:\n- .github/dependabot.yml - Resolved conflicts and added comprehensive multi-language support"
      ]
    },
    {
      "label": "Issue Analysis - High Priority",
      "type": "shell",
      "command": "python3",
      "args": [
        "scripts/issue_automation_wrapper.py",
        "analyze",
        "--output",
        "summary"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Issue Analysis - Specific Issue",
      "type": "shell",
      "command": "python3",
      "args": [
        "scripts/issue_automation_wrapper.py",
        "analyze",
        "--issue-number",
        "${input:issueNumber}",
        "--output",
        "detailed"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Issue Analysis - Repository Scan",
      "type": "shell",
      "command": "python3",
      "args": [
        "scripts/issue_automation_wrapper.py",
        "analyze",
        "--min-priority",
        "${input:minPriority}",
        "--output",
        "summary"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    },
    {
      "label": "Issue Status Check",
      "type": "shell",
      "command": "python3",
      "args": [
        "scripts/issue_automation_wrapper.py",
        "status"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": "build",
      "isBackground": false,
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "module",
      "description": "Module to generate (e.g., auth, config, metrics)",
      "default": "auth",
      "type": "promptString"
    },
    {
      "id": "filePattern",
      "description": "File pattern to add (e.g., '*.proto', 'pkg/auth/', '**/*.go')",
      "default": "*.proto",
      "type": "promptString"
    },
    {
      "id": "issueNumber",
      "description": "GitHub issue number to analyze",
      "type": "promptString"
    },
    {
      "id": "minPriority",
      "description": "Minimum priority score for analysis (default: 60)",
      "default": "60",
      "type": "promptString"
    }
  ]
}
