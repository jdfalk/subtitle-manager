{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Go Build",
            "type": "shell",
            "command": "mkdir -p logs && go build -o bin/subtitle-manager ./cmd/subtitle-manager > logs/go_build.log 2>&1 && echo 'SUCCESS: go build completed' >> logs/go_build.log || echo 'FAILED: go build failed' >> logs/go_build.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": [
                "$go"
            ]
        },
        {
            "label": "Go Test",
            "type": "shell",
            "command": "mkdir -p logs && go test ./... > logs/go_test.log 2>&1 && echo 'SUCCESS: go test completed' >> logs/go_test.log || echo 'FAILED: go test failed' >> logs/go_test.log",
            "group": "test",
            "isBackground": false,
            "problemMatcher": [
                "$go"
            ]
        },
        {
            "label": "Go Run",
            "type": "shell",
            "command": "mkdir -p logs && go run ./cmd/subtitle-manager > logs/go_run.log 2>&1 && echo 'SUCCESS: go run completed' >> logs/go_run.log || echo 'FAILED: go run failed' >> logs/go_run.log",
            "group": "build",
            "isBackground": true,
            "problemMatcher": [
                "$go"
            ]
        },
        {
            "label": "Docker Build",
            "type": "shell",
            "command": "mkdir -p logs && docker build -t subtitle-manager . > logs/docker_build.log 2>&1 && echo 'SUCCESS: docker build completed' >> logs/docker_build.log || echo 'FAILED: docker build failed' >> logs/docker_build.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Git Add All",
            "type": "shell",
            "command": "mkdir -p logs && git add . > logs/git_add.log 2>&1 && echo 'SUCCESS: git add completed' >> logs/git_add.log || echo 'FAILED: git add failed' >> logs/git_add.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Git Add Selective",
            "type": "shell",
            "command": "mkdir -p logs && PATTERN='${input:filePattern}'; git add $PATTERN > logs/git_add_selective.log 2>&1 && echo \"SUCCESS: git add completed for pattern: $PATTERN\" >> logs/git_add_selective.log || echo \"FAILED: git add failed for pattern: $PATTERN\" >> logs/git_add_selective.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Git Commit",
            "type": "shell",
            "command": "mkdir -p logs && MESSAGE='${input:commitMessage}'; git commit -m \"$MESSAGE\" > logs/git_commit.log 2>&1 && echo 'SUCCESS: git commit completed' >> logs/git_commit.log || echo 'FAILED: git commit failed' >> logs/git_commit.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Git Push",
            "type": "shell",
            "command": "mkdir -p logs && git push > logs/git_push.log 2>&1 && echo 'SUCCESS: git push completed' >> logs/git_push.log || echo 'FAILED: git push failed' >> logs/git_push.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        },
        {
            "label": "Git Status",
            "type": "shell",
            "command": "mkdir -p logs && git status --porcelain > logs/git_status.log 2>&1 && echo '--- Git Status Summary ---' >> logs/git_status.log && git status >> logs/git_status.log",
            "group": "build",
            "isBackground": false,
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "commitMessage",
            "description": "Commit message",
            "default": "fix: update project files",
            "type": "promptString"
        },
        {
            "id": "filePattern",
            "description": "File pattern to add (e.g., '*.go', 'cmd/', '**/*.proto')",
            "default": "*.go",
            "type": "promptString"
        }
    ]
}
