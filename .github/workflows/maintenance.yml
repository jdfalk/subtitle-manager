# file: .github/workflows/maintenance-consolidated.yml
# version: 1.0.0
# guid: m4i5n6t7-e8n9-a0b1-c2d3-e4f5a6b7c8d9

name: Maintenance

on:
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM UTC
    - cron: "0 6 1 * *" # Monthly on 1st at 6 AM UTC
  workflow_dispatch:
    inputs:
      tasks:
        description: "Maintenance tasks to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - stale-issues
          - dependencies
          - cleanup
          - security-updates
      dry_run:
        description: "Dry run mode (show what would be done)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  security-events: read

concurrency:
  group: maintenance-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: "1.24"
  NODE_VERSION: "22"
  PYTHON_VERSION: "3.12"

jobs:
  # Detect project type and what maintenance is needed
  detect-project:
    name: Detect Project Configuration
    runs-on: ubuntu-latest
    outputs:
      has_go: ${{ steps.detect.outputs.has_go }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_python: ${{ steps.detect.outputs.has_python }}
      has_rust: ${{ steps.detect.outputs.has_rust }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
      should_run_stale: ${{ steps.schedule.outputs.should_run_stale }}
      should_run_dependencies: ${{ steps.schedule.outputs.should_run_dependencies }}
      should_run_cleanup: ${{ steps.schedule.outputs.should_run_cleanup }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect project type
        id: detect
        run: |
          has_go="false"
          has_node="false"
          has_python="false"
          has_rust="false"
          has_docker="false"

          [ -f "go.mod" ] && has_go="true"
          [ -f "package.json" ] && has_node="true"
          [ -f "requirements.txt" ] || [ -f "setup.py" ] || [ -f "pyproject.toml" ] && has_python="true"
          [ -f "Cargo.toml" ] && has_rust="true"
          [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ] && has_docker="true"

          echo "has_go=$has_go" >> $GITHUB_OUTPUT
          echo "has_node=$has_node" >> $GITHUB_OUTPUT
          echo "has_python=$has_python" >> $GITHUB_OUTPUT
          echo "has_rust=$has_rust" >> $GITHUB_OUTPUT
          echo "has_docker=$has_docker" >> $GITHUB_OUTPUT

      - name: Determine schedule-based tasks
        id: schedule
        run: |
          tasks="${{ github.event.inputs.tasks || 'all' }}"
          should_run_stale="false"
          should_run_dependencies="false"
          should_run_cleanup="false"

          if [ "$tasks" = "all" ] || [ "$tasks" = "stale-issues" ]; then
            should_run_stale="true"
          fi

          if [ "$tasks" = "all" ] || [ "$tasks" = "dependencies" ]; then
            should_run_dependencies="true"
          fi

          if [ "$tasks" = "all" ] || [ "$tasks" = "cleanup" ]; then
            should_run_cleanup="true"
          fi

          echo "should_run_stale=$should_run_stale" >> $GITHUB_OUTPUT
          echo "should_run_dependencies=$should_run_dependencies" >> $GITHUB_OUTPUT
          echo "should_run_cleanup=$should_run_cleanup" >> $GITHUB_OUTPUT

  # Manage stale issues and PRs
  stale-management:
    name: Stale Issues & PRs
    runs-on: ubuntu-latest
    needs: detect-project
    if: needs.detect-project.outputs.should_run_stale == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Handle stale issues and PRs
        uses: actions/stale@v9
        with:
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had
            recent activity. It will be closed if no further activity occurs within 7 days.

            If this is still relevant, please:
            - Add a comment to keep it open
            - Remove the `stale` label
            - Add appropriate labels or milestone

            Thank you for your contributions! üôè
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had
            recent activity. It will be closed if no further activity occurs within 7 days.

            If this is still relevant, please:
            - Rebase on the latest main branch
            - Add a comment explaining the current status
            - Remove the `stale` label

            Thank you for your contributions! üôè
          close-issue-message: |
            This issue was automatically closed due to inactivity.

            If you believe this was closed in error, please reopen it and provide
            the requested information or updates.
          close-pr-message: |
            This pull request was automatically closed due to inactivity.

            If you'd like to continue this work, please:
            - Reopen this PR or create a new one
            - Rebase on the latest main branch
            - Ensure all checks pass
          days-before-stale: 60
          days-before-close: 7
          stale-issue-label: "stale"
          stale-pr-label: "stale"
          exempt-issue-labels: "pinned,security,enhancement"
          exempt-pr-labels: "pinned,security,work-in-progress"
          operations-per-run: 100
          remove-stale-when-updated: true
          debug-only: ${{ github.event.inputs.dry_run == 'true' }}

  # Update dependencies
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    needs: detect-project
    if: needs.detect-project.outputs.should_run_dependencies == 'true'
    strategy:
      matrix:
        include:
          - language: go
            condition: ${{ needs.detect-project.outputs.has_go }}
          - language: node
            condition: ${{ needs.detect-project.outputs.has_node }}
          - language: python
            condition: ${{ needs.detect-project.outputs.has_python }}
          - language: rust
            condition: ${{ needs.detect-project.outputs.has_rust }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        if: matrix.condition == 'true'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        if: matrix.language == 'go' && matrix.condition == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        if: matrix.language == 'node' && matrix.condition == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        if: matrix.language == 'python' && matrix.condition == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Rust
        if: matrix.language == 'rust' && matrix.condition == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Update Go dependencies
        if: matrix.language == 'go' && matrix.condition == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would update Go dependencies"
            go list -u -m all
          else
            go get -u ./...
            go mod tidy

            if ! git diff --quiet; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add go.mod go.sum
              git commit -m "chore: update Go dependencies"
              git push
            fi
          fi

      - name: Update Node.js dependencies
        if: matrix.language == 'node' && matrix.condition == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would update Node.js dependencies"
            npm outdated || true
          else
            npm update

            if ! git diff --quiet; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add package*.json
              git commit -m "chore: update Node.js dependencies"
              git push
            fi
          fi

      - name: Update Python dependencies
        if: matrix.language == 'python' && matrix.condition == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would update Python dependencies"
            pip list --outdated
          else
            if [ -f "requirements.txt" ]; then
              pip install -U pip-tools
              pip-compile --upgrade requirements.in

              if ! git diff --quiet; then
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add requirements.txt
                git commit -m "chore: update Python dependencies"
                git push
              fi
            fi
          fi

      - name: Update Rust dependencies
        if: matrix.language == 'rust' && matrix.condition == 'true'
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "DRY RUN: Would update Rust dependencies"
            cargo outdated
          else
            cargo update

            if ! git diff --quiet; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add Cargo.lock
              git commit -m "chore: update Rust dependencies"
              git push
            fi
          fi

  # Cleanup old artifacts, logs, and temporary files
  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    needs: detect-project
    if: needs.detect-project.outputs.should_run_cleanup == 'true'
    steps:
      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dryRun = ${{ github.event.inputs.dry_run == 'true' }};

            // Get workflow runs older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              status: 'completed'
            });

            const oldRuns = workflows.data.workflow_runs.filter(run =>
              new Date(run.created_at) < thirtyDaysAgo
            );

            console.log(`Found ${oldRuns.length} workflow runs older than 30 days`);

            if (dryRun) {
              console.log('DRY RUN: Would delete the following workflow runs:');
              oldRuns.forEach(run => {
                console.log(`- ${run.name} (${run.id}) from ${run.created_at}`);
              });
            } else {
              for (const run of oldRuns.slice(0, 50)) { // Limit to 50 per run
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`Deleted workflow run ${run.id}`);
                } catch (error) {
                  console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
                }
              }
            }

      - name: Cleanup old releases (keep latest 10)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dryRun = ${{ github.event.inputs.dry_run == 'true' }};

            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // Keep latest 10 releases, delete older ones
            const releasesToDelete = releases.data
              .filter(release => !release.prerelease && !release.draft)
              .slice(10);

            console.log(`Found ${releasesToDelete.length} old releases to clean up`);

            if (dryRun) {
              console.log('DRY RUN: Would delete the following releases:');
              releasesToDelete.forEach(release => {
                console.log(`- ${release.tag_name} (${release.id}) from ${release.created_at}`);
              });
            } else {
              for (const release of releasesToDelete) {
                try {
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                  console.log(`Deleted release ${release.tag_name}`);
                } catch (error) {
                  console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
                }
              }
            }

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dryRun = ${{ github.event.inputs.dry_run == 'true' }};

            // Get artifacts older than 7 days
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oldArtifacts = artifacts.data.artifacts.filter(artifact =>
              new Date(artifact.created_at) < sevenDaysAgo
            );

            console.log(`Found ${oldArtifacts.length} artifacts older than 7 days`);

            if (dryRun) {
              console.log('DRY RUN: Would delete the following artifacts:');
              oldArtifacts.forEach(artifact => {
                console.log(`- ${artifact.name} (${artifact.id}) from ${artifact.created_at}`);
              });
            } else {
              for (const artifact of oldArtifacts) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact ${artifact.name}`);
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }

  # Security updates and vulnerability patches
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    needs: detect-project
    if: (needs.detect-project.outputs.should_run_dependencies == 'true' || github.event.inputs.tasks == 'security-updates') && github.event.schedule
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for security advisories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const advisories = await github.rest.repos.listRepositoryAdvisories({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'published'
            });

            console.log(`Found ${advisories.data.length} published security advisories`);

            if (advisories.data.length > 0) {
              core.setOutput('has_advisories', 'true');
              // Create an issue to track security updates if needed
              const issueBody = `# Security Advisory Review Needed\n\n` +
                `This repository has ${advisories.data.length} published security advisory(ies) that may need attention.\n\n` +
                `Please review the security advisories in the Security tab and take appropriate action.\n\n` +
                `Advisories:\n` +
                advisories.data.map(advisory =>
                  `- [${advisory.summary}](${advisory.html_url})`
                ).join('\n');

              // Check if issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'security,automated',
                state: 'open'
              });

              if (existingIssues.data.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'Security Advisory Review Required',
                  body: issueBody,
                  labels: ['security', 'automated', 'high-priority']
                });
              }
            }

  # Generate maintenance report
  maintenance-report:
    name: Maintenance Report
    runs-on: ubuntu-latest
    needs: [detect-project, stale-management, dependency-updates, cleanup, security-updates]
    if: always()
    steps:
      - name: Create maintenance summary
        run: |
          echo "# üîß Maintenance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Live' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.stale-management.result }}" == "success" ]]; then
            echo "‚úÖ **Stale Issues Management**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.stale-management.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Stale Issues Management**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Stale Issues Management**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.dependency-updates.result }}" == "success" ]]; then
            echo "‚úÖ **Dependency Updates**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.dependency-updates.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Dependency Updates**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Dependency Updates**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.cleanup.result }}" == "success" ]]; then
            echo "‚úÖ **Repository Cleanup**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cleanup.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Repository Cleanup**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Repository Cleanup**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security-updates.result }}" == "success" ]]; then
            echo "‚úÖ **Security Updates**: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-updates.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è **Security Updates**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Security Updates**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Next Maintenance" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekly tasks**: Every Monday at 2 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Monthly tasks**: 1st of each month at 6 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Manual trigger**: Available via workflow dispatch" >> $GITHUB_STEP_SUMMARY
