# file: .github/workflows/sync-receiver.yml
# version: 1.5.0
# guid: f7g8h9i0-j1k2-l3m4-n5o6-p7q8r9s0t1u2

# ‚ö†Ô∏è  DO NOT EDIT DIRECTLY - This file is managed in ghcommon repository
# All changes should be made in jdfalk/ghcommon and will be synced to other repositories
# Edit this file at: https://github.com/jdfalk/ghcommon/edit/main/.github/workflows/sync-receiver.yml

name: Sync Receiver

on:
  repository_dispatch:
    types: [sync-from-ghcommon]
  workflow_dispatch:
    inputs:
      sync_type:
        description: "Type of sync to perform"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - workflows
          - instructions
          - prompts
          - scripts
          - linters
          - labels
      force_sync:
        description: "Force sync even if no changes detected"
        required: false
        default: false
        type: boolean
      verbose_logging:
        description: "Enable verbose logging to see all file operations"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  sync-from-ghcommon:
    name: Sync Files from ghcommon
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout ghcommon
        uses: actions/checkout@v5
        with:
          repository: jdfalk/ghcommon
          path: ghcommon-source
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set sync parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "sync_type=${{ github.event.client_payload.sync_type }}" >> $GITHUB_OUTPUT
            echo "source_repo=${{ github.event.client_payload.source_repo }}" >> $GITHUB_OUTPUT
            echo "source_sha=${{ github.event.client_payload.source_sha }}" >> $GITHUB_OUTPUT
            echo "force_sync=${{ github.event.client_payload.force_sync || 'false' }}" >> $GITHUB_OUTPUT
            echo "verbose_logging=${{ github.event.client_payload.verbose_logging || 'true' }}" >> $GITHUB_OUTPUT
          else
            echo "sync_type=${{ inputs.sync_type }}" >> $GITHUB_OUTPUT
            echo "source_repo=jdfalk/ghcommon" >> $GITHUB_OUTPUT
            echo "source_sha=manual-dispatch" >> $GITHUB_OUTPUT
            echo "force_sync=${{ inputs.force_sync }}" >> $GITHUB_OUTPUT
            echo "verbose_logging=${{ inputs.verbose_logging }}" >> $GITHUB_OUTPUT
          fi

      - name: Sync files based on type
        run: |
          sync_type="${{ steps.params.outputs.sync_type }}"
          verbose="${{ steps.params.outputs.verbose_logging }}"
          echo "üîÑ Performing sync of type: $sync_type"
          echo "üìä Verbose logging: $verbose"
          echo "üìÅ Source directory contents:"
          ls -la ghcommon-source/

          # Helper function for verbose logging
          log_verbose() {
            if [ "$verbose" = "true" ]; then
              echo "‚ÑπÔ∏è  $1"
            fi
          }

          # Helper function to copy files with logging
          copy_with_logging() {
            local source="$1"
            local dest="$2"
            local description="$3"

            if [ -e "$source" ]; then
              log_verbose "Copying $description: $source -> $dest"
              if cp -r "$source" "$dest" 2>&1; then
                echo "‚úÖ Successfully copied $description"
                if [ "$verbose" = "true" ]; then
                  ls -la "$dest" | head -10
                fi
              else
                echo "‚ùå Failed to copy $description"
                return 1
              fi
            else
              echo "‚ö†Ô∏è  Source not found for $description: $source"
            fi
          }

          # Create directories if they don't exist
          echo "üìÅ Creating directory structure..."
          mkdir -p .github/workflows .github/instructions .github/prompts scripts .github/linters .github/scripts

          echo "üìã Available source files:"
          find ghcommon-source -type f -name "*.yml" -o -name "*.md" -o -name "*.json" -o -name "*.sh" | head -20

          case "$sync_type" in
            "all"|"workflows")
              echo "üîÑ Processing workflows section..."
              # Skip all workflow files - GitHub App lacks 'workflows' permission
              # Workflow files require special permissions that the GitHub App token doesn't have
              echo "‚ö†Ô∏è  Skipping workflow files due to GitHub App permission limitations"
              if [ "$verbose" = "true" ]; then
                echo "üìã Available workflow files in source:"
                ls -la ghcommon-source/.github/workflows/ || echo "No workflows directory found"
              fi
              ;;&
            "all"|"instructions")
              echo "üîÑ Processing instructions section..."
              copy_with_logging "ghcommon-source/.github/copilot-instructions.md" ".github/" "copilot-instructions.md"

              if [ -d "ghcommon-source/.github/instructions" ]; then
                echo "üìã Instructions files to copy:"
                ls -la ghcommon-source/.github/instructions/
                for file in ghcommon-source/.github/instructions/*; do
                  if [ -f "$file" ]; then
                    copy_with_logging "$file" ".github/instructions/" "instruction file $(basename "$file")"
                  fi
                done
              else
                echo "‚ö†Ô∏è  No instructions directory found in source"
              fi
              ;;&
            "all"|"prompts")
              echo "üîÑ Processing prompts section..."
              if [ -d "ghcommon-source/.github/prompts" ]; then
                echo "üìã Prompts files to copy:"
                ls -la ghcommon-source/.github/prompts/ || echo "Prompts directory empty"
                copy_with_logging "ghcommon-source/.github/prompts/*" ".github/prompts/" "prompts files"
              else
                echo "‚ö†Ô∏è  No prompts directory found in source"
              fi
              ;;&
            "all"|"scripts"|"github-scripts")
              echo "üîÑ Processing scripts section..."
              if [ "$sync_type" = "scripts" ] || [ "$sync_type" = "all" ]; then
                if [ -d "ghcommon-source/scripts" ]; then
                  echo "üìã Scripts files to copy:"
                  ls -la ghcommon-source/scripts/ | head -10
                  for item in ghcommon-source/scripts/*; do
                    if [ -e "$item" ]; then
                      copy_with_logging "$item" "scripts/" "script $(basename "$item")"
                    fi
                  done
                else
                  echo "‚ö†Ô∏è  No scripts directory found in source"
                fi
              fi
              if [ "$sync_type" = "github-scripts" ] || [ "$sync_type" = "all" ]; then
                if [ -d "ghcommon-source/.github/scripts" ]; then
                  echo "üìã GitHub scripts files to copy:"
                  ls -la ghcommon-source/.github/scripts/
                  copy_with_logging "ghcommon-source/.github/scripts/*" ".github/scripts/" "GitHub scripts"
                else
                  echo "‚ö†Ô∏è  No .github/scripts directory found in source"
                fi
              fi
              ;;&
            "all"|"linters")
              echo "üîÑ Processing linters section..."
              if [ -d "ghcommon-source/.github/linters" ]; then
                echo "üìã Linter files to copy:"
                ls -la ghcommon-source/.github/linters/
                copy_with_logging "ghcommon-source/.github/linters/*" ".github/linters/" "linter files"
              else
                echo "‚ö†Ô∏è  No linters directory found in source"
              fi
              ;;&
            "all"|"labels")
              echo "üîÑ Processing labels section..."
              copy_with_logging "ghcommon-source/labels.json" "." "labels.json"
              copy_with_logging "ghcommon-source/labels.md" "." "labels.md"

              # Copy the GitHub labels sync script
              copy_with_logging "ghcommon-source/scripts/sync-github-labels.py" "scripts/" "GitHub labels sync script"

              # Optional: Actually sync GitHub repository labels if GITHUB_TOKEN is available
              if [ -n "$GITHUB_TOKEN" ] && [ "${{ steps.params.outputs.sync_type }}" = "labels" ]; then
                echo "üè∑Ô∏è  Attempting to sync GitHub repository labels..."
                if python3 scripts/sync-github-labels.py ${{ github.repository_owner }} ${{ github.event.repository.name }} 2>&1; then
                  echo "‚úÖ Successfully synced GitHub repository labels"
                else
                  echo "‚ö†Ô∏è  GitHub label sync failed, but file sync completed"
                fi
              else
                echo "‚ÑπÔ∏è  Copied label files and sync script. To sync GitHub labels, run:"
                echo "   GITHUB_TOKEN=<token> python3 scripts/sync-github-labels.py ${{ github.repository_owner }} ${{ github.event.repository.name }}"
              fi
              ;;
          esac

          # Create symlinks for linters
          echo "üîó Setting up linter symlinks..."
          mkdir -p .vscode
          if [ -d ".github/linters" ] && [ ! -e ".vscode/linters" ]; then
            ln -sf ../.github/linters .vscode/linters
            echo "‚úÖ Created symlink: .vscode/linters -> ../.github/linters"
          else
            log_verbose "Linter symlink already exists or linters directory not found"
          fi

          # Clean up the source directory to prevent embedded git repository issues
          echo "üßπ Cleaning up source directory..."
          rm -rf ghcommon-source

          echo "‚úÖ Sync operation completed"

      - name: Check for changes
        id: changes
        run: |
          force_sync="${{ steps.params.outputs.force_sync }}"

          echo "üîç Checking for changes..."
          echo "üîß Force sync enabled: $force_sync"

          if git diff --quiet && [ "$force_sync" != "true" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No changes detected and force sync not enabled"
            echo "üìä Git status:"
            git status --porcelain
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            if [ "$force_sync" = "true" ]; then
              echo "üîß Force sync enabled - proceeding with commit"
            else
              echo "‚úÖ Changes detected - proceeding with commit"
            fi
            echo "üìã Files that will be committed:"
            git diff --name-only
            echo "üìä Detailed git status:"
            git status --porcelain
            echo "üìù Git diff summary:"
            git diff --stat
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "sync: update files from ghcommon

          Source: ${{ steps.params.outputs.source_repo }}
          SHA: ${{ steps.params.outputs.source_sha }}
          Sync type: ${{ steps.params.outputs.sync_type }}"
          git push

      - name: Summary
        run: |
          echo "## üìä Sync Receiver Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Sync Type:** ${{ steps.params.outputs.sync_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Repo:** ${{ steps.params.outputs.source_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source SHA:** ${{ steps.params.outputs.source_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Sync:** ${{ steps.params.outputs.force_sync }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verbose Logging:** ${{ steps.params.outputs.verbose_logging }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Made:** ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Files Modified:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only | while read file; do
              echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
            done
          fi
