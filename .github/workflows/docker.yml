# file: .github/workflows/docker.yml
# version: 1.0.0
# guid: d1e2f3a4-b5c6-d7e8-f9a0-b1c2d3e4f5a6

name: Docker Build & Publish

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
    paths:
      - "**/Dockerfile*"
      - "**/docker-compose*.yml"
      - "**/docker-compose*.yaml"
      - "**/.dockerignore"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push-image:
        description: "Push image to registry"
        required: false
        default: true
        type: boolean
      platforms:
        description: "Target platforms"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write

jobs:
  # Detect Docker-related changes and configurations
  detect-docker:
    name: Detect Docker Configuration
    runs-on: ubuntu-latest
    outputs:
      has-dockerfile: ${{ steps.check.outputs.has-dockerfile }}
      dockerfile-path: ${{ steps.check.outputs.dockerfile-path }}
      has-compose: ${{ steps.check.outputs.has-compose }}
      should-build: ${{ steps.check.outputs.should-build }}
      image-tags: ${{ steps.tags.outputs.tags }}
      image-labels: ${{ steps.tags.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker files
        id: check
        run: |
          # Check for Dockerfile variants
          if [ -f "Dockerfile" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "dockerfile-path=./Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "Dockerfile.hybrid" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "dockerfile-path=./Dockerfile.hybrid" >> $GITHUB_OUTPUT
          elif [ -f "Dockerfile.prod" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "dockerfile-path=./Dockerfile.prod" >> $GITHUB_OUTPUT
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "dockerfile-path=" >> $GITHUB_OUTPUT
          fi

          # Check for docker-compose files
          if [ -f "docker-compose.yml" ] || [ -f "docker-compose.yaml" ]; then
            echo "has-compose=true" >> $GITHUB_OUTPUT
          else
            echo "has-compose=false" >> $GITHUB_OUTPUT
          fi

          # Determine if we should build
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-build=false" >> $GITHUB_OUTPUT  # Only test build on PRs
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: tags
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Container for ${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}

  # Build and test Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: detect-docker
    if: needs.detect-docker.outputs.has-dockerfile == 'true'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-size: ${{ steps.inspect.outputs.size }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: needs.detect-docker.outputs.should-build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ needs.detect-docker.outputs.dockerfile-path }}
          platforms: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}
          push: ${{ needs.detect-docker.outputs.should-build == 'true' && (inputs.push-image || true) }}
          tags: ${{ needs.detect-docker.outputs.image-tags }}
          labels: ${{ needs.detect-docker.outputs.image-labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Inspect image
        id: inspect
        if: needs.detect-docker.outputs.should-build == 'true'
        run: |
          # Get image size
          IMAGE_SIZE=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" | head -1 | awk '{print $2}')
          echo "size=$IMAGE_SIZE" >> $GITHUB_OUTPUT

          echo "# 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tags | ${{ needs.detect-docker.outputs.image-tags }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Size | $IMAGE_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | ${{ inputs.platforms || 'linux/amd64,linux/arm64' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | ${{ env.REGISTRY }} |" >> $GITHUB_STEP_SUMMARY

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [detect-docker, build]
    if: needs.detect-docker.outputs.has-dockerfile == 'true' && needs.detect-docker.outputs.should-build == 'true'
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          output: "trivy-fs-results.txt"

      - name: Upload filesystem scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-results.sarif
            trivy-fs-results.txt

  # Generate SBOM (Software Bill of Materials)
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [detect-docker, build]
    if: needs.detect-docker.outputs.has-dockerfile == 'true' && needs.detect-docker.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build.outputs.image-digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

  # Test the built image
  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: [detect-docker, build]
    if: needs.detect-docker.outputs.has-dockerfile == 'true'
    strategy:
      matrix:
        platform: [linux/amd64] # Test on primary platform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.detect-docker.outputs.should-build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test image functionality
        run: |
          echo "# 🧪 Docker Image Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.detect-docker.outputs.should-build }}" == "true" ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          else
            # Build test image for PRs
            docker build -t test-image -f ${{ needs.detect-docker.outputs.dockerfile-path }} .
            IMAGE_TAG="test-image"
          fi

          echo "Testing image: $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Basic container tests
          echo "## Basic Tests" >> $GITHUB_STEP_SUMMARY

          # Test if container starts
          if docker run --rm --entrypoint="" $IMAGE_TAG echo "Container start test"; then
            echo "✅ Container starts successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container failed to start" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Test if main command exists (if it's a Go binary)
          if docker run --rm --entrypoint="" $IMAGE_TAG ls /app/ 2>/dev/null || docker run --rm --entrypoint="" $IMAGE_TAG ls /usr/local/bin/ 2>/dev/null; then
            echo "✅ Application files present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Application structure unknown" >> $GITHUB_STEP_SUMMARY
          fi

          # Test container health (if health check is defined)
          HEALTH_CHECK=$(docker inspect $IMAGE_TAG --format='{{.Config.Healthcheck}}' 2>/dev/null || echo "none")
          if [ "$HEALTH_CHECK" != "none" ] && [ "$HEALTH_CHECK" != "<nil>" ]; then
            echo "✅ Health check configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No health check configured" >> $GITHUB_STEP_SUMMARY
          fi

  # Docker Compose validation
  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    needs: detect-docker
    if: needs.detect-docker.outputs.has-compose == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate docker-compose.yml
        run: |
          echo "# 🐳 Docker Compose Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "docker-compose.yml" ]; then
            echo "Validating docker-compose.yml..." >> $GITHUB_STEP_SUMMARY
            if docker-compose -f docker-compose.yml config >/dev/null 2>&1; then
              echo "✅ docker-compose.yml is valid" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ docker-compose.yml has errors" >> $GITHUB_STEP_SUMMARY
              docker-compose -f docker-compose.yml config
              exit 1
            fi
          fi

          if [ -f "docker-compose.yaml" ]; then
            echo "Validating docker-compose.yaml..." >> $GITHUB_STEP_SUMMARY
            if docker-compose -f docker-compose.yaml config >/dev/null 2>&1; then
              echo "✅ docker-compose.yaml is valid" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ docker-compose.yaml has errors" >> $GITHUB_STEP_SUMMARY
              docker-compose -f docker-compose.yaml config
              exit 1
            fi
          fi

  # Summary and cleanup
  docker-summary:
    name: Docker Summary
    runs-on: ubuntu-latest
    needs: [detect-docker, build, security-scan, generate-sbom, test-image, validate-compose]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🐳 Docker Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.detect-docker.outputs.has-dockerfile }}" == "true" ]]; then
            echo "**Dockerfile Found**: ${{ needs.detect-docker.outputs.dockerfile-path }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Dockerfile Found**: ❌ None" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "**Build Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build.result }}" == "skipped" ]]; then
            echo "**Build Status**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Build Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "**Security Scan**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security-scan.result }}" == "skipped" ]]; then
            echo "**Security Scan**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Security Scan**: ❌ Issues found" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.test-image.result }}" == "success" ]]; then
            echo "**Image Tests**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-image.result }}" == "skipped" ]]; then
            echo "**Image Tests**: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Image Tests**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.detect-docker.outputs.should-build }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Image Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "**Image Tags**: Published" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
