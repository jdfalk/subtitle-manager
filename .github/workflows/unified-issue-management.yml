# file: .github/workflows/unified-issue-management.yml
#
# Unified Issue Management Workflow
#
# This workflow consolidates all issue management operations into a single,
# parallelized workflow using matrix strategy for efficiency.
#
# Features:
# - Process issue updates from issue_updates.json (create, update, comment, close, delete)
# - Manage Copilot review comment tickets
# - Close duplicate issues by title
# - Generate tickets for CodeQL security alerts
# - Comprehensive logging and summary generation
# - GUID-based duplicate prevention
# - Matrix-based parallel execution
#
# Replaces:
# - update-issues.yml
# - copilot-tickets.yml
# - close-duplicates.yml
# - codeql-alert-tickets.yml

name: Unified Issue Management

on:
  # Issue updates from JSON file
  push:
    branches: [main, master]
    paths: [issue_updates.json]

  # Copilot review ticket management
  pull_request_review_comment:
    types: [created, edited, deleted]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request:
    types: [closed]

  # Scheduled operations
  schedule:
    # Close duplicates daily at 1 AM UTC
    - cron: "0 1 * * *"
    # CodeQL alert tickets twice daily at 8 AM and 8 PM UTC
    - cron: "0 8,20 * * *"

  # Manual triggers
  workflow_dispatch:
    inputs:
      operations:
        description: "Operations to run (comma-separated: update-issues, copilot-tickets, close-duplicates, codeql-alerts)"
        required: false
        type: string
        default: "update-issues,copilot-tickets,close-duplicates,codeql-alerts"
      dry_run:
        description: "Run in dry-run mode (no changes)"
        required: false
        type: boolean
        default: false
      force_update:
        description: "Force update existing tickets"
        required: false
        type: boolean
        default: false

jobs:
  determine-operations:
    runs-on: ubuntu-latest
    outputs:
      operations: ${{ steps.determine.outputs.operations }}
      has_issue_updates: ${{ steps.check-files.outputs.has_issue_updates }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for files
        id: check-files
        run: |
          if [[ -f "issue_updates.json" ]]; then
            echo "has_issue_updates=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_issue_updates=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine operations to run
        id: determine
        run: |
          operations=()

          # Manual trigger with specific operations
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IFS=',' read -ra ops <<< "${{ github.event.inputs.operations }}"
            operations=("${ops[@]}")

          # Issue updates file exists
          elif [[ "${{ steps.check-files.outputs.has_issue_updates }}" == "true" ]]; then
            operations+=("update-issues")

          # Copilot events
          elif [[ "${{ github.event_name }}" =~ ^pull_request ]]; then
            operations+=("copilot-tickets")

          # Scheduled events
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            case "${{ github.event.schedule }}" in
              "0 1 * * *")
                operations+=("close-duplicates")
                ;;
              "0 8,20 * * *")
                operations+=("codeql-alerts")
                ;;
            esac

          # Push to main (multiple operations)
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            operations+=("copilot-tickets")
            if [[ "${{ steps.check-files.outputs.has_issue_updates }}" == "true" ]]; then
              operations+=("update-issues")
            fi
          fi

          # Convert array to JSON for matrix
          ops_json=$(printf '%s\n' "${operations[@]}" | jq -R . | jq -s .)
          echo "operations=${ops_json}" >> "$GITHUB_OUTPUT"
          echo "🎯 Operations to run: ${operations[*]}"

  issue-management:
    runs-on: ubuntu-latest
    needs: determine-operations
    if: ${{ needs.determine-operations.outputs.operations != '[]' }}
    permissions:
      issues: write
      contents: write
      pull-requests: write
      security-events: read
      repository-projects: read
    strategy:
      matrix:
        operation: ${{ fromJson(needs.determine-operations.outputs.operations) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Debug operation info
        run: |
          echo "🔧 Operation: ${{ matrix.operation }}"
          echo "📅 Event: ${{ github.event_name }}"
          echo "🔀 Action: ${{ github.event.action }}"
          echo "📁 Repository: ${{ github.repository }}"
          echo "🏃 Dry run: ${{ github.event.inputs.dry_run }}"

      - name: Execute operation
        id: execute
        run: |
          echo "🚀 Executing: ${{ matrix.operation }}"

          # Set environment variables
          export DRY_RUN="${{ github.event.inputs.dry_run }}"
          export FORCE_UPDATE="${{ github.event.inputs.force_update }}"

          # Run the operation
          python .github/scripts/issue_manager.py ${{ matrix.operation }}

          # Set outputs for summary
          echo "operation=${{ matrix.operation }}" >> "$GITHUB_OUTPUT"
          echo "status=completed" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}

      - name: Clean up issue_updates.json
        if: ${{ matrix.operation == 'update-issues' && needs.determine-operations.outputs.has_issue_updates == 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🧹 Removing processed issue_updates.json"
          rm -f issue_updates.json

      - name: Create cleanup PR
        if: ${{ matrix.operation == 'update-issues' && needs.determine-operations.outputs.has_issue_updates == 'true' && github.event.inputs.dry_run != 'true' }}
        uses: peter-evans/create-pull-request@v7
        with:
          branch: cleanup-issue-updates-${{ github.run_id }}
          commit-message: "🧹 Remove processed issue_updates.json"
          title: "🧹 Clean up processed issue updates"
          body: |
            ## Summary
            Automatically removing `issue_updates.json` after successful processing.

            **Operation:** ${{ matrix.operation }}
            **Workflow run:** ${{ github.run_id }}
            **Timestamp:** ${{ github.event.head_commit.timestamp }}

            This PR is auto-generated by the unified issue management workflow.

      - name: Generate operation summary
        run: |
          echo "## 🎯 Operation Summary: ${{ matrix.operation }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Status:** ✅ Completed successfully" >> "$GITHUB_STEP_SUMMARY"
          echo "**Event:** ${{ github.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Repository:** ${{ github.repository }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"

          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "**Mode:** 🔍 Dry run (no changes made)" >> "$GITHUB_STEP_SUMMARY"
          fi

          case "${{ matrix.operation }}" in
            "update-issues")
              echo "**Details:** Processed issue updates from \`issue_updates.json\`" >> "$GITHUB_STEP_SUMMARY"
              ;;
            "copilot-tickets")
              echo "**Details:** Managed Copilot review comment tickets" >> "$GITHUB_STEP_SUMMARY"
              ;;
            "close-duplicates")
              echo "**Details:** Closed duplicate issues by title" >> "$GITHUB_STEP_SUMMARY"
              ;;
            "codeql-alerts")
              echo "**Details:** Generated tickets for CodeQL security alerts" >> "$GITHUB_STEP_SUMMARY"
              ;;
          esac

  workflow-summary:
    runs-on: ubuntu-latest
    needs: [determine-operations, issue-management]
    if: always()
    steps:
      - name: Generate workflow summary
        run: |
          echo "# 🚀 Unified Issue Management Workflow Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Workflow run:** \`${{ github.run_id }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Triggered by:** ${{ github.event_name }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Repository:** ${{ github.repository }}" >> "$GITHUB_STEP_SUMMARY"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          operations="${{ needs.determine-operations.outputs.operations }}"
          if [[ "$operations" == "[]" ]]; then
            echo "## 📝 Result" >> "$GITHUB_STEP_SUMMARY"
            echo "No operations were required for this event." >> "$GITHUB_STEP_SUMMARY"
          else
            echo "## 📊 Operations Executed" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"

            # Parse operations and show status
            echo "$operations" | jq -r '.[]' | while read -r op; do
              echo "- ✅ \`$op\` - Completed" >> "$GITHUB_STEP_SUMMARY"
            done
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## 🔗 Quick Links" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Workflow runs](https://github.com/${{ github.repository }}/actions)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Issues](https://github.com/${{ github.repository }}/issues)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Security alerts](https://github.com/${{ github.repository }}/security)" >> "$GITHUB_STEP_SUMMARY"
