# file: .github/workflows/repo-sync.yml
# version: 1.0.0
# guid: g8h9i0j1-k2l3-m4n5-o6p7-q8r9s0t1u2v3

name: Repository Synchronization

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/**"
      - ".github/instructions/**"
      - ".github/copilot-instructions.md"
      - "labels.json"
  workflow_dispatch:
    inputs:
      target_repos:
        description: "Comma-separated list of repos to sync (or 'all')"
        required: true
        default: "all"
        type: string
      sync_workflows:
        description: "Sync GitHub Actions workflows"
        required: false
        default: true
        type: boolean
      sync_instructions:
        description: "Sync Copilot instructions"
        required: false
        default: true
        type: boolean
      sync_labels:
        description: "Sync GitHub labels"
        required: false
        default: true
        type: boolean
      dry_run:
        description: "Perform dry run (no actual changes)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  # Target repositories for synchronization
  TARGET_REPOS: |
    jdfalk/gcommon
    jdfalk/subtitle-manager
    jdfalk/copilot-agent-util-rust

  # Files to sync across repositories
  SYNC_FILES: |
    .github/copilot-instructions.md
    .github/instructions/general-coding.instructions.md
    .github/instructions/go.instructions.md
    .github/instructions/python.instructions.md
    .github/instructions/rust.instructions.md
    .github/instructions/javascript.instructions.md
    .github/workflows/ci.yml
    .github/workflows/docker.yml
    .github/workflows/security.yml
    .github/workflows/maintenance.yml
    .github/workflows/release.yml
    .github/workflows/pr-automation.yml
    .github/workflows/docs-automation.yml
    .github/workflows/issue-automation.yml

jobs:
  prepare-sync:
    name: Prepare Synchronization
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.repos.outputs.list }}
      files: ${{ steps.files.outputs.list }}
      should_sync: ${{ steps.check.outputs.should_sync }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine target repositories
        id: repos
        env:
          INPUT_REPOS: ${{ github.event.inputs.target_repos || 'all' }}
        run: |
          if [ "$INPUT_REPOS" = "all" ]; then
            repos='["jdfalk/subtitle-manager", "jdfalk/copilot-agent-util-rust"]'
          else
            # Convert comma-separated list to JSON array
            repos=$(echo "$INPUT_REPOS" | jq -R 'split(",") | map(gsub("^\\s+|\\s+$"; ""))')
          fi
          echo "list=$repos" >> $GITHUB_OUTPUT
          echo "Target repositories: $repos"

      - name: Determine files to sync
        id: files
        run: |
          files='[]'

          if [ "${{ github.event.inputs.sync_workflows || 'true' }}" = "true" ]; then
            workflow_files='[
              ".github/workflows/ci.yml",
              ".github/workflows/docker.yml",
              ".github/workflows/security.yml",
              ".github/workflows/maintenance.yml",
              ".github/workflows/release.yml",
              ".github/workflows/pr-automation.yml",
              ".github/workflows/docs-automation.yml",
              ".github/workflows/issue-automation.yml"
            ]'
            files=$(echo "$files $workflow_files" | jq -s 'add')
          fi

          if [ "${{ github.event.inputs.sync_instructions || 'true' }}" = "true" ]; then
            instruction_files='[
              ".github/copilot-instructions.md",
              ".github/instructions/general-coding.instructions.md"
            ]'
            files=$(echo "$files $instruction_files" | jq -s 'add')
          fi

          if [ "${{ github.event.inputs.sync_labels || 'true' }}" = "true" ]; then
            label_files='["labels.json"]'
            files=$(echo "$files $label_files" | jq -s 'add')
          fi

          echo "list=$files" >> $GITHUB_OUTPUT
          echo "Files to sync: $files"

      - name: Check if sync should proceed
        id: check
        run: |
          # Skip sync if this is ghcommon (source repository)
          if [ "${{ github.repository }}" = "jdfalk/ghcommon" ]; then
            echo "should_sync=false" >> $GITHUB_OUTPUT
            echo "Skipping sync - this is the source repository"
          else
            echo "should_sync=true" >> $GITHUB_OUTPUT
            echo "Proceeding with sync"
          fi

  sync-repositories:
    name: Sync to ${{ matrix.repo }}
    runs-on: ubuntu-latest
    needs: prepare-sync
    if: needs.prepare-sync.outputs.should_sync == 'true'
    strategy:
      matrix:
        repo: ${{ fromJson(needs.prepare-sync.outputs.repos) }}
      fail-fast: false
    steps:
      - name: Checkout source repository (ghcommon)
        uses: actions/checkout@v4
        with:
          repository: jdfalk/ghcommon
          token: ${{ secrets.GITHUB_TOKEN }}
          path: source

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: target

      - name: Setup sync environment
        run: |
          cd target
          git config user.name "Repository Sync Bot"
          git config user.email "action@github.com"

      - name: Sync files
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          files='${{ needs.prepare-sync.outputs.files }}'

          echo "# 🔄 Repository Sync: ${{ matrix.repo }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          synced_files=0
          skipped_files=0

          echo "$files" | jq -r '.[]' | while read -r file; do
            if [ -f "source/$file" ]; then
              # Create directory if it doesn't exist
              target_dir="target/$(dirname "$file")"
              mkdir -p "$target_dir"

              # Check if file differs
              if [ ! -f "target/$file" ] || ! diff -q "source/$file" "target/$file" >/dev/null 2>&1; then
                if [ "$DRY_RUN" = "true" ]; then
                  echo "Would sync: $file" >> $GITHUB_STEP_SUMMARY
                else
                  cp "source/$file" "target/$file"
                  echo "✅ Synced: $file" >> $GITHUB_STEP_SUMMARY
                fi
                synced_files=$((synced_files + 1))
              else
                echo "⏭️ Skipped: $file (no changes)" >> $GITHUB_STEP_SUMMARY
                skipped_files=$((skipped_files + 1))
              fi
            else
              echo "⚠️ Missing: $file (not found in source)" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary**: $synced_files files synced, $skipped_files files skipped" >> $GITHUB_STEP_SUMMARY

      - name: Sync labels
        if: github.event.inputs.sync_labels != 'false'
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          if [ -f "source/labels.json" ]; then
            echo "## 🏷️ Label Synchronization" >> $GITHUB_STEP_SUMMARY

            if [ "$DRY_RUN" = "true" ]; then
              echo "Would sync labels from labels.json" >> $GITHUB_STEP_SUMMARY
            else
              # This would use GitHub API to sync labels
              echo "Label sync would be implemented here" >> $GITHUB_STEP_SUMMARY
              # cp "source/labels.json" "target/labels.json"
            fi
          fi

      - name: Create pull request
        if: github.event.inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd target

          # Check if there are changes
          if ! git diff --quiet; then
            # Create branch for sync
            branch="repo-sync-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "$branch"

            # Commit changes
            git add .
            git commit -m "sync: update files from ghcommon

            Synchronized files:
            $(git diff --name-only HEAD~1)

            Auto-generated by repository sync workflow."

            # Push branch
            git push origin "$branch"

            # Create pull request
            gh pr create \
              --title "Repository Sync: Update from ghcommon" \
              --body "🤖 **Automated Repository Sync**

            This PR synchronizes files from the central ghcommon repository.

            ## Changes
            $(git diff --name-only HEAD~1 | sed 's/^/- /')

            ## What's being synced
            - GitHub Actions workflows
            - Copilot instructions
            - Repository configuration

            This is an automated sync to ensure consistency across repositories." \
              --head "$branch" \
              --base main

            echo "✅ Created PR for sync changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes to sync" >> $GITHUB_STEP_SUMMARY
          fi

  sync-summary:
    name: Sync Summary
    runs-on: ubuntu-latest
    needs: [prepare-sync, sync-repositories]
    if: always()
    steps:
      - name: Create sync summary
        run: |
          echo "# 📊 Repository Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target repositories**: ${{ needs.prepare-sync.outputs.repos }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry run**: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check sync results
          if [ "${{ needs.sync-repositories.result }}" = "success" ]; then
            echo "✅ **Status**: Sync completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.sync-repositories.result }}" = "failure" ]; then
            echo "❌ **Status**: Sync failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Status**: Sync skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Files Synchronized" >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.prepare-sync.outputs.files }}' | jq -r '.[] | "- " + .' >> $GITHUB_STEP_SUMMARY
